{"mapping":{"ApaiIO\\ApaiIO":{"class":{"descriptions":{"short":"ApaiIO Core\nBundles all components","long":"http:\/\/www.amazon.com\n\n@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$configuration"],"docParameters":{"$configuration":{"type":"ConfigurationInterface","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ApaiIO\\Common\\OperationTrait":{"class":{"descriptions":{"short":"This trait allows you to add the basic operation functions to your class.","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Configuration\\ConfigurationInterface":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Configuration\\Country":{"class":{"descriptions":{"short":"Countryvalidation and countrylistings according to the amazonapi","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Configuration\\GenericConfiguration":{"class":{"descriptions":{"short":"A generic configurationclass","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\AbstractOperation":{"class":{"descriptions":{"short":"A base implementation of the OperationInterface","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\BrowseNodeLookup":{"class":{"descriptions":{"short":"A browse node lookup operation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\CartAdd":{"class":{"descriptions":{"short":"A cart add operation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\CartClear":{"class":{"descriptions":{"short":"A cart add operation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\CartCreate":{"class":{"descriptions":{"short":"A cart create operation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\Lookup":{"class":{"descriptions":{"short":"A item lookup operation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\OperationInterface":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\Search":{"class":{"descriptions":{"short":"A item search operation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Operations\\SimilarityLookup":{"class":{"descriptions":{"short":"A similarity lookup operation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Request\\RequestFactory":{"class":{"descriptions":{"short":"A requestfactory which creates a new requestobjects depending on the class name you provide","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Private constructor","long":""},"deprecated":false}}}},"ApaiIO\\Request\\RequestInterface":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Request\\Rest\\Request":{"class":{"descriptions":{"short":"Basic implementation of the rest request","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initialize instance","long":""},"deprecated":false}}}},"ApaiIO\\Request\\Soap\\Request":{"class":{"descriptions":{"short":"Basic implementation of the soap request","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\Request\\Util":{"class":{"descriptions":{"short":"A collection of misc functions helping to build the request","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\ResponseTransformer\\ObjectToArray":{"class":{"descriptions":{"short":"A responsetransformer transforming an object to an array","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\ResponseTransformer\\ResponseTransformerFactory":{"class":{"descriptions":{"short":"A responsetransformerfactory which creates a new responsetransformerobjects depending on the class name you provide","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Private constructor","long":""},"deprecated":false}}}},"ApaiIO\\ResponseTransformer\\ResponseTransformerInterface":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\ResponseTransformer\\XmlToDomDocument":{"class":{"descriptions":{"short":"A responsetransformer transforming a xml to a domdocument","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\ResponseTransformer\\XmlToSimpleXmlObject":{"class":{"descriptions":{"short":"A responsetransformer transforming a xml to a simpleXML Object.","long":"@author Nikolai Panasenko <nikolai@panasenko.de>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ApaiIO\\ResponseTransformer\\Xslt":{"class":{"descriptions":{"short":"A responsetransformer transforming an xml via xslt","long":"@author Jan Eichhorn <exeu65@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$xslt"],"optionals":[],"docParameters":{"$xslt":{"type":"string","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"App\\Console\\Installer":{"class":{"descriptions":{"short":"Provides installation hooks for when this application is installed via\ncomposer. Customize this class to suit your needs.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"App\\Controller\\Component\\ProductComponent":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"A ComponentRegistry this component can use to lazy load its components"},"$config":{"type":"array","description":"Array of configuration settings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"App\\Model\\Entity\\User":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$properties","$options"],"docParameters":{"$properties":{"type":"array","description":"hash of properties to set in this entity"},"$options":{"type":"array","description":"list of options to use when creating this entity"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes the internal properties of this entity out of the\nkeys in an array. The following list of options can be used:","long":"- useSetters: whether use internal setters for properties or not\n- markClean: whether to mark all properties as clean after setting them\n- markNew: whether this instance has not yet been persisted\n- guard: whether to prevent inaccessible properties from being set (default: false)\n- source: A string representing the alias of the repository this entity came from\n\n### Example:\n\n```\n$entity = new Entity(['id' => 1, 'name' => 'Andrew'])\n```"},"deprecated":false}}}},"App\\Model\\Table\\CategoriesTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\CategoryEbayTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\CategoryKeywordsTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ExportAmazonTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ImportErrorsTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ImportLogsTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ImportReadLogsTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ImportReportsTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ProductImagesTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ProductLogInsertsTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ProductLogUpdatesTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\ProductsTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\SettingsTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Model\\Table\\UsersTable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"App\\Shell\\ConsoleShell":{"class":{"descriptions":{"short":"Simple console wrapper around Psy\\Shell.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"App\\Shell\\EbayShell":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"App\\Shell\\ManagerShell":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"App\\View\\AjaxView":{"class":{"descriptions":{"short":"A view class that is used for AJAX responses.\nCurrently only switches the default layout and sets the response type -\nwhich just maps to text\/html by default.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$viewOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response instance."},"$eventManager":{"type":"\\Cake\\Event\\EventManager|null","description":"Event manager instance."},"$viewOptions":{"type":"array","description":"View options. See View::$_passedVars for list of options which get set as class properties."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"App\\View\\AppView":{"class":{"descriptions":{"short":"Application View","long":"Your application\u2019s default view class"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$viewOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response instance."},"$eventManager":{"type":"\\Cake\\Event\\EventManager|null","description":"Event manager instance."},"$viewOptions":{"type":"array","description":"View options. See View::$_passedVars for list of options which get set as class properties."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Aura\\Intl\\BasicFormatter":{"class":{"descriptions":{"short":"BasicFormatter","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Aura\\Intl\\Exception":{"class":{"descriptions":{"short":"Exception","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Aura\\Intl\\Exception\\CannotFormat":{"class":{"descriptions":{"short":"Could not format a message.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Aura\\Intl\\Exception\\CannotInstantiateFormatter":{"class":{"descriptions":{"short":"Could not instantiate a formatter object.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Aura\\Intl\\Exception\\FormatterNotMapped":{"class":{"descriptions":{"short":"A formatter name is not mapped in the locator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Aura\\Intl\\Exception\\IcuVersionTooLow":{"class":{"descriptions":{"short":"ICU Version is too low for Aura.Intl to work properly.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Aura\\Intl\\FormatterInterface":{"class":{"descriptions":{"short":"Formatter Interface","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Aura\\Intl\\FormatterLocator":{"class":{"descriptions":{"short":"A ServiceLocator implementation for loading and retaining formatter objects.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$registry"],"docParameters":{"$registry":{"type":"array","description":"An array of key-value pairs where the key is the formatter name the value is a callable that returns a formatter object."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Aura\\Intl\\IntlFormatter":{"class":{"descriptions":{"short":"Uses php intl extension to format messages","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$icu_version"],"docParameters":{"$icu_version":{"type":"string","description":"The current ICU version; mostly used for testing."}},"throws":{"Exception\\IcuVersionTooLow":"when the Version of ICU installed is too low for Aura.Intl to work properly."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Aura\\Intl\\Package":{"class":{"descriptions":{"short":"Message Catalog","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$formatter","$fallback","$messages"],"docParameters":{"$formatter":{"type":"string","description":"The name of the formatter to use."},"$fallback":{"type":"string","description":"The name of the fallback package to use."},"$messages":{"type":"array","description":"The messages in this package."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Aura\\Intl\\PackageFactory":{"class":{"descriptions":{"short":"Creates new package instances.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Aura\\Intl\\PackageLocator":{"class":{"descriptions":{"short":"A ServiceLocator implementation for loading and retaining translator objects.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$registry"],"docParameters":{"$registry":{"type":"array","description":"A registry of packages."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Aura\\Intl\\PackageLocatorInterface":{"class":{"descriptions":{"short":"Package locator interface.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Aura\\Intl\\Translator":{"class":{"descriptions":{"short":"Translator to translate the message","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$locale","$messages","$formatter"],"optionals":["$fallback"],"docParameters":{"$locale":{"type":"string","description":"The locale being used."},"$messages":{"type":"array","description":"The message keys and translations."},"$formatter":{"type":"FormatterInterface","description":"A message formatter."},"$fallback":{"type":"TranslatorInterface","description":"A fallback translator."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Aura\\Intl\\TranslatorFactory":{"class":{"descriptions":{"short":"Factory to create Translator objects.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Aura\\Intl\\TranslatorInterface":{"class":{"descriptions":{"short":"TranslatorInterface","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Aura\\Intl\\TranslatorLocator":{"class":{"descriptions":{"short":"A ServiceLocator implementation for loading and retaining translator objects.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$packages","$formatters","$factory","$locale"],"optionals":[],"docParameters":{"$packages":{"type":"PackageLocator","description":"The package locator."},"$formatters":{"type":"FormatterLocator","description":"The formatter locator."},"$factory":{"type":"TranslatorFactory","description":"A translator factory to create translator objects for the locale and package."},"$locale":{"type":"string","description":"The default locale code to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Bake\\Shell\\BakeShell":{"class":{"descriptions":{"short":"Command-line code generation utility to automate programmer chores.","long":"Bake is CakePHP's code generation script, which can help you kickstart\napplication development by writing fully functional skeleton controllers,\nmodels, and templates. Going further, Bake can also write Unit Tests for you."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\BakeTask":{"class":{"descriptions":{"short":"Base class for Bake Tasks.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\BakeTemplateTask":{"class":{"descriptions":{"short":"Used by other tasks to generate templated output, Acts as an interface to BakeView","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\BehaviorTask":{"class":{"descriptions":{"short":"Behavior code generator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\CellTask":{"class":{"descriptions":{"short":"Task for creating cells.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\ComponentTask":{"class":{"descriptions":{"short":"Component code generator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\ControllerTask":{"class":{"descriptions":{"short":"Task class for creating and updating controller files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\FixtureTask":{"class":{"descriptions":{"short":"Task class for creating and updating fixtures files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\FormTask":{"class":{"descriptions":{"short":"ShellHelper code generator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\HelperTask":{"class":{"descriptions":{"short":"Helper code generator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\MailerTask":{"class":{"descriptions":{"short":"Mailer code generator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\ModelTask":{"class":{"descriptions":{"short":"Task class for generating model files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\PluginTask":{"class":{"descriptions":{"short":"The Plugin Task handles creating an empty plugin, ready to be used","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\ShellHelperTask":{"class":{"descriptions":{"short":"ShellHelper code generator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\ShellTask":{"class":{"descriptions":{"short":"Shell code generator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\SimpleBakeTask":{"class":{"descriptions":{"short":"Base class for simple bake tasks code generator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\TemplateTask":{"class":{"descriptions":{"short":"Task class for creating and updating view template files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Shell\\Task\\TestTask":{"class":{"descriptions":{"short":"Task class for creating and updating test files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Bake\\Utility\\Model\\AssociationFilter":{"class":{"descriptions":{"short":"Utility class to filter Model Table associations","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Bake\\View\\BakeView":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$viewOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response instance."},"$eventManager":{"type":"\\Cake\\Event\\EventManager|null","description":"Event manager instance."},"$viewOptions":{"type":"array","description":"View options. See View::$_passedVars for list of options which get set as class properties."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Upon construction, append the plugin's template paths to the paths to check","long":""},"deprecated":false}}}},"Bake\\View\\Helper\\BakeHelper":{"class":{"descriptions":{"short":"Bake helper","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"Bake\\View\\Helper\\DocBlockHelper":{"class":{"descriptions":{"short":"DocBlock helper","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\AbstractPasswordHasher":{"class":{"descriptions":{"short":"Abstract password hashing class","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Array of config."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\BaseAuthenticate":{"class":{"descriptions":{"short":"Base Authentication class with common methods and properties.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"The Component registry used on this request."},"$config":{"type":"array","description":"Array of config to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\BaseAuthorize":{"class":{"descriptions":{"short":"Abstract base authorization adapter for AuthComponent.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"The controller for this request."},"$config":{"type":"array","description":"An array of config. This class does not use any config."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\BasicAuthenticate":{"class":{"descriptions":{"short":"Basic Authentication adapter for AuthComponent.","long":"Provides Basic HTTP authentication support for AuthComponent. Basic Auth will\nauthenticate users against the configured userModel and verify the username\nand passwords match.\n\n### Using Basic auth\n\nIn your controller's components array, add auth + the required config\n```\npublic $components = [\n'Auth' => [\n'authenticate' => ['Basic']\n]\n];\n```\n\nYou should also set `AuthComponent::$sessionKey = false;` in your AppController's\nbeforeFilter() to prevent CakePHP from sending a session cookie to the client.\n\nSince HTTP Basic Authentication is stateless you don't need a login() action\nin your controller. The user credentials will be checked on each request. If\nvalid credentials are not provided, required authentication headers will be sent\nby this authentication provider which triggers the login dialog in the browser\/client.\n\nYou may also want to use `$this->Auth->unauthorizedRedirect = false;`.\nBy default, unauthorized users are redirected to the referrer URL,\n`AuthComponent::$loginAction`, or '\/'. If unauthorizedRedirect is set to\nfalse, a ForbiddenException exception is thrown instead of redirecting."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"The Component registry used on this request."},"$config":{"type":"array","description":"Array of config to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\ControllerAuthorize":{"class":{"descriptions":{"short":"An authorization adapter for AuthComponent. Provides the ability to authorize\nusing a controller callback. Your controller's isAuthorized() method should\nreturn a boolean to indicate whether or not the user is authorized.","long":"```\npublic function isAuthorized($user)\n{\nif ($this->request->param('admin')) {\nreturn $user['role'] === 'admin';\n}\nreturn !empty($user);\n}\n```\n\nThe above is simple implementation that would only authorize users of the\n'admin' role to access admin routing."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"The controller for this request."},"$config":{"type":"array","description":"An array of config. This class does not use any config."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\DefaultPasswordHasher":{"class":{"descriptions":{"short":"Default password hashing class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Array of config."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\DigestAuthenticate":{"class":{"descriptions":{"short":"Digest Authentication adapter for AuthComponent.","long":"Provides Digest HTTP authentication support for AuthComponent.\n\n### Using Digest auth\n\nIn your controller's components array, add auth + the required config\n```\npublic $components = [\n'Auth' => [\n'authenticate' => ['Digest']\n]\n];\n```\n\nYou should also set `AuthComponent::$sessionKey = false;` in your AppController's\nbeforeFilter() to prevent CakePHP from sending a session cookie to the client.\n\nSince HTTP Digest Authentication is stateless you don't need a login() action\nin your controller. The user credentials will be checked on each request. If\nvalid credentials are not provided, required authentication headers will be sent\nby this authentication provider which triggers the login dialog in the browser\/client.\n\nYou may also want to use `$this->Auth->unauthorizedRedirect = false;`.\nThis causes AuthComponent to throw a ForbiddenException exception instead of\nredirecting to another page.\n\n### Generating passwords compatible with Digest authentication.\n\nDigestAuthenticate requires a special password hash that conforms to RFC2617.\nYou can generate this password using `DigestAuthenticate::password()`\n\n```\n$digestPass = DigestAuthenticate::password($username, $password, env('SERVER_NAME'));\n```\n\nIf you wish to use digest authentication alongside other authentication methods,\nit's recommended that you store the digest authentication separately. For\nexample `User.digest_pass` could be used for a digest password, while\n`User.password` would store the password hash for use with other methods like\nBasic or Form."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"The Component registry used on this request."},"$config":{"type":"array","description":"Array of config to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"Besides the keys specified in BaseAuthenticate::$_defaultConfig,\nDigestAuthenticate uses the following extra keys:\n\n- `realm` The realm authentication is for, Defaults to the servername.\n- `nonce` A nonce used for authentication. Defaults to `uniqid()`.\n- `qop` Defaults to 'auth', no other values are supported at this time.\n- `opaque` A string that must be returned unchanged by clients.\nDefaults to `md5($config['realm'])`"},"deprecated":false}}}},"Cake\\Auth\\FallbackPasswordHasher":{"class":{"descriptions":{"short":"A password hasher that can use multiple different hashes where only\none is the preferred one. This is useful when trying to migrate an\nexisting database of users from one password type to another.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"configuration options for this object. Requires the `hashers` key to be present in the array with a list of other hashers to be used"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\FormAuthenticate":{"class":{"descriptions":{"short":"An authentication adapter for AuthComponent. Provides the ability to authenticate using POST\ndata. Can be used by configuring AuthComponent to use it via the AuthComponent::$authenticate config.","long":"```\n$this->Auth->authenticate = [\n'Form' => [\n'scope' => ['Users.active' => 1]\n]\n]\n```\n\nWhen configuring FormAuthenticate you can pass in config to which fields, model and additional conditions\nare used. See FormAuthenticate::$_config for more information."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"The Component registry used on this request."},"$config":{"type":"array","description":"Array of config to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Auth\\PasswordHasherFactory":{"class":{"descriptions":{"short":"Builds password hashing objects","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Auth\\Storage\\MemoryStorage":{"class":{"descriptions":{"short":"Memory based non-persistent storage for authenticated user record.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Auth\\Storage\\SessionStorage":{"class":{"descriptions":{"short":"Session based persistent storage for authenticated user record.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$request","$response"],"optionals":["$config"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response","description":"Response instance."},"$config":{"type":"array","description":"Configuration list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Auth\\Storage\\StorageInterface":{"class":{"descriptions":{"short":"Describes the methods that any class representing an Auth data storage should\ncomply with.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Auth\\WeakPasswordHasher":{"class":{"descriptions":{"short":"Password hashing class that use weak hashing algorithms. This class is\nintended only to be used with legacy databases where passwords have\nnot been migrated to a stronger algorithm yet.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Array of config."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Cache\\Cache":{"class":{"descriptions":{"short":"Cache provides a consistent interface to Caching in your application. It allows you\nto use several different Cache engines, without coupling your application to a specific\nimplementation. It also allows you to change out cache storage or configuration without effecting\nthe rest of your application.","long":"### Configuring Cache engines\n\nYou can configure Cache engines in your application's `Config\/cache.php` file.\nA sample configuration would be:\n\n```\nCache::config('shared', [\n'className' => 'Cake\\Cache\\Engine\\ApcEngine',\n'prefix' => 'my_app_'\n]);\n```\n\nThis would configure an APC cache engine to the 'shared' alias. You could then read and write\nto that cache alias by using it for the `$config` parameter in the various Cache methods.\n\nIn general all Cache operations are supported by all cache engines.\nHowever, Cache::increment() and Cache::decrement() are not supported by File caching.\n\nThere are 5 built-in caching engines:\n\n- `FileEngine` - Uses simple files to store content. Poor performance, but good for\nstoring large objects, or things that are not IO sensitive.  Well suited to development\nas it is an easy cache to inspect and manually flush.\n- `ApcEngine` - Uses the APC object cache, one of the fastest caching engines.\n- `MemcacheEngine` - Uses the PECL::Memcache extension and Memcached for storage.\nFast reads\/writes, and benefits from memcache being distributed.\n- `XcacheEngine` - Uses the Xcache extension, an alternative to APC.\n- `WincacheEngine` - Uses Windows Cache Extension for PHP. Supports wincache 1.1.0 and higher.\nThis engine is recommended to people deploying on windows with IIS.\n- `RedisEngine` - Uses redis and php-redis extension to store cache data.\n\nSee Cache engine documentation for expected configuration keys."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\CacheEngine":{"class":{"descriptions":{"short":"Storage engine for CakePHP caching","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\CacheRegistry":{"class":{"descriptions":{"short":"An object registry for cache engines.","long":"Used by Cake\\Cache\\Cache to load and manage cache engines."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\Engine\\ApcEngine":{"class":{"descriptions":{"short":"APC storage engine for cache","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\Engine\\FileEngine":{"class":{"descriptions":{"short":"File Storage engine for cache. Filestorage is the slowest cache storage\nto read and write. However, it is good for servers that don't have other storage\nengine available, or have content which is not performance sensitive.","long":"You can configure a FileEngine cache, using Cache::config()"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\Engine\\MemcachedEngine":{"class":{"descriptions":{"short":"Memcached storage engine for cache. Memcached has some limitations in the amount of\ncontrol you have over expire times far in the future. See MemcachedEngine::write() for\nmore information.","long":"Main advantage of this Memcached engine over the memcached engine is\nsupport of binary protocol, and igbinary serialization\n(if memcached extension compiled with --enable-igbinary)\nCompressed keys can also be incremented\/decremented"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\Engine\\NullEngine":{"class":{"descriptions":{"short":"Null cache engine, all operations return false.","long":"This is used internally for when Cache::disable() has been called."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\Engine\\RedisEngine":{"class":{"descriptions":{"short":"Redis storage engine for cache.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\Engine\\WincacheEngine":{"class":{"descriptions":{"short":"Wincache storage engine for cache","long":"Supports wincache 1.1.0 and higher."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Cache\\Engine\\XcacheEngine":{"class":{"descriptions":{"short":"Xcache storage engine for cache","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Collection\\Collection":{"class":{"descriptions":{"short":"A collection is an immutable list of elements with a handful of functions to\niterate, group, transform and extract information from it.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"Items."}},"throws":{"InvalidArgumentException":"If passed incorrect type for items."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. You can provide an array or any traversable object","long":""},"deprecated":false}}}},"Cake\\Collection\\CollectionInterface":{"class":{"descriptions":{"short":"Describes the methods a Collection should implement. A collection is an immutable\nlist of elements exposing a number of traversing and extracting method for\ngenerating other collections.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Collection\\CollectionTrait":{"class":{"descriptions":{"short":"Offers a handful of method to manipulate iterators","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Collection\\ExtractTrait":{"class":{"descriptions":{"short":"Provides utility protected methods for extracting a property or column\nfrom an array or object.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Collection\\Iterator\\BufferedIterator":{"class":{"descriptions":{"short":"Creates an iterator from another iterator that will keep the results of the inner\niterator in memory, so that results don't have to be re-calculated.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"The items to be filtered."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Maintains an in-memory cache of the results yielded by the internal\niterator.","long":""},"deprecated":false}}}},"Cake\\Collection\\Iterator\\ExtractIterator":{"class":{"descriptions":{"short":"Creates an iterator from another iterator that extract the requested column\nor property based on a path","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items","$path"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"The list of values to iterate"},"$path":{"type":"string","description":"a dot separated string symbolizing the path to follow inside the hierarchy of each value so that the column can be extracted."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates the iterator that will return the requested property for each value\nin the collection expressed in $path","long":"### Example:\n\nExtract the user name for all comments in the array:\n\n```\n$items = [\n['comment' => ['body' => 'cool', 'user' => ['name' => 'Mark']],\n['comment' => ['body' => 'very cool', 'user' => ['name' => 'Renan']]\n];\n$extractor = new ExtractIterator($items, 'comment.user.name'');\n```"},"deprecated":false}}}},"Cake\\Collection\\Iterator\\FilterIterator":{"class":{"descriptions":{"short":"Creates a filtered iterator from another iterator. The filtering is done by\npassing a callback function to each of the elements and taking them out if\nit does not return true.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items","$callback"],"optionals":[],"docParameters":{"$items":{"type":"\\Iterator","description":"The items to be filtered."},"$callback":{"type":"callable","description":"Callback."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a filtered iterator using the callback to determine which items are\naccepted or rejected.","long":"Each time the callback is executed it will receive the value of the element\nin the current iteration, the key of the element and the passed $items iterator\nas arguments, in that order."},"deprecated":false}}}},"Cake\\Collection\\Iterator\\InsertIterator":{"class":{"descriptions":{"short":"This iterator will insert values into a property of each of the records returned.\nThe values to be inserted come out of another traversal object. This is useful\nwhen you have two separate collections and want to merge them together by placing\neach of the values from one collection into a property inside the other collection.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$into","$path","$values"],"optionals":[],"docParameters":{"$into":{"type":"array|\\Traversable","description":"The target collection to which the values will be inserted at the specified path."},"$path":{"type":"string","description":"A dot separated list of properties that need to be traversed to insert the value into the target collection."},"$values":{"type":"array|\\Traversable","description":"The source collection from which the values will be inserted at the specified path."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a new collection that will dynamically add properties to it out of\nthe values found in $values.","long":""},"deprecated":false}}}},"Cake\\Collection\\Iterator\\MapReduce":{"class":{"descriptions":{"short":"Implements a simplistic version of the popular Map-Reduce algorithm. Acts\nlike an iterator for the original passed data after each result has been\nprocessed, thus offering a transparent wrapper for results coming from any\nsource.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$data","$mapper"],"optionals":["$reducer"],"docParameters":{"$data":{"type":"\\Traversable","description":"the original data to be processed"},"$mapper":{"type":"callable","description":"the mapper callback. This function will receive 3 arguments. The first one is the current value, second the current results key and third is this class instance so you can call the result emitters."},"$reducer":{"type":"callable","description":"the reducer callback. This function will receive 3 arguments. The first one is the list of values inside a bucket, second one is the name of the bucket that was created during the mapping phase and third one is an instance of this class."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"### Example:\n\nSeparate all unique odd and even numbers in an array\n\n```\n$data = new \\ArrayObject([1, 2, 3, 4, 5, 3]);\n$mapper = function ($value, $key, $mr) {\n$type = ($value % 2 === 0) ? 'even' : 'odd';\n$mr->emitIntermediate($value, $type);\n};\n\n$reducer = function ($numbers, $type, $mr) {\n$mr->emit(array_unique($numbers), $type);\n};\n$results = new MapReduce($data, $mapper, $reducer);\n```\n\nPrevious example will generate the following result:\n\n```\n['odd' => [1, 3, 5], 'even' => [2, 4]]\n```"},"deprecated":false}}}},"Cake\\Collection\\Iterator\\NestIterator":{"class":{"descriptions":{"short":"A type of collection that is aware of nested items and exposes methods to\ncheck or retrieve them","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items","$nestKey"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"Collection items."},"$nestKey":{"type":"string|callable","description":"the property that contains the nested items If a callable is passed, it should return the childrens for the passed item"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Collection\\Iterator\\NoChildrenIterator":{"class":{"descriptions":{"short":"An iterator that can be used as an argument for other iterators that require\na RecursiveIterator but do not want children. This iterator will\nalways behave as having no nested items.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"Items."}},"throws":{"InvalidArgumentException":"If passed incorrect type for items."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. You can provide an array or any traversable object","long":""},"deprecated":false}}}},"Cake\\Collection\\Iterator\\ReplaceIterator":{"class":{"descriptions":{"short":"Creates an iterator from another iterator that will modify each of the values\nby converting them using a callback function.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items","$callback"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"The items to be filtered."},"$callback":{"type":"callable","description":"Callback."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates an iterator from another iterator that will modify each of the values\nby converting them using a callback function.","long":"Each time the callback is executed it will receive the value of the element\nin the current iteration, the key of the element and the passed $items iterator\nas arguments, in that order."},"deprecated":false}}}},"Cake\\Collection\\Iterator\\SortIterator":{"class":{"descriptions":{"short":"An iterator that will return the passed items in order. The order is given by\nthe value returned in a callback function that maps each of the elements.","long":"### Example:\n\n```\n$items = [$user1, $user2, $user3];\n$sorted = new SortIterator($items, function ($user) {\nreturn $user->age;\n});\n\n\/\/ output all user name order by their age in descending order\nforeach ($sorted as $user) {\necho $user->name;\n}\n```\n\nThis iterator does not preserve the keys passed in the original elements."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items","$callback"],"optionals":["$dir","$type"],"docParameters":{"$items":{"type":"array|\\Traversable","description":"The values to sort"},"$callback":{"type":"callable|string","description":"A function used to return the actual value to be compared. It can also be a string representing the path to use to fetch a column or property in each element"},"$dir":{"type":"int","description":"either SORT_DESC or SORT_ASC"},"$type":{"type":"int","description":"the type of comparison to perform, either SORT_STRING SORT_NUMERIC or SORT_NATURAL"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Wraps this iterator around the passed items so when iterated they are returned\nin order.","long":"The callback will receive as first argument each of the elements in $items,\nthe value returned in the callback will be used as the value for sorting such\nelement. Please note that the callback function could be called more than once\nper element."},"deprecated":false}}}},"Cake\\Collection\\Iterator\\StoppableIterator":{"class":{"descriptions":{"short":"Creates an iterator from another iterator that will verify a condition on each\nstep. If the condition evaluates to false, the iterator will not yield more\nresults.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items","$condition"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"The list of values to iterate"},"$condition":{"type":"callable","description":"A function that will be called for each item in the collection, if the result evaluates to false, no more items will be yielded from this iterator."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates an iterator that can be stopped based on a condition provided by a callback.","long":"Each time the condition callback is executed it will receive the value of the element\nin the current iteration, the key of the element and the passed $items iterator\nas arguments, in that order."},"deprecated":false}}}},"Cake\\Collection\\Iterator\\TreeIterator":{"class":{"descriptions":{"short":"A Recursive iterator used to flatten nested structures and also exposes\nall Collection methods","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items"],"optionals":["$mode","$flags"],"docParameters":{"$items":{"type":"RecursiveIterator","description":"The iterator to flatten."},"$mode":{"type":"int","description":"Iterator mode."},"$flags":{"type":"int","description":"Iterator flags."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Collection\\Iterator\\TreePrinter":{"class":{"descriptions":{"short":"Iterator for flattening elements in a tree structure while adding some\nvisual markers for their relative position in the tree","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items","$valuePath","$keyPath","$spacer"],"optionals":["$mode"],"docParameters":{"$items":{"type":"\\RecursiveIterator","description":"The iterator to flatten."},"$valuePath":{"type":"string|callable","description":"The property to extract or a callable to return the display value."},"$keyPath":{"type":"string|callable","description":"The property to use as iteration key or a callable returning the key value."},"$spacer":{"type":"string","description":"The string to use for prefixing the values according to their depth in the tree."},"$mode":{"type":"int","description":"Iterator mode."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Collection\\Iterator\\UnfoldIterator":{"class":{"descriptions":{"short":"An iterator that can be used to generate nested iterators out of a collection\nof items by applying an function to each of the elements in this iterator.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items","$unfolder"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"The list of values to iterate"},"$unfolder":{"type":"callable","description":"A callable function that will receive the current item and key. It must return an array or Traversable object out of which the nested iterators will be yielded."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates the iterator that will generate child iterators from each of the\nelements it was constructed with.","long":""},"deprecated":false}}}},"Cake\\Collection\\Iterator\\ZipIterator":{"class":{"descriptions":{"short":"Creates an iterator that returns elements grouped in pairs","long":"### Example\n\n```\n$iterator = new ZipIterator([[1, 2], [3, 4]]);\n$iterator->toList(); \/\/ Returns [[1, 3], [2, 4]]\n```\n\nYou can also chose a custom function to zip the elements together, such\nas doing a sum by index:\n\n### Example\n\n```\n$iterator = new ZipIterator([[1, 2], [3, 4]], function ($a, $b) {\nreturn $a + $b;\n});\n$iterator->toList(); \/\/ Returns [4, 6]\n```"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$sets"],"optionals":["$callable"],"docParameters":{"$sets":{"type":"array","description":"The list of array or iterators to be zipped."},"$callable":{"type":"callable","description":"The function to use for zipping the elements of each iterator."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates the iterator to merge together the values by for all the passed\niterators by their corresponding index.","long":""},"deprecated":false}}}},"Cake\\Console\\ConsoleErrorHandler":{"class":{"descriptions":{"short":"Error Handler for Cake console. Does simple printing of the\nexception that occurred and the stack trace of the error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"Options for the error handler."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Console\\ConsoleInput":{"class":{"descriptions":{"short":"Object wrapper for interacting with stdin","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$handle"],"docParameters":{"$handle":{"type":"string","description":"The location of the stream to use as input."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Console\\ConsoleInputArgument":{"class":{"descriptions":{"short":"An object to represent a single argument used in the command line.\nConsoleOptionParser creates these when you use addArgument()","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$help","$required","$choices"],"docParameters":{"$name":{"type":"string|array","description":"The long name of the option, or an array with all the properties."},"$help":{"type":"string","description":"The help text for this option"},"$required":{"type":"bool","description":"Whether this argument is required. Missing required args will trigger exceptions"},"$choices":{"type":"array","description":"Valid choices for this option."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Make a new Input Argument","long":""},"deprecated":false}}}},"Cake\\Console\\ConsoleInputOption":{"class":{"descriptions":{"short":"An object to represent a single option used in the command line.\nConsoleOptionParser creates these when you use addOption()","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$short","$help","$boolean","$default","$choices"],"docParameters":{"$name":{"type":"string|array","description":"The long name of the option, or an array with all the properties."},"$short":{"type":"string","description":"The short alias for this option"},"$help":{"type":"string","description":"The help text for this option"},"$boolean":{"type":"bool","description":"Whether this option is a boolean option. Boolean options don't consume extra tokens"},"$default":{"type":"string","description":"The default value for this option."},"$choices":{"type":"array","description":"Valid choices for this option."}},"throws":{"\\Cake\\Console\\Exception\\ConsoleException":""},"return":{"type":"self","description":null},"descriptions":{"short":"Make a new Input Option","long":""},"deprecated":false}}}},"Cake\\Console\\ConsoleInputSubcommand":{"class":{"descriptions":{"short":"An object to represent a single subcommand used in the command line.\nCreated when you call ConsoleOptionParser::addSubcommand()","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$help","$parser"],"docParameters":{"$name":{"type":"string|array","description":"The long name of the subcommand, or an array with all the properties."},"$help":{"type":"string","description":"The help text for this option."},"$parser":{"type":"\\Cake\\Console\\ConsoleOptionParser|array|null","description":"A parser for this subcommand. Either a ConsoleOptionParser, or an array that can be used with ConsoleOptionParser::buildFromArray()."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Make a new Subcommand","long":""},"deprecated":false}}}},"Cake\\Console\\ConsoleIo":{"class":{"descriptions":{"short":"A wrapper around the various IO operations shell tasks need to do.","long":"Packages up the stdout, stderr, and stdin streams providing a simple\nconsistent interface for shells to use. This class also makes mocking streams\neasy to do in unit tests."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$out","$err","$in","$helpers"],"docParameters":{"$out":{"type":"\\Cake\\Console\\ConsoleOutput|null","description":"A ConsoleOutput object for stdout."},"$err":{"type":"\\Cake\\Console\\ConsoleOutput|null","description":"A ConsoleOutput object for stderr."},"$in":{"type":"\\Cake\\Console\\ConsoleInput|null","description":"A ConsoleInput object for stdin."},"$helpers":{"type":"\\Cake\\Console\\HelperRegistry|null","description":"A HelperRegistry instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Console\\ConsoleOptionParser":{"class":{"descriptions":{"short":"Handles parsing the ARGV in the command line and provides support\nfor GetOpt compatible option definition. Provides a builder pattern implementation\nfor creating shell option parsers.","long":"### Options\n\nNamed arguments come in two forms, long and short. Long arguments are preceded\nby two - and give a more verbose option name. i.e. `--version`. Short arguments are\npreceded by one - and are only one character long. They usually match with a long option,\nand provide a more terse alternative.\n\n### Using Options\n\nOptions can be defined with both long and short forms. By using `$parser->addOption()`\nyou can define new options. The name of the option is used as its long form, and you\ncan supply an additional short form, with the `short` option. Short options should\nonly be one letter long. Using more than one letter for a short option will raise an exception.\n\nCalling options can be done using syntax similar to most *nix command line tools. Long options\ncane either include an `=` or leave it out.\n\n`cake myshell command --connection default --name=something`\n\nShort options can be defined singly or in groups.\n\n`cake myshell command -cn`\n\nShort options can be combined into groups as seen above. Each letter in a group\nwill be treated as a separate option. The previous example is equivalent to:\n\n`cake myshell command -c -n`\n\nShort options can also accept values:\n\n`cake myshell command -c default`\n\n### Positional arguments\n\nIf no positional arguments are defined, all of them will be parsed. If you define positional\narguments any arguments greater than those defined will cause exceptions. Additionally you can\ndeclare arguments as optional, by setting the required param to false.\n\n```\n$parser->addArgument('model', ['required' => false]);\n```\n\n### Providing Help text\n\nBy providing help text for your positional arguments and named arguments, the ConsoleOptionParser\ncan generate a help display for you. You can view the help for shells by using the `--help` or `-h` switch."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$command","$defaultOptions"],"docParameters":{"$command":{"type":"string|null","description":"The command name this parser is for. The command name is used for generating help."},"$defaultOptions":{"type":"bool","description":"Whether you want the verbose and quiet options set. Setting this to false will prevent the addition of `--verbose` & `--quiet` options."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct an OptionParser so you can define its behavior","long":""},"deprecated":false}}}},"Cake\\Console\\ConsoleOutput":{"class":{"descriptions":{"short":"Object wrapper for outputting information from a shell application.\nCan be connected to any stream resource that can be used with fopen()","long":"Can generate colorized output on consoles that support it. There are a few\nbuilt in styles\n\n- `error` Error messages.\n- `warning` Warning messages.\n- `info` Informational messages.\n- `comment` Additional text.\n- `question` Magenta text used for user prompts\n\nBy defining styles with addStyle() you can create custom console styles.\n\n### Using styles in output\n\nYou can format console output using tags with the name of the style to apply. From inside a shell object\n\n```\n$this->out('<warning>Overwrite:<\/warning> foo.php was overwritten.');\n```\n\nThis would create orange 'Overwrite:' text, while the rest of the text would remain the normal color.\nSee ConsoleOutput::styles() to learn more about defining your own styles. Nested styles are not supported\nat this time."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$stream"],"docParameters":{"$stream":{"type":"string","description":"The identifier of the stream to write output to."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct the output object.","long":"Checks for a pretty console environment. Ansicon and ConEmu allows\npretty consoles on windows, and is supported."},"deprecated":false}}}},"Cake\\Console\\Exception\\ConsoleException":{"class":{"descriptions":{"short":"Exception class for Console libraries.  This exception will be thrown from Console library\nclasses when they encounter an error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Console\\Exception\\MissingHelperException":{"class":{"descriptions":{"short":"Used when a Helper cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Console\\Exception\\MissingShellException":{"class":{"descriptions":{"short":"Used when a shell cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Console\\Exception\\MissingShellMethodException":{"class":{"descriptions":{"short":"Used when a shell method cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Console\\Exception\\MissingTaskException":{"class":{"descriptions":{"short":"Used when a Task cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Console\\HelpFormatter":{"class":{"descriptions":{"short":"HelpFormatter formats help for console shells. Can format to either\ntext or XML formats. Uses ConsoleOptionParser methods to generate help.","long":"Generally not directly used. Using $parser->help($command, 'xml'); is usually\nhow you would access help. Or via the `--help=xml` option on the command line.\n\nXml output is useful for integration with other tools like IDE's or other build tools."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$parser"],"optionals":[],"docParameters":{"$parser":{"type":"\\Cake\\Console\\ConsoleOptionParser","description":"The option parser help is being generated for."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Build the help formatter for an OptionParser","long":""},"deprecated":false}}}},"Cake\\Console\\Helper":{"class":{"descriptions":{"short":"Base class for Helpers.","long":"Console Helpers allow you to package up reusable blocks\nof Console output logic. For example creating tables,\nprogress bars or ascii art."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$io"],"optionals":["$config"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"The ConsoleIo instance to use."},"$config":{"type":"array","description":"The settings for this helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Console\\HelperRegistry":{"class":{"descriptions":{"short":"Registry for Helpers. Provides features\nfor lazily loading helpers.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Console\\Shell":{"class":{"descriptions":{"short":"Base class for command-line utilities for automating programmer chores.","long":"Is the equivalent of Cake\\Controller\\Controller on the command line."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Console\\ShellDispatcher":{"class":{"descriptions":{"short":"Shell dispatcher handles dispatching cli commands.","long":"Consult \/bin\/cake.php for how this class is used in practice."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$args","$bootstrap"],"docParameters":{"$args":{"type":"array","description":"the argv from PHP"},"$bootstrap":{"type":"bool","description":"Should the environment be bootstrapped."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"The execution of the script is stopped after dispatching the request with\na status code of either 0 or 1 according to the result of the dispatch."},"deprecated":false}}}},"Cake\\Console\\TaskRegistry":{"class":{"descriptions":{"short":"Registry for Tasks. Provides features\nfor lazily loading tasks.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$Shell"],"optionals":[],"docParameters":{"$Shell":{"type":"\\Cake\\Console\\Shell","description":"Shell instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\Component":{"class":{"descriptions":{"short":"Base class for an individual Component. Components provide reusable bits of\ncontroller logic that can be composed into a controller. Components also\nprovide request life-cycle callbacks for injecting logic at specific points.","long":"### Initialize hook\n\nLike Controller and Table, this class has an initialize() hook that you can use\nto add custom 'constructor' logic. It is important to remember that each request\n(and sub-request) will only make one instance of any given component.\n\n### Life cycle callbacks\n\nComponents can provide several callbacks that are fired at various stages of the request\ncycle. The available callbacks are:\n\n- `beforeFilter(Event $event)`\nCalled before the controller's beforeFilter method by default.\n- `startup(Event $event)`\nCalled after the controller's beforeFilter method, and before the\ncontroller action is called.\n- `beforeRender(Event $event)`\nCalled before the Controller beforeRender, and before the view class is loaded.\n- `shutdown(Event $event)`\nCalled after the action is complete and the view has been rendered but\nbefore Controller::afterFilter().\n- `beforeRedirect(Event $event $url, Response $response)`\nCalled before a redirect is done. Allows you to change the URL that will\nbe redirected to by returning a Response instance with new URL set using\nResponse::location(). Redirection can be prevented by stopping the event\npropagation.\n\nWhile the controller is not an explicit argument for the callback methods it\nis the subject of each event and can be fetched using Event::subject()."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"A ComponentRegistry this component can use to lazy load its components"},"$config":{"type":"array","description":"Array of configuration settings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\ComponentRegistry":{"class":{"descriptions":{"short":"ComponentRegistry is a registry for loaded components","long":"Handles loading, constructing and binding events for component class objects."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$controller"],"docParameters":{"$controller":{"type":"\\Cake\\Controller\\Controller","description":"Controller instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Controller\\Component\\AuthComponent":{"class":{"descriptions":{"short":"Authentication control component class.","long":"Binds access control with user authentication and session management."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"A ComponentRegistry this component can use to lazy load its components"},"$config":{"type":"array","description":"Array of configuration settings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\Component\\CookieComponent":{"class":{"descriptions":{"short":"Cookie Component.","long":"Provides enhanced cookie handling features for use in the controller layer.\nIn addition to the basic features offered be Cake\\Network\\Response, this class lets you:\n\n- Create and read encrypted cookies.\n- Store non-scalar data.\n- Use hash compatible syntax to read\/write\/delete values."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"A ComponentRegistry this component can use to lazy load its components"},"$config":{"type":"array","description":"Array of configuration settings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\Component\\CsrfComponent":{"class":{"descriptions":{"short":"Provides CSRF protection & validation.","long":"This component adds a CSRF token to a cookie. The cookie value is compared to\nrequest data, or the X-CSRF-Token header on each PATCH, POST,\nPUT, or DELETE request.\n\nIf the request data is missing or does not match the cookie data,\nan InvalidCsrfTokenException will be raised.\n\nThis component integrates with the FormHelper automatically and when\nused together your forms will have CSRF tokens automatically added\nwhen `$this->Form->create(...)` is used in a view."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"A ComponentRegistry this component can use to lazy load its components"},"$config":{"type":"array","description":"Array of configuration settings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\Component\\FlashComponent":{"class":{"descriptions":{"short":"The CakePHP FlashComponent provides a way for you to write a flash variable\nto the session from your controllers, to be rendered in a view with the\nFlashHelper.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"A ComponentRegistry for this component"},"$config":{"type":"array","description":"Array of config."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\Component\\PaginatorComponent":{"class":{"descriptions":{"short":"This component is used to handle automatic model data pagination. The primary way to use this\ncomponent is to call the paginate() method. There is a convenience wrapper on Controller as well.","long":"### Configuring pagination\n\nYou configure pagination when calling paginate(). See that method for more details."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"A ComponentRegistry this component can use to lazy load its components"},"$config":{"type":"array","description":"Array of configuration settings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\Component\\RequestHandlerComponent":{"class":{"descriptions":{"short":"Request object for handling alternative HTTP requests","long":"Alternative HTTP requests can come from wireless units like mobile phones, palmtop computers,\nand the like. These units have no use for AJAX requests, and this Component can tell how Cake\nshould respond to the different needs of a handheld computer and a desktop machine."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"ComponentRegistry object."},"$config":{"type":"array","description":"Array of config."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Parses the accepted content types accepted by the client using HTTP_ACCEPT","long":""},"deprecated":false}}}},"Cake\\Controller\\Component\\SecurityComponent":{"class":{"descriptions":{"short":"The Security Component creates an easy way to integrate tighter security in\nyour application. It provides methods for various tasks like:","long":"- Restricting which HTTP methods your application accepts.\n- Form tampering protection\n- Requiring that SSL be used.\n- Limiting cross controller communication."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$config"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"A ComponentRegistry this component can use to lazy load its components"},"$config":{"type":"array","description":"Array of configuration settings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\Controller":{"class":{"descriptions":{"short":"Application controller class for organization of business logic.\nProvides basic functionality, such as rendering views inside layouts,\nautomatic model availability, redirection, callbacks, and more.","long":"Controllers should provide a number of 'action' methods. These are public\nmethods on a controller that are not inherited from `Controller`.\nEach action serves as an endpoint for performing a specific action on a\nresource or collection of resources. For example adding or editing a new\nobject, or listing a set of objects.\n\nYou can access request parameters, using `$this->request`. The request object\ncontains all the POST, GET and FILES that were part of the request.\n\nAfter performing the required action, controllers are responsible for\ncreating a response. This usually takes the form of a generated `View`, or\npossibly a redirection to another URL. In either case `$this->response`\nallows you to manipulate all aspects of the response.\n\nControllers are created by `Dispatcher` based on request parameters and\nrouting. By default controllers and actions use conventional names.\nFor example `\/posts\/index` maps to `PostsController::index()`. You can re-map\nURLs using Router::connect() or RouterBuilder::connect().\n\n### Life cycle callbacks\n\nCakePHP fires a number of life cycle callbacks during each request.\nBy implementing a method you can receive the related events. The available\ncallbacks are:\n\n- `beforeFilter(Event $event)`\nCalled before each action. This is a good place to do general logic that\napplies to all actions.\n- `beforeRender(Event $event)`\nCalled before the view is rendered.\n- `beforeRedirect(Event $event, $url, Response $response)`\nCalled before a redirect is done.\n- `afterFilter(Event $event)`\nCalled after each action is complete and after the view is rendered."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$name","$eventManager","$components"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request object for this controller. Can be null for testing, but expect that features that use the request parameters will not work."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response object for this controller."},"$name":{"type":"string|null","description":"Override the name useful in testing when using mocks."},"$eventManager":{"type":"\\Cake\\Event\\EventManager|null","description":"The event manager. Defaults to a new instance."},"$components":{"type":"\\Cake\\Controller\\ComponentRegistry|null","description":"The component registry. Defaults to a new instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Sets a number of properties based on conventions if they are empty. To override the\nconventions CakePHP uses you can define properties in your class declaration."},"deprecated":false}}}},"Cake\\Controller\\ErrorController":{"class":{"descriptions":{"short":"Error Handling Controller","long":"Controller used by ErrorHandler to render error views."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Controller\\Exception\\MissingActionException":{"class":{"descriptions":{"short":"Missing Action exception - used when a controller action\ncannot be found, or when the controller's isAction() method returns false.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Controller\\Exception\\MissingComponentException":{"class":{"descriptions":{"short":"Used when a component cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Core\\App":{"class":{"descriptions":{"short":"App is responsible for resource location, and path management.","long":"### Adding paths\n\nAdditional paths for Templates and Plugins are configured with Configure now. See config\/app.php for an\nexample. The `App.paths.plugins` and `App.paths.templates` variables are used to configure paths for plugins\nand templates respectively. All class based resources should be mapped using your application's autoloader.\n\n### Inspecting loaded paths\n\nYou can inspect the currently loaded paths using `App::path('Controller')` for example to see loaded\ncontroller paths.\n\nIt is also possible to inspect paths for plugin classes, for instance, to get\nthe path to a plugin's helpers you would call `App::path('View\/Helper', 'MyPlugin')`\n\n### Locating plugins\n\nPlugins can be located with App as well. Using Plugin::path('DebugKit') for example, will\ngive you the full path to the DebugKit plugin."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\ClassLoader":{"class":{"descriptions":{"short":"ClassLoader","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\Configure":{"class":{"descriptions":{"short":"Configuration class. Used for managing runtime configuration information.","long":"Provides features for reading and writing to the runtime configuration, as well\nas methods for loading additional configuration files or storing runtime configuration\nfor future use."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\Configure\\ConfigEngineInterface":{"class":{"descriptions":{"short":"An interface for creating objects compatible with Configure::load()","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\Configure\\Engine\\IniConfig":{"class":{"descriptions":{"short":"Ini file configuration engine.","long":"Since IniConfig uses parse_ini_file underneath, you should be aware that this\nclass shares the same behavior, especially with regards to boolean and null values.\n\nIn addition to the native `parse_ini_file` features, IniConfig also allows you\nto create nested array structures through usage of `.` delimited names. This allows\nyou to create nested arrays structures in an ini config file. For example:\n\n`db.password = secret` would turn into `['db' => ['password' => 'secret']]`\n\nYou can nest properties as deeply as needed using `.`'s. In addition to using `.` you\ncan use standard ini section notation to create nested structures:\n\n```\n[section]\nkey = value\n```\n\nOnce loaded into Configure, the above would be accessed using:\n\n`Configure::read('section.key');\n\nYou can combine `.` separated values with sections to create more deeply\nnested structures.\n\nIniConfig also manipulates how the special ini values of\n'yes', 'no', 'on', 'off', 'null' are handled. These values will be\nconverted to their boolean equivalents."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$path","$section"],"docParameters":{"$path":{"type":"string|null","description":"Path to load ini config files from. Defaults to CONFIG."},"$section":{"type":"string|null","description":"Only get one section, leave null to parse and fetch all sections in the ini file."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Build and construct a new ini file parser. The parser can be used to read\nini files that are on the filesystem.","long":""},"deprecated":false}}}},"Cake\\Core\\Configure\\Engine\\JsonConfig":{"class":{"descriptions":{"short":"JSON engine allows Configure to load configuration values from\nfiles containing JSON strings.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$path"],"docParameters":{"$path":{"type":"string|null","description":"The path to read config files from. Defaults to CONFIG."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor for JSON Config file reading.","long":""},"deprecated":false}}}},"Cake\\Core\\Configure\\Engine\\PhpConfig":{"class":{"descriptions":{"short":"PHP engine allows Configure to load configuration values from\nfiles containing simple PHP arrays.","long":"Files compatible with PhpConfig should return an array that\ncontains all of the configuration data contained in the file."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$path"],"docParameters":{"$path":{"type":"string|null","description":"The path to read config files from. Defaults to CONFIG."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor for PHP Config file reading.","long":""},"deprecated":false}}}},"Cake\\Core\\Configure\\FileConfigTrait":{"class":{"descriptions":{"short":"Trait providing utility methods for file based config engines.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\ConventionsTrait":{"class":{"descriptions":{"short":"Provides methods that allow other classes access to conventions based inflections.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\Exception\\Exception":{"class":{"descriptions":{"short":"Base class that all CakePHP Exceptions extend.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Core\\Exception\\MissingPluginException":{"class":{"descriptions":{"short":"Exception raised when a plugin could not be found","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Core\\InstanceConfigTrait":{"class":{"descriptions":{"short":"A trait for reading and writing instance config","long":"Implementing objects are expected to declare a `$_defaultConfig` property."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\ObjectRegistry":{"class":{"descriptions":{"short":"Acts as a registry\/factory for objects.","long":"Provides registry & factory functionality for object types. Used\nas a super class for various composition based re-use features in CakePHP.\n\nEach subclass needs to implement the various abstract methods to complete\nthe template method load().\n\nThe ObjectRegistry is EventManager aware, but each extending class will need to use\n\\Cake\\Event\\EventDispatcherTrait to attach and detach on set and bind"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\Plugin":{"class":{"descriptions":{"short":"Plugin is used to load and locate plugins.","long":"It also can retrieve plugin paths and load their bootstrap and routes files."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Core\\StaticConfigTrait":{"class":{"descriptions":{"short":"A trait that provides a set of static methods to manage configuration\nfor classes that provide an adapter facade or need to have sets of\nconfiguration data registered and manipulated.","long":"Implementing objects are expected to declare a static `$_dsnClassMap` property."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Connection":{"class":{"descriptions":{"short":"Represents a connection with a database server.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$config"],"optionals":[],"docParameters":{"$config":{"type":"array","description":"configuration for connecting to database"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Database\\Dialect\\MysqlDialectTrait":{"class":{"descriptions":{"short":"Contains functions that encapsulates the SQL dialect used by MySQL,\nincluding query translators and schema introspection.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Dialect\\PostgresDialectTrait":{"class":{"descriptions":{"short":"Contains functions that encapsulates the SQL dialect used by Postgres,\nincluding query translators and schema introspection.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Dialect\\SqliteDialectTrait":{"class":{"descriptions":{"short":"SQLite dialect trait","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Dialect\\SqlserverDialectTrait":{"class":{"descriptions":{"short":"Contains functions that encapsulates the SQL dialect used by SQLServer,\nincluding query translators and schema introspection.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Dialect\\TupleComparisonTranslatorTrait":{"class":{"descriptions":{"short":"Provides a translator method for tuple comparisons","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Driver":{"class":{"descriptions":{"short":"Represents a database diver containing all specificities for\na database engine including its SQL dialect","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"The configuration for the driver."}},"throws":{"InvalidArgumentException":""},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Driver\\Mysql":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"The configuration for the driver."}},"throws":{"InvalidArgumentException":""},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Driver\\PDODriverTrait":{"class":{"descriptions":{"short":"PDO driver trait","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Driver\\Postgres":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"The configuration for the driver."}},"throws":{"InvalidArgumentException":""},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Driver\\Sqlite":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"The configuration for the driver."}},"throws":{"InvalidArgumentException":""},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Driver\\Sqlserver":{"class":{"descriptions":{"short":"SQLServer driver.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"The configuration for the driver."}},"throws":{"InvalidArgumentException":""},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Exception":{"class":{"descriptions":{"short":"Exception for the database package.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Database\\Exception\\MissingConnectionException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Database\\Exception\\MissingDriverException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Database\\Exception\\MissingExtensionException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Database\\ExpressionInterface":{"class":{"descriptions":{"short":"An interface used by Expression objects.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Expression\\BetweenExpression":{"class":{"descriptions":{"short":"An expression object that represents a SQL BETWEEN snippet","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$field","$from","$to"],"optionals":["$type"],"docParameters":{"$field":{"type":"mixed","description":"The field name to compare for values in between the range."},"$from":{"type":"mixed","description":"The initial value of the range."},"$to":{"type":"mixed","description":"The ending value in the comparison range."},"$type":{"type":"string","description":"The data type name to bind the values with."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\CaseExpression":{"class":{"descriptions":{"short":"This class represents a SQL Case statement","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$conditions","$values","$types"],"docParameters":{"$conditions":{"type":"array|ExpressionInterface","description":"The conditions to test. Must be a ExpressionInterface instance, or an array of ExpressionInterface instances."},"$values":{"type":"array|ExpressionInterface","description":"associative array of values to be associated with the conditions passed in $conditions. If there are more $values than $conditions, the last $value is used as the `ELSE` value"},"$types":{"type":"array","description":"associative array of types to be associated with the values passed in $values"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs the case expression","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\Comparison":{"class":{"descriptions":{"short":"A Comparison is a type of query expression that represents an operation\ninvolving a field an operator and a value. In its most common form the\nstring representation of a comparison is `field = value`","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$field","$value","$type","$operator"],"optionals":[],"docParameters":{"$field":{"type":"string","description":"the field name to compare to a value"},"$value":{"type":"mixed","description":"The value to be used in comparison"},"$type":{"type":"string","description":"the type name used to cast the value"},"$operator":{"type":"string","description":"the operator used for comparing field and value"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\FieldInterface":{"class":{"descriptions":{"short":"Describes a getter and a setter for the a field property. Useful for expressions\nthat contain an identifier to compare against.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Expression\\FieldTrait":{"class":{"descriptions":{"short":"Contains the field property with a getter and a setter for it","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Expression\\FunctionExpression":{"class":{"descriptions":{"short":"This class represents a function call string in a SQL statement. Calls can be\nconstructed by passing the name of the function and a list of params.\nFor security reasons, all params passed are quoted by default unless\nexplicitly told otherwise.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$params","$types"],"docParameters":{"$name":{"type":"string","description":"the name of the function to be constructed"},"$params":{"type":"array","description":"list of arguments to be passed to the function If associative the key would be used as argument when value is 'literal'"},"$types":{"type":"array","description":"associative array of types to be associated with the passed arguments"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Takes a name for the function to be invoked and a list of params\nto be passed into the function. Optionally you can pass a list of types to\nbe used for each bound param.","long":"By default, all params that are passed will be quoted. If you wish to use\nliteral arguments, you need to explicitly hint this function.\n\n### Examples:\n\n`$f = new FunctionExpression('CONCAT', ['CakePHP', ' rules']);`\n\nPrevious line will generate `CONCAT('CakePHP', ' rules')`\n\n`$f = new FunctionExpression('CONCAT', ['name' => 'literal', ' rules']);`\n\nWill produce `CONCAT(name, ' rules')`"},"deprecated":false}}}},"Cake\\Database\\Expression\\IdentifierExpression":{"class":{"descriptions":{"short":"Represents a single identifier name in the database","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$identifier"],"optionals":[],"docParameters":{"$identifier":{"type":"string","description":"The identifier this expression represents"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\OrderByExpression":{"class":{"descriptions":{"short":"An expression object for ORDER BY clauses","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$conditions","$types","$conjunction"],"docParameters":{"$conditions":{"type":"array","description":"The sort columns"},"$types":{"type":"array","description":"The types for each column."},"$conjunction":{"type":"string","description":"The glue used to join conditions together."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\OrderClauseExpression":{"class":{"descriptions":{"short":"An expression object for complex ORDER BY clauses","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$field","$direction"],"optionals":[],"docParameters":{"$field":{"type":"\\Cake\\Database\\ExpressionInterface|string","description":"The field to order on."},"$direction":{"type":"string","description":"The direction to sort on."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\QueryExpression":{"class":{"descriptions":{"short":"Represents a SQL Query expression. Internally it stores a tree of\nexpressions that can be compiled by converting this object to string\nand will contain a correctly parenthesized and nested expression.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$conditions","$types","$conjunction"],"docParameters":{"$conditions":{"type":"string|array|QueryExpression","description":"tree-like array structure containing all the conditions to be added or nested inside this expression object."},"$types":{"type":"array|\\Cake\\Database\\TypeMap","description":"associative array of types to be associated with the values passed in $conditions."},"$conjunction":{"type":"string","description":"the glue that will join all the string conditions at this level of the expression tree. For example \"AND\", \"OR\", \"XOR\"..."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. A new expression object can be created without any params and\nbe built dynamically. Otherwise it is possible to pass an array of conditions\ncontaining either a tree-like array structure to be parsed and\/or other\nexpression objects. Optionally, you can set the conjunction keyword to be used\nfor joining each part of this level of the expression tree.","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\TupleComparison":{"class":{"descriptions":{"short":"This expression represents SQL fragments that are used for comparing one tuple\nto another, one tuple to a set of other tuples or one tuple to an expression","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$fields","$values"],"optionals":["$types","$conjunction"],"docParameters":{"$fields":{"type":"string|array","description":"the fields to use to form a tuple"},"$values":{"type":"array|ExpressionInterface","description":"the values to use to form a tuple"},"$types":{"type":"array","description":"the types names to use for casting each of the values, only one type per position in the value array in needed"},"$conjunction":{"type":"string","description":"the operator used for comparing field and value"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\UnaryExpression":{"class":{"descriptions":{"short":"An expression object that represents an expression with only a single operand.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$operator","$value"],"optionals":["$mode"],"docParameters":{"$operator":{"type":"string","description":"The operator to used for the expression"},"$value":{"type":"mixed","description":"the value to use as the operand for the expression"},"$mode":{"type":"int","description":"either UnaryExpression::PREFIX or UnaryExpression::POSTFIX"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Expression\\ValuesExpression":{"class":{"descriptions":{"short":"An expression object to contain values being inserted.","long":"Helps generate SQL with the correct number of placeholders and bind\nvalues correctly into the statement."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$columns","$typeMap"],"optionals":[],"docParameters":{"$columns":{"type":"array","description":"The list of columns that are going to be part of the values."},"$typeMap":{"type":"\\Cake\\Database\\TypeMap","description":"A dictionary of column -> type names"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\FunctionsBuilder":{"class":{"descriptions":{"short":"Contains methods related to generating FunctionExpression objects\nwith most commonly used SQL functions.\nThis acts as a factory for FunctionExpression objects.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\IdentifierQuoter":{"class":{"descriptions":{"short":"Contains all the logic related to quoting identifiers in a Query object","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$driver"],"optionals":[],"docParameters":{"$driver":{"type":"\\Cake\\Database\\Driver","description":"The driver instance used to do the identifier quoting"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Log\\LoggedQuery":{"class":{"descriptions":{"short":"Contains a query string, the params used to executed it, time taken to do it\nand the number of rows found or affected by its execution.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Log\\LoggingStatement":{"class":{"descriptions":{"short":"Statement decorator used to","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$statement","$driver"],"docParameters":{"$statement":{"type":"\\Cake\\Database\\StatementInterface|null","description":"Statement implementation such as PDOStatement"},"$driver":{"type":"\\Cake\\Database\\Driver|null","description":"Driver instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Log\\QueryLogger":{"class":{"descriptions":{"short":"This class is a bridge used to write LoggedQuery objects into a real log.\nby default this class use the built-in CakePHP Log class to accomplish this","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Query":{"class":{"descriptions":{"short":"This class represents a Relational database SQL Query. A query can be of\ndifferent types like select, update, insert and delete. Exposes the methods\nfor dynamically constructing each query part, execute it and transform it\nto a specific SQL dialect.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$connection"],"optionals":[],"docParameters":{"$connection":{"type":"\\Cake\\Datasource\\ConnectionInterface","description":"The connection object to be used for transforming and executing this query"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Database\\QueryCompiler":{"class":{"descriptions":{"short":"Responsible for compiling a Query object into its SQL representation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Schema\\BaseSchema":{"class":{"descriptions":{"short":"Base class for schema implementations.","long":"This class contains methods that are common across\nthe various SQL dialects."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$driver"],"optionals":[],"docParameters":{"$driver":{"type":"\\Cake\\Database\\Driver","description":"The driver to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"This constructor will connect the driver so that methods like columnSql() and others\nwill fail when the driver has not been connected."},"deprecated":false}}}},"Cake\\Database\\Schema\\CachedCollection":{"class":{"descriptions":{"short":"Extends the schema collection class to provide caching","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$connection"],"optionals":["$cacheKey"],"docParameters":{"$connection":{"type":"\\Cake\\Datasource\\ConnectionInterface","description":"The connection instance."},"$cacheKey":{"type":"string|bool","description":"The cache key or boolean false to disable caching."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Database\\Schema\\Collection":{"class":{"descriptions":{"short":"Represents a database schema collection","long":"Used to access information about the tables,\nand other data in a database."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$connection"],"optionals":[],"docParameters":{"$connection":{"type":"\\Cake\\Datasource\\ConnectionInterface","description":"The connection instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Database\\Schema\\MysqlSchema":{"class":{"descriptions":{"short":"Schema generation\/reflection features for MySQL","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$driver"],"optionals":[],"docParameters":{"$driver":{"type":"\\Cake\\Database\\Driver","description":"The driver to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"This constructor will connect the driver so that methods like columnSql() and others\nwill fail when the driver has not been connected."},"deprecated":false}}}},"Cake\\Database\\Schema\\PostgresSchema":{"class":{"descriptions":{"short":"Schema management\/reflection features for Postgres.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$driver"],"optionals":[],"docParameters":{"$driver":{"type":"\\Cake\\Database\\Driver","description":"The driver to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"This constructor will connect the driver so that methods like columnSql() and others\nwill fail when the driver has not been connected."},"deprecated":false}}}},"Cake\\Database\\Schema\\SqliteSchema":{"class":{"descriptions":{"short":"Schema management\/reflection features for Sqlite","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$driver"],"optionals":[],"docParameters":{"$driver":{"type":"\\Cake\\Database\\Driver","description":"The driver to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"This constructor will connect the driver so that methods like columnSql() and others\nwill fail when the driver has not been connected."},"deprecated":false}}}},"Cake\\Database\\Schema\\SqlserverSchema":{"class":{"descriptions":{"short":"Schema management\/reflection features for SQLServer.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$driver"],"optionals":[],"docParameters":{"$driver":{"type":"\\Cake\\Database\\Driver","description":"The driver to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"This constructor will connect the driver so that methods like columnSql() and others\nwill fail when the driver has not been connected."},"deprecated":false}}}},"Cake\\Database\\Schema\\Table":{"class":{"descriptions":{"short":"Represents a single table in a database schema.","long":"Can either be populated using the reflection API's\nor by incrementally building an instance using\nmethods.\n\nOnce created Table instances can be added to\nSchema\\Collection objects. They can also be converted into SQL using the\ncreateSql(), dropSql() and truncateSql() methods."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$table"],"optionals":["$columns"],"docParameters":{"$table":{"type":"string","description":"The table name."},"$columns":{"type":"array","description":"The list of columns for the schema."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Database\\SqlDialectTrait":{"class":{"descriptions":{"short":"Sql dialect trait","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\SqliteCompiler":{"class":{"descriptions":{"short":"Responsible for compiling a Query object into its SQL representation\nfor SQLite","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\SqlserverCompiler":{"class":{"descriptions":{"short":"Responsible for compiling a Query object into its SQL representation\nfor SQL Server","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\StatementInterface":{"class":{"descriptions":{"short":"Represents a database statement. Concrete implementations\ncan either use PDOStatement or a native driver","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Statement\\BufferResultsTrait":{"class":{"descriptions":{"short":"Contains a setter for marking a Statement as buffered","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Statement\\BufferedStatement":{"class":{"descriptions":{"short":"A statement decorator that implements buffered results.","long":"This statement decorator will save fetched results in memory, allowing\nthe iterator to be rewound and reused."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$statement","$driver"],"docParameters":{"$statement":{"type":"\\Cake\\Database\\StatementInterface|null","description":"Statement implementation such as PDOStatement"},"$driver":{"type":"\\Cake\\Database\\Driver|null","description":"Driver instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Statement\\CallbackStatement":{"class":{"descriptions":{"short":"Wraps a statement in a callback that allows row results\nto be modified when being fetched.","long":"This is used by CakePHP to eagerly load association data."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$statement","$driver","$callback"],"optionals":[],"docParameters":{"$statement":{"type":"\\Cake\\Database\\StatementInterface","description":"The statement to decorate."},"$driver":{"type":"\\Cake\\Database\\Driver","description":"The driver instance used by the statement."},"$callback":{"type":"callable","description":"The callback to apply to results before they are returned."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Statement\\MysqlStatement":{"class":{"descriptions":{"short":"Statement class meant to be used by a Mysql PDO driver","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$statement","$driver"],"docParameters":{"$statement":{"type":"\\PDOStatement|null","description":"Original statement to be decorated."},"$driver":{"type":"\\Cake\\Database\\Driver|null","description":"Driver instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Statement\\PDOStatement":{"class":{"descriptions":{"short":"Decorator for \\PDOStatement class mainly used for converting human readable\nfetch modes into PDO constants.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$statement","$driver"],"docParameters":{"$statement":{"type":"\\PDOStatement|null","description":"Original statement to be decorated."},"$driver":{"type":"\\Cake\\Database\\Driver|null","description":"Driver instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Statement\\SqliteStatement":{"class":{"descriptions":{"short":"Statement class meant to be used by an Sqlite driver","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$statement","$driver"],"docParameters":{"$statement":{"type":"\\Cake\\Database\\StatementInterface|null","description":"Statement implementation such as PDOStatement"},"$driver":{"type":"\\Cake\\Database\\Driver|null","description":"Driver instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Statement\\SqlserverStatement":{"class":{"descriptions":{"short":"Statement class meant to be used by an Sqlserver driver","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$statement","$driver"],"docParameters":{"$statement":{"type":"\\PDOStatement|null","description":"Original statement to be decorated."},"$driver":{"type":"\\Cake\\Database\\Driver|null","description":"Driver instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Statement\\StatementDecorator":{"class":{"descriptions":{"short":"Represents a database statement. Statements contains queries that can be\nexecuted multiple times by binding different values on each call. This class\nalso helps convert values to their valid representation for the corresponding\ntypes.","long":"This class is but a decorator of an actual statement implementation, such as\nPDOStatement."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$statement","$driver"],"docParameters":{"$statement":{"type":"\\Cake\\Database\\StatementInterface|null","description":"Statement implementation such as PDOStatement"},"$driver":{"type":"\\Cake\\Database\\Driver|null","description":"Driver instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type":{"class":{"descriptions":{"short":"Encapsulates all conversion functions for values coming from database into PHP and\ngoing from PHP into database.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\TypeConverterTrait":{"class":{"descriptions":{"short":"Type converter trait","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\TypeMap":{"class":{"descriptions":{"short":"Implements default and single-use mappings for columns to their associated types","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$defaults"],"docParameters":{"$defaults":{"type":"array","description":"The defaults to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates an instance with the given defaults","long":""},"deprecated":false}}}},"Cake\\Database\\TypeMapTrait":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Database\\Type\\BinaryType":{"class":{"descriptions":{"short":"Binary type converter.","long":"Use to convert binary data between PHP and the database types."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type\\BoolType":{"class":{"descriptions":{"short":"Bool type converter.","long":"Use to convert bool data between PHP and the database types."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type\\DateTimeType":{"class":{"descriptions":{"short":"Datetime type converter.","long":"Use to convert datetime instances to strings & back."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type\\DateType":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type\\FloatType":{"class":{"descriptions":{"short":"Float type converter.","long":"Use to convert float\/decimal data between PHP and the database types."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type\\IntegerType":{"class":{"descriptions":{"short":"Integer type converter.","long":"Use to convert integer data between PHP and the database types."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type\\StringType":{"class":{"descriptions":{"short":"String type converter.","long":"Use to convert string data between PHP and the database types."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type\\TimeType":{"class":{"descriptions":{"short":"Time type converter.","long":"Use to convert time instances to strings & back."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\Type\\UuidType":{"class":{"descriptions":{"short":"Provides behavior for the UUID type","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string","description":"The name identifying this type"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Database\\ValueBinder":{"class":{"descriptions":{"short":"Value binder class manages list of values bound to conditions.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\ConnectionInterface":{"class":{"descriptions":{"short":"This interface defines the methods you can depend on in\na connection.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\ConnectionManager":{"class":{"descriptions":{"short":"Manages and loads instances of Connection","long":"Provides an interface to loading and creating connection objects. Acts as\na registry for the connections defined in an application.\n\nProvides an interface for loading and enumerating connections defined in\nconfig\/app.php"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\ConnectionRegistry":{"class":{"descriptions":{"short":"A registry object for connection instances.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\EntityInterface":{"class":{"descriptions":{"short":"Describes the methods that any class representing a data storage should\ncomply with.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\EntityTrait":{"class":{"descriptions":{"short":"An entity represents a single result row from a repository. It exposes the\nmethods for retrieving and storing properties associated in this row.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\Exception\\InvalidPrimaryKeyException":{"class":{"descriptions":{"short":"Exception raised when a particular record was not found","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string","description":"The error message"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception|null","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Datasource\\Exception\\MissingDatasourceConfigException":{"class":{"descriptions":{"short":"Exception class to be thrown when a datasource configuration is not found","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Datasource\\Exception\\MissingDatasourceException":{"class":{"descriptions":{"short":"Used when a datasource cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Datasource\\Exception\\MissingModelException":{"class":{"descriptions":{"short":"Used when a model cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Datasource\\Exception\\RecordNotFoundException":{"class":{"descriptions":{"short":"Exception raised when a particular record was not found","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string","description":"The error message"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception|null","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Datasource\\FixtureInterface":{"class":{"descriptions":{"short":"Defines the interface that testing fixtures use.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\ModelAwareTrait":{"class":{"descriptions":{"short":"Provides functionality for loading table classes\nand other repositories onto properties of the host object.","long":"Example users of this trait are Cake\\Controller\\Controller and\nCake\\Console\\Shell."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\QueryCacher":{"class":{"descriptions":{"short":"Handles caching queries and loading results from the cache.","long":"Used by Cake\\Datasource\\QueryTrait internally."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$key","$config"],"optionals":[],"docParameters":{"$key":{"type":"string|\\Closure","description":"The key or function to generate a key."},"$config":{"type":"string|CacheEngine","description":"The cache config name or cache engine instance."}},"throws":{"\\RuntimeException":""},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Datasource\\QueryInterface":{"class":{"descriptions":{"short":"The basis for every query object","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\QueryTrait":{"class":{"descriptions":{"short":"Contains the characteristics for an object that is attached to a repository and\ncan retrieve results based on any criteria.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\RepositoryInterface":{"class":{"descriptions":{"short":"Describes the methods that any class representing a data storage should\ncomply with.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\ResultSetDecorator":{"class":{"descriptions":{"short":"Generic ResultSet decorator. This will make any traversable object appear to\nbe a database result","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$items"],"optionals":[],"docParameters":{"$items":{"type":"array|\\Traversable","description":"Items."}},"throws":{"InvalidArgumentException":"If passed incorrect type for items."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. You can provide an array or any traversable object","long":""},"deprecated":false}}}},"Cake\\Datasource\\ResultSetInterface":{"class":{"descriptions":{"short":"Describes how a collection of datasource results should look like","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\RulesAwareTrait":{"class":{"descriptions":{"short":"A trait that allows a class to build and apply application.\nrules.","long":"If the implementing class also implements EventAwareTrait, then\nevents will be emitted when rules are checked.\n\nThe implementing class is expected to define the `RULES_CLASS` constant\nif they need to customize which class is used for rules objects."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Datasource\\RulesChecker":{"class":{"descriptions":{"short":"Contains logic for storing and checking rules on entities","long":"RulesCheckers are used by Table classes to ensure that the\ncurrent entity state satisfies the application logic and business rules.\n\nRulesCheckers afford different rules to be applied in the create and update\nscenario.\n\n### Adding rules\n\nRules must be callable objects that return true\/false depending on whether or\nnot the rule has been satisfied. You can use RulesChecker::add(), RulesChecker::addCreate(),\nRulesChecker::addUpdate() and RulesChecker::addDelete to add rules to a checker.\n\n### Running checks\n\nGenerally a Table object will invoke the rules objects, but you can manually\ninvoke the checks by calling RulesChecker::checkCreate(), RulesChecker::checkUpdate() or\nRulesChecker::checkDelete()."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"The options to pass to every rule"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Takes the options to be passed to all rules.","long":""},"deprecated":false}}}},"Cake\\Error\\BaseErrorHandler":{"class":{"descriptions":{"short":"Base error handler that provides logic common to the CLI + web\nerror\/exception handlers.","long":"Subclasses are required to implement the template methods to handle displaying\nthe errors in their environment."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Error\\Debugger":{"class":{"descriptions":{"short":"Provide custom logging and error handling.","long":"Debugger overrides PHP's default error handling to provide stack traces and enhanced logging"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Error\\ErrorHandler":{"class":{"descriptions":{"short":"Error Handler provides basic error and exception handling for your application. It captures and\nhandles all unhandled exceptions and errors. Displays helpful framework errors when debug > 1.","long":"### Uncaught exceptions\n\nWhen debug < 1 a CakeException will render 404 or 500 errors. If an uncaught exception is thrown\nand it is a type that ErrorHandler does not know about it will be treated as a 500 error.\n\n### Implementing application specific exception handling\n\nYou can implement application specific exception handling in one of a few ways. Each approach\ngives you different amounts of control over the exception handling process.\n\n- Modify config\/error.php and setup custom exception handling.\n- Use the `exceptionRenderer` option to inject an Exception renderer. This will\nlet you keep the existing handling logic but override the rendering logic.\n\n#### Create your own Exception handler\n\nThis gives you full control over the exception handling process. The class you choose should be\nloaded in your config\/error.php and registered as the default exception handler.\n\n#### Using a custom renderer with `exceptionRenderer`\n\nIf you don't want to take control of the exception handling, but want to change how exceptions are\nrendered you can use `exceptionRenderer` option to choose a class to render exception pages. By default\n`Cake\\Error\\ExceptionRenderer` is used. Your custom exception renderer class should be placed in src\/Error.\n\nYour custom renderer should expect an exception in its constructor, and implement a render method.\nFailing to do so will cause additional errors.\n\n#### Logging exceptions\n\nUsing the built-in exception handling, you can log all the exceptions\nthat are dealt with by ErrorHandler by setting `log` option to true in your config\/error.php.\nEnabling this will log every exception to Log and the configured loggers.\n\n### PHP errors\n\nError handler also provides the built in features for handling php errors (trigger_error).\nWhile in debug mode, errors will be output to the screen using debugger. While in production mode,\nerrors will be logged to Log.  You can control which errors are logged by setting\n`errorLevel` option in config\/error.php.\n\n#### Logging errors\n\nWhen ErrorHandler is used for handling errors, you can enable error logging by setting the `log`\noption to true. This will log all errors to the configured log handlers.\n\n#### Controlling what errors are logged\/displayed\n\nYou can control which errors are logged \/ displayed by ErrorHandler by setting `errorLevel`. Setting this\nto one or a combination of a few of the E_* constants will only enable the specified errors:\n\n```\n$options['errorLevel'] = E_ALL & ~E_NOTICE;\n```\n\nWould enable handling for all non Notice errors."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"The options for error handling."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Error\\ExceptionRenderer":{"class":{"descriptions":{"short":"Exception Renderer.","long":"Captures and handles all unhandled exceptions. Displays helpful framework errors when debug is true.\nWhen debug is false a CakeException will render 404 or 500 errors. If an uncaught exception is thrown\nand it is a type that ExceptionHandler does not know about it will be treated as a 500 error.\n\n### Implementing application specific exception rendering\n\nYou can implement application specific exception handling by creating a subclass of\nExceptionRenderer and configure it to be the `exceptionRenderer` in config\/error.php\n\n#### Using a subclass of ExceptionRenderer\n\nUsing a subclass of ExceptionRenderer gives you full control over how Exceptions are rendered, you\ncan configure your class in your config\/app.php."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$exception"],"optionals":[],"docParameters":{"$exception":{"type":"Exception","description":"Exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates the controller to perform rendering on the error response.\nIf the error is a Cake\\Core\\Exception\\Exception it will be converted to either a 400 or a 500\ncode error depending on the code used to construct the error.","long":""},"deprecated":false}}}},"Cake\\Error\\FatalErrorException":{"class":{"descriptions":{"short":"Represents a fatal error","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$file","$line"],"docParameters":{"$message":{"type":"string","description":"Message string."},"$code":{"type":"int","description":"Code."},"$file":{"type":"string|null","description":"File name."},"$line":{"type":"int|null","description":"Line number."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Error\\PHP7ErrorException":{"class":{"descriptions":{"short":"Wraps a PHP 7 Error object inside a normal Exception\nso it can be handled correctly by the rest of the\nerror handling system","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$error"],"optionals":[],"docParameters":{"$error":{"type":"Error","description":"the Error object"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Wraps the passed Error class","long":""},"deprecated":false}}}},"Cake\\Event\\Event":{"class":{"descriptions":{"short":"Represents the transport class of events across the system. It receives a name, subject and an optional\npayload. The name can be any string that uniquely identifies the event across the application, while the subject\nrepresents the object that the event applies to.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$subject","$data"],"docParameters":{"$name":{"type":"string","description":"Name of the event"},"$subject":{"type":"object|null","description":"the object that this event applies to (usually the object that is generating the event)"},"$data":{"type":"array|null","description":"any value you wish to be transported with this event to it can be read by listeners"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"### Examples of usage:\n\n```\n$event = new Event('Order.afterBuy', $this, ['buyer' => $userData]);\n$event = new Event('User.afterRegister', $UserModel);\n```"},"deprecated":false}}}},"Cake\\Event\\EventDispatcherInterface":{"class":{"descriptions":{"short":"Objects implementing this interface can emit events.","long":"Objects with this interface can trigger events, and have\nan event manager retrieved from them.\n\nThe Cake\\Event\\EventDispatcherTrait lets you easily implement\nthis interface."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Event\\EventDispatcherTrait":{"class":{"descriptions":{"short":"Implements Cake\\Event\\EventDispatcherInterface.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Event\\EventListenerInterface":{"class":{"descriptions":{"short":"Objects implementing this interface should declare the `implementedEvents` function\nto notify the event manager what methods should be called when an event is triggered.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Event\\EventManager":{"class":{"descriptions":{"short":"The event manager is responsible for keeping track of event listeners, passing the correct\ndata to them, and firing them in the correct order, when associated events are triggered. You\ncan create multiple instances of this object to manage local events or keep a single instance\nand pass it around to manage all events in your app.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Event\\EventManagerTrait":{"class":{"descriptions":{"short":"Provides the event manager interface features for usage in classes that require it.","long":""},"deprecated":true},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Filesystem\\File":{"class":{"descriptions":{"short":"Convenience class for reading, writing and appending to files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$path"],"optionals":["$create","$mode"],"docParameters":{"$path":{"type":"string","description":"Path to file"},"$create":{"type":"bool","description":"Create file if it does not exist (if true)"},"$mode":{"type":"int","description":"Mode to apply to the folder holding the file"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Filesystem\\Folder":{"class":{"descriptions":{"short":"Folder structure browser, lists folders and files.\nProvides an Object interface for Common directory related tasks.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$path","$create","$mode"],"docParameters":{"$path":{"type":"string|null","description":"Path to folder"},"$create":{"type":"bool","description":"Create folder if not found"},"$mode":{"type":"int|bool","description":"Mode (CHMOD) to apply to created folder, false to ignore"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Form\\Form":{"class":{"descriptions":{"short":"Form abstraction used to create forms not tied to ORM backed models,\nor to other permanent datastores. Ideal for implementing forms on top of\nAPI services, or contact forms.","long":"### Building a form\n\nThis class is most useful when subclassed. In a subclass you\nshould define the `_buildSchema`, `_buildValidator` and optionally,\nthe `_execute` methods. These allow you to declare your form's\nfields, validation and primary action respectively.\n\nYou can also define the validation and schema by chaining method\ncalls off of `$form->schema()` and `$form->validator()`.\n\nForms are conventionally placed in the `App\\Form` namespace."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Form\\Schema":{"class":{"descriptions":{"short":"Contains the schema information for Form instances.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\I18n\\ChainMessagesLoader":{"class":{"descriptions":{"short":"Wraps multiple message loaders calling them one after another until\none of them returns a non-empty package.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$loaders"],"optionals":[],"docParameters":{"$loaders":{"type":"array","description":"List of callables to execute"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Receives a list of callable functions or objects that will be executed\none after another until one of them returns a non-empty translations package","long":""},"deprecated":false}}}},"Cake\\I18n\\Formatter\\IcuFormatter":{"class":{"descriptions":{"short":"A formatter that will interpolate variables using the MessageFormatter class","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\I18n\\Formatter\\SprintfFormatter":{"class":{"descriptions":{"short":"A formatter that will interpolate variables using sprintf and\nselect the correct plural form when required","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\I18n\\I18n":{"class":{"descriptions":{"short":"I18n handles translation of Text and time format strings.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\I18n\\MessagesFileLoader":{"class":{"descriptions":{"short":"A generic translations package factory that will load translations files\nbased on the file extension and the package name.","long":"This class is a callable, so it can be used as a package loader argument."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name","$locale"],"optionals":["$extension"],"docParameters":{"$name":{"type":"string","description":"The name (domain) of the translations package."},"$locale":{"type":"string","description":"The locale to load, this will be mapped to a folder in the system."},"$extension":{"type":"string","description":"The file extension to use. This will also be mapped to a messages parser class."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a translation file loader. The file to be loaded corresponds to\nthe following rules:","long":"- The locale is a folder under the `Locale` directory, a fallback will be\nused if the folder is not found.\n- The $name corresponds to the file name to load\n- If there is a loaded plugin with the underscored version of $name, the\ntranslation file will be loaded from such plugin.\n\n### Examples:\n\nLoad and parse src\/Locale\/fr\/validation.po\n\n```\n$loader = new MessagesFileLoader('validation', 'fr_FR', 'po');\n$package = $loader();\n```\n\nLoad and parse  src\/Locale\/fr_FR\/validation.mo\n\n```\n$loader = new MessagesFileLoader('validation', 'fr_FR', 'mo');\n$package = $loader();\n```\n\nLoad the plugins\/MyPlugin\/src\/Locale\/fr\/my_plugin.po file:\n\n```\n$loader = new MessagesFileLoader('my_plugin', 'fr_FR', 'mo');\n$package = $loader();\n```"},"deprecated":false}}}},"Cake\\I18n\\Number":{"class":{"descriptions":{"short":"Number helper library.","long":"Methods to make numbers more readable."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\I18n\\Parser\\MoFileParser":{"class":{"descriptions":{"short":"Parses file in PO format","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\I18n\\Parser\\PoFileParser":{"class":{"descriptions":{"short":"Parses file in PO format","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\I18n\\PluralRules":{"class":{"descriptions":{"short":"Utility class used to determine the plural number to be used for a variable\nbase on the locale","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\I18n\\TranslatorRegistry":{"class":{"descriptions":{"short":"Constructs and stores instances of translators that can be\nretrieved by name and locale.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$packages","$formatters","$factory","$locale"],"optionals":[],"docParameters":{"$packages":{"type":"PackageLocator","description":"The package locator."},"$formatters":{"type":"FormatterLocator","description":"The formatter locator."},"$factory":{"type":"TranslatorFactory","description":"A translator factory to create translator objects for the locale and package."},"$locale":{"type":"string","description":"The default locale code to use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Log\\Engine\\BaseLog":{"class":{"descriptions":{"short":"Base log engine class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Configuration array"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"__construct method","long":""},"deprecated":false}}}},"Cake\\Log\\Engine\\ConsoleLog":{"class":{"descriptions":{"short":"Console logging. Writes logs to console output.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Options for the FileLog, see above."}},"throws":{"\\InvalidArgumentException":""},"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a new Console Logger.","long":"Config\n\n- `levels` string or array, levels the engine is interested in\n- `scopes` string or array, scopes the engine is interested in\n- `stream` the path to save logs on.\n- `outputAs` integer or ConsoleOutput::[RAW|PLAIN|COLOR]"},"deprecated":false}}}},"Cake\\Log\\Engine\\FileLog":{"class":{"descriptions":{"short":"File Storage stream for Logging. Writes logs to different files\nbased on the level of log it is.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Configuration array"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Sets protected properties based on config provided","long":""},"deprecated":false}}}},"Cake\\Log\\Engine\\SyslogLog":{"class":{"descriptions":{"short":"Syslog stream for Logging. Writes logs to the system logger","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Configuration array"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"__construct method","long":""},"deprecated":false}}}},"Cake\\Log\\Log":{"class":{"descriptions":{"short":"Logs messages to configured Log adapters.  One or more adapters\ncan be configured using Cake Logs's methods.  If you don't\nconfigure any adapters, and write to Log, the messages will be\nignored.","long":"### Configuring Log adapters\n\nYou can configure log adapters in your applications `config\/app.php` file.\nA sample configuration would look like:\n\n```\nLog::config('my_log', ['className' => 'FileLog']);\n```\n\nYou can define the className as any fully namespaced classname or use a short hand\nclassname to use loggers in the `App\\Log\\Engine` & `Cake\\Log\\Engine` namespaces.\nYou can also use plugin short hand to use logging classes provided by plugins.\n\nLog adapters are required to implement `Psr\\Log\\LoggerInterface`, and there is a\nbuilt-in base class (`Cake\\Log\\Engine\\BaseLog`) that can be used for custom loggers.\n\nOutside of the `className` key, all other configuration values will be passed to the\nlogging adapter's constructor as an array.\n\n### Logging levels\n\nWhen configuring loggers, you can set which levels a logger will handle.\nThis allows you to disable debug messages in production for example:\n\n```\nLog::config('default', [\n'className' => 'File',\n'path' => LOGS,\n'levels' => ['error', 'critical', 'alert', 'emergency']\n]);\n```\n\nThe above logger would only log error messages or higher. Any\nother log messages would be discarded.\n\n### Logging scopes\n\nWhen configuring loggers you can define the active scopes the logger\nis for. If defined, only the listed scopes will be handled by the\nlogger. If you don't define any scopes an adapter will catch\nall scopes that match the handled levels.\n\n```\nLog::config('payments', [\n'className' => 'File',\n'scopes' => ['payment', 'order']\n]);\n```\n\nThe above logger will only capture log entries made in the\n`payment` and `order` scopes. All other scopes including the\nundefined scope will be ignored.\n\n### Writing to the log\n\nYou write to the logs using Log::write().  See its documentation for more information.\n\n### Logging Levels\n\nBy default Cake Log supports all the log levels defined in\nRFC 5424. When logging messages you can either use the named methods,\nor the correct constants with `write()`:\n\n```\nLog::error('Something horrible happened');\nLog::write(LOG_ERR, 'Something horrible happened');\n```\n\n### Logging scopes\n\nWhen logging messages and configuring log adapters, you can specify\n'scopes' that the logger will handle.  You can think of scopes as subsystems\nin your application that may require different logging setups.  For\nexample in an e-commerce application you may want to handle logged errors\nin the cart and ordering subsystems differently than the rest of the\napplication.  By using scopes you can control logging for each part\nof your application and also use standard log levels."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Log\\LogEngineRegistry":{"class":{"descriptions":{"short":"Registry of loaded log engines","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Log\\LogTrait":{"class":{"descriptions":{"short":"A trait providing an object short-cut method\nto logging.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Mailer\\AbstractTransport":{"class":{"descriptions":{"short":"Abstract transport for sending email","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Configuration options."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Mailer\\Email":{"class":{"descriptions":{"short":"CakePHP Email class.","long":"This class is used for sending Internet Message Format based\non the standard outlined in http:\/\/www.rfc-editor.org\/rfc\/rfc2822.txt\n\n### Configuration\n\nConfiguration for Email is managed by Email::config() and Email::configTransport().\nEmail::config() can be used to add or read a configuration profile for Email instances.\nOnce made configuration profiles can be used to re-use across various email messages your\napplication sends."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array|string|null","description":"Array of configs, or string to load configs from email.php"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Mailer\\Exception\\MissingActionException":{"class":{"descriptions":{"short":"Missing Action exception - used when a mailer action cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Mailer\\Exception\\MissingMailerException":{"class":{"descriptions":{"short":"Used when a mailer cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Mailer\\Mailer":{"class":{"descriptions":{"short":"Mailer base class.","long":"Mailer classes let you encapsulate related Email logic into a reusable\nand testable class.\n\n## Defining Messages\n\nMailers make it easy for you to define methods that handle email formatting\nlogic. For example:\n\n```\nclass UserMailer extends Mailer\n{\npublic function resetPassword($user)\n{\n$this\n->subject('Reset Password')\n->to($user->email)\n->set(['token' => $user->token]);\n}\n}\n```\n\nIs a trivial example but shows how a mailer could be declared.\n\n## Sending Messages\n\nAfter you have defined some messages you will want to send them:\n\n```\n$mailer = new UserMailer();\n$mailer->send('resetPassword', $user);\n```\n\n## Event Listener\n\nMailers can also subscribe to application event allowing you to\ndecouple email delivery from your application code. By re-declaring the\n`implementedEvents()` method you can define event handlers that can\nconvert events into email. For example, if your application had a user\nregistration event:\n\n```\npublic function implementedEvents()\n{\nreturn [\n'Model.afterSave' => 'onRegistration',\n];\n}\n\npublic function onRegistration(Event $event, Entity $entity, ArrayObject $options)\n{\nif ($entity->isNew()) {\n$this->send('welcome', [$entity]);\n}\n}\n```\n\nThe onRegistration method converts the application event into a mailer method.\nOur mailer could either be registered in the application bootstrap, or\nin the Table class' initialize() hook."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$email"],"docParameters":{"$email":{"type":"\\Cake\\Mailer\\Email|null","description":"Email instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Mailer\\MailerAwareTrait":{"class":{"descriptions":{"short":"Provides functionality for loading mailer classes\nonto properties of the host object.","long":"Example users of this trait are Cake\\Controller\\Controller and\nCake\\Console\\Shell."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Mailer\\Transport\\DebugTransport":{"class":{"descriptions":{"short":"Debug Transport class, useful for emulate the email sending process and inspect the resulted\nemail message before actually send it during development","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Configuration options."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Mailer\\Transport\\MailTransport":{"class":{"descriptions":{"short":"Send mail using mail() function","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Configuration options."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Mailer\\Transport\\SmtpTransport":{"class":{"descriptions":{"short":"Send mail using SMTP protocol","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Configuration options."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\BadRequestException":{"class":{"descriptions":{"short":"Represents an HTTP 400 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Bad Request' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 400"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\ConflictException":{"class":{"descriptions":{"short":"Represents an HTTP 409 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Conflict' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 409"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\ForbiddenException":{"class":{"descriptions":{"short":"Represents an HTTP 403 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Forbidden' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 403"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\GoneException":{"class":{"descriptions":{"short":"Represents an HTTP 410 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Gone' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 410"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\HttpException":{"class":{"descriptions":{"short":"Parent class for all of the HTTP related exceptions in CakePHP.\nAll HTTP status\/error related exceptions should extend this class so\ncatch blocks can be specifically typed.","long":"You may also use this as a meaningful bridge to Cake\\Core\\Exception\\Exception, e.g.:\nthrow new \\Cake\\Network\\Exception\\HttpException('HTTP Version Not Supported', 505);"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Network\\Exception\\InternalErrorException":{"class":{"descriptions":{"short":"Represents an HTTP 500 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Internal Server Error' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 500"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\InvalidCsrfTokenException":{"class":{"descriptions":{"short":"Represents an HTTP 403 error caused by an invalid CSRF token","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Invalid CSRF Token' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 403"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\MethodNotAllowedException":{"class":{"descriptions":{"short":"Represents an HTTP 405 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Method Not Allowed' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 405"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\NotAcceptableException":{"class":{"descriptions":{"short":"Represents an HTTP 406 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Not Acceptable' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 406"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\NotFoundException":{"class":{"descriptions":{"short":"Represents an HTTP 404 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Not Found' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 404"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\NotImplementedException":{"class":{"descriptions":{"short":"Not Implemented Exception - used when an API method is not implemented","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Network\\Exception\\ServiceUnavailableException":{"class":{"descriptions":{"short":"Represents an HTTP 503 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Service Unavailable' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 503"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\SocketException":{"class":{"descriptions":{"short":"Exception class for Socket. This exception will be thrown from Socket, Email, HttpSocket\nSmtpTransport, MailTransport and HttpResponse when it encounters an error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Cake\\Network\\Exception\\UnauthorizedException":{"class":{"descriptions":{"short":"Represents an HTTP 401 error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code"],"docParameters":{"$message":{"type":"string|null","description":"If no message is given 'Unauthorized' will be the message"},"$code":{"type":"int","description":"Status code, defaults to 401"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Http\\Adapter\\Stream":{"class":{"descriptions":{"short":"Implements sending Cake\\Network\\Http\\Request\nvia php's stream API.","long":"This approach and implementation is partly inspired by Aura.Http"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Network\\Http\\Auth\\Basic":{"class":{"descriptions":{"short":"Basic authentication adapter for Cake\\Network\\Http\\Client","long":"Generally not directly constructed, but instead used by Cake\\Network\\Http\\Client\nwhen $options['auth']['type'] is 'basic'"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Network\\Http\\Auth\\Digest":{"class":{"descriptions":{"short":"Digest authentication adapter for Cake\\Network\\Http\\Client","long":"Generally not directly constructed, but instead used by Cake\\Network\\Http\\Client\nwhen $options['auth']['type'] is 'digest'"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$client"],"optionals":["$options"],"docParameters":{"$client":{"type":"\\Cake\\Network\\Http\\Client","description":"Http client object."},"$options":{"type":"array|null","description":"Options list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Http\\Auth\\Oauth":{"class":{"descriptions":{"short":"Oauth 1 authentication strategy for Cake\\Network\\Http\\Client","long":"This object does not handle getting Oauth access tokens from the service\nprovider. It only handles make client requests *after* you have obtained the Oauth\ntokens.\n\nGenerally not directly constructed, but instead used by Cake\\Network\\Http\\Client\nwhen $options['auth']['type'] is 'oauth'"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Network\\Http\\Client":{"class":{"descriptions":{"short":"The end user interface for doing HTTP requests.","long":"### Scoped clients\n\nIf you're doing multiple requests to the same hostname its often convenient\nto use the constructor arguments to create a scoped client. This allows you\nto keep your code DRY and not repeat hostnames, authentication, and other options.\n\n### Doing requests\n\nOnce you've created an instance of Client you can do requests\nusing several methods. Each corresponds to a different HTTP method.\n\n- get()\n- post()\n- put()\n- delete()\n- patch()\n\n### Cookie management\n\nClient will maintain cookies from the responses done with\na client instance. These cookies will be automatically added\nto future requests to matching hosts. Cookies will respect the\n`Expires`, `Path` and `Domain` attributes. You can get the list of\ncurrently stored cookies using the cookies() method.\n\nYou can use the 'cookieJar' constructor option to provide a custom\ncookie jar instance you've restored from cache\/disk. By default\nan empty instance of Cake\\Network\\Http\\CookieCollection will be created.\n\n### Sending request bodies\n\nBy default any POST\/PUT\/PATCH\/DELETE request with $data will\nsend their data as `application\/x-www-form-urlencoded` unless\nthere are attached files. In that case `multipart\/form-data`\nwill be used.\n\nWhen sending request bodies you can use the `type` option to\nset the Content-Type for the request:\n\n```\n$http->get('\/users', [], ['type' => 'json']);\n```\n\nThe `type` option sets both the `Content-Type` and `Accept` header, to\nthe same mime type. When using `type` you can use either a full mime\ntype or an alias. If you need different types in the Accept and Content-Type\nheaders you should set them manually and not use `type`\n\n### Using authentication\n\nBy using the `auth` key you can use authentication. The type sub option\ncan be used to specify which authentication strategy you want to use.\nCakePHP comes with a few built-in strategies:\n\n- Basic\n- Digest\n- Oauth\n\n### Using proxies\n\nBy using the `proxy` key you can set authentication credentials for\na proxy if you need to use one.. The type sub option can be used to\nspecify which authentication strategy you want to use.\nCakePHP comes with built-in support for basic authentication."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Config options for scoped clients."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Create a new HTTP Client.","long":"### Config options\n\nYou can set the following options when creating a client:\n\n- host - The hostname to do requests on.\n- port - The port to use.\n- scheme - The default scheme\/protocol to use. Defaults to http.\n- timeout - The timeout in seconds. Defaults to 30\n- ssl_verify_peer - Whether or not SSL certificates should be validated.\nDefaults to true.\n- ssl_verify_depth - The maximum certificate chain depth to travers.\nDefaults to 5.\n- ssl_verify_host - Verify that the certificate and hostname match.\nDefaults to true.\n- redirect - Number of redirects to follow. Defaults to false."},"deprecated":false}}}},"Cake\\Network\\Http\\CookieCollection":{"class":{"descriptions":{"short":"Container class for cookies used in Http\\Client.","long":"Provides cookie jar like features for storing cookies between\nrequests, as well as appending cookies to new requests."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Network\\Http\\FormData":{"class":{"descriptions":{"short":"Provides an interface for building\nmultipart\/form-encoded message bodies.","long":"Used by Http\\Client to upload POST\/PUT data\nand files."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Network\\Http\\FormData\\Part":{"class":{"descriptions":{"short":"Contains the data and behavior for a single\npart in a Multipart FormData request body.","long":"Added to Cake\\Network\\Http\\FormData when sending\ndata to a remote server."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name","$value"],"optionals":["$disposition"],"docParameters":{"$name":{"type":"string","description":"The name of the data."},"$value":{"type":"string","description":"The value of the data."},"$disposition":{"type":"string","description":"The type of disposition to use, defaults to form-data."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Http\\Message":{"class":{"descriptions":{"short":"Base class for other HTTP requests\/responses","long":"Defines some common helper methods, constants\nand properties."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Network\\Http\\Request":{"class":{"descriptions":{"short":"Implements methods for HTTP requests.","long":"Used by Cake\\Network\\Http\\Client to contain request information\nfor making requests."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Network\\Http\\Response":{"class":{"descriptions":{"short":"Implements methods for HTTP responses.","long":"All of the following examples assume that `$response` is an\ninstance of this class.\n\n### Get header values\n\nHeader names are case-insensitive, but normalized to Title-Case\nwhen the response is parsed.\n\n```\n$val = $response->header('content-type');\n```\n\nWill read the Content-Type header. You can get all set\nheaders using:\n\n```\n$response->header();\n```\n\nYou can also get at the headers using object access. When getting\nheaders with object access, you have to use case-sensitive header\nnames:\n\n```\n$val = $response->headers['Content-Type'];\n```\n\n### Get the response body\n\nYou can access the response body using:\n\n```\n$content = $response->body();\n```\n\nYou can also use object access:\n\n```\n$content = $response->body;\n```\n\nIf your response body is in XML or JSON you can use\nspecial content type specific accessors to read the decoded data.\nJSON data will be returned as arrays, while XML data will be returned\nas SimpleXML nodes:\n\n```\n\/\/ Get as xml\n$content = $response->xml\n\/\/ Get as json\n$content = $response->json\n```\n\nIf the response cannot be decoded, null will be returned.\n\n### Check the status code\n\nYou can access the response status code using:\n\n```\n$content = $response->statusCode();\n```\n\nYou can also use object access:\n\n```\n$content = $response->code;\n```"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$headers","$body"],"docParameters":{"$headers":{"type":"array","description":"Unparsed headers."},"$body":{"type":"string","description":"The response body."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Request":{"class":{"descriptions":{"short":"A class that helps wrap Request information and particulars about a single request.\nProvides methods commonly used to introspect on the request headers and request body.","long":"Has both an Array and Object interface. You can access framework parameters using indexes:\n\n`$request['controller']` or `$request->controller`."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"string|array","description":"An array of request data to create a request with."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Create a new request object.","long":"You can supply the data as either an array or as a string.  If you use\na string you can only supply the URL for the request.  Using an array will\nlet you provide the following keys:\n\n- `post` POST data or non query string data\n- `query` Additional data from the query string.\n- `files` Uploaded file data formatted like $_FILES.\n- `cookies` Cookies for this request.\n- `environment` $_SERVER and $_ENV data.\n- `url` The URL without the base path for the request.\n- `base` The base URL for the request.\n- `webroot` The webroot directory for the request.\n- `input` The data that would come from php:\/\/input this is useful for simulating\n- `session` An instance of a Session object\nrequests with put, patch or delete data."},"deprecated":false}}}},"Cake\\Network\\Response":{"class":{"descriptions":{"short":"Cake Response is responsible for managing the response text, status and headers of a HTTP response.","long":"By default controllers will use this class to render their response. If you are going to use\na custom response class it should subclass this object in order to ensure compatibility."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"list of parameters to setup the response. Possible values are: - body: the response text that should be sent to the client - statusCodes: additional allowable response codes - status: the HTTP status code to respond with - type: a complete mime-type string or an extension mapped in this class - charset: the charset for the response body"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Network\\Session":{"class":{"descriptions":{"short":"This class is a wrapper for the native PHP session functions. It provides\nseveral defaults for the most common session configuration\nvia external handlers and helps with using session in cli without any warnings.","long":"Sessions can be created from the defaults using `Session::create()` or you can get\nan instance of a new session by just instantiating this class and passing the complete\noptions you want to use.\n\nWhen specific options are omitted, this class will take its defaults from the configuration\nvalues from the `session.*` directives in php.ini. This class will also alter such\ndirectives when configuration values are provided."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"The Configuration to apply to this session object"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"### Configuration:\n\n- timeout: The time in minutes the session should be valid for.\n- cookiePath: The url path for which session cookie is set. Maps to the\n`session.cookie_path` php.ini config. Defaults to base path of app.\n- ini: A list of php.ini directives to change before the session start.\n- handler: An array containing at least the `class` key. To be used as the session\nengine for persisting data. The rest of the keys in the array will be passed as\nthe configuration array for the engine. You can set the `class` key to an already\ninstantiated session handler object."},"deprecated":false}}}},"Cake\\Network\\Session\\CacheSession":{"class":{"descriptions":{"short":"CacheSession provides method for saving sessions into a Cache engine. Used with Session","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"The configuration to use for this engine It requires the key 'config' which is the name of the Cache config to use for storing the session"}},"throws":{"\\InvalidArgumentException":"if the 'config' key is not provided"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Network\\Session\\DatabaseSession":{"class":{"descriptions":{"short":"DatabaseSession provides methods to be used with Session.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"The configuration for this engine. It requires the 'model' key to be present corresponding to the Table to use for managing the sessions."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Looks at Session configuration information and\nsets up the session model.","long":""},"deprecated":false}}}},"Cake\\Network\\Socket":{"class":{"descriptions":{"short":"CakePHP network socket connection class.","long":"Core base class for network communication."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Socket configuration, which will be merged with the base configuration"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\ORM\\Association":{"class":{"descriptions":{"short":"An Association is a relationship established between two tables and is used\nto configure and customize the way interconnected records are retrieved.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$alias"],"optionals":["$options"],"docParameters":{"$alias":{"type":"string","description":"The name given to the association"},"$options":{"type":"array","description":"A list of properties to be set on this object"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Subclasses can override _options function to get the original\nlist of passed options if expecting any other special key","long":""},"deprecated":false}}}},"Cake\\ORM\\AssociationCollection":{"class":{"descriptions":{"short":"A container\/collection for association classes.","long":"Contains methods for managing associations, and\nordering operations around saving and deleting."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Association\\BelongsTo":{"class":{"descriptions":{"short":"Represents an 1 - N relationship where the source side of the relation is\nrelated to only one record in the target table.","long":"An example of a BelongsTo association would be Article belongs to Author."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$alias"],"optionals":["$options"],"docParameters":{"$alias":{"type":"string","description":"The name given to the association"},"$options":{"type":"array","description":"A list of properties to be set on this object"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Subclasses can override _options function to get the original\nlist of passed options if expecting any other special key","long":""},"deprecated":false}}}},"Cake\\ORM\\Association\\BelongsToMany":{"class":{"descriptions":{"short":"Represents an M - N relationship where there exists a junction - or join - table\nthat contains the association fields between the source and the target table.","long":"An example of a BelongsToMany association would be Article belongs to many Tags."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$alias"],"optionals":["$options"],"docParameters":{"$alias":{"type":"string","description":"The name given to the association"},"$options":{"type":"array","description":"A list of properties to be set on this object"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Subclasses can override _options function to get the original\nlist of passed options if expecting any other special key","long":""},"deprecated":false}}}},"Cake\\ORM\\Association\\DependentDeleteTrait":{"class":{"descriptions":{"short":"Implements cascading deletes for dependent associations.","long":"Included by HasOne and HasMany association classes."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Association\\ExternalAssociationTrait":{"class":{"descriptions":{"short":"Represents a type of association that that needs to be recovered by performing\nan extra query.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Association\\HasMany":{"class":{"descriptions":{"short":"Represents an N - 1 relationship where the target side of the relationship\nwill have one or multiple records per each one in the source side.","long":"An example of a HasMany association would be Author has many Articles."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$alias"],"optionals":["$options"],"docParameters":{"$alias":{"type":"string","description":"The name given to the association"},"$options":{"type":"array","description":"A list of properties to be set on this object"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Subclasses can override _options function to get the original\nlist of passed options if expecting any other special key","long":""},"deprecated":false}}}},"Cake\\ORM\\Association\\HasOne":{"class":{"descriptions":{"short":"Represents an 1 - 1 relationship where the source side of the relation is\nrelated to only one record in the target table and vice versa.","long":"An example of a HasOne association would be User has one Profile."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$alias"],"optionals":["$options"],"docParameters":{"$alias":{"type":"string","description":"The name given to the association"},"$options":{"type":"array","description":"A list of properties to be set on this object"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Subclasses can override _options function to get the original\nlist of passed options if expecting any other special key","long":""},"deprecated":false}}}},"Cake\\ORM\\Association\\SelectableAssociationTrait":{"class":{"descriptions":{"short":"Represents a type of association that that can be fetched using another query","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\AssociationsNormalizerTrait":{"class":{"descriptions":{"short":"Contains methods for parsing the associated tables array that is typically\npassed to  a save operation","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Behavior":{"class":{"descriptions":{"short":"Base class for behaviors.","long":"Behaviors allow you to simulate mixins, and create\nreusable blocks of application logic, that can be reused across\nseveral models. Behaviors also provide a way to hook into model\ncallbacks and augment their behavior.\n\n### Mixin methods\n\nBehaviors can provide mixin like features by declaring public\nmethods. These methods will be accessible on the tables the\nbehavior has been added to.\n\n```\nfunction doSomething($arg1, $arg2) {\n\/\/ do something\n}\n```\n\nWould be called like `$table->doSomething($arg1, $arg2);`.\n\n### Callback methods\n\nBehaviors can listen to any events fired on a Table. By default\nCakePHP provides a number of lifecycle events your behaviors can\nlisten to:\n\n- `beforeFind(Event $event, Query $query, ArrayObject $options, boolean $primary)`\nFired before each find operation. By stopping the event and supplying a\nreturn value you can bypass the find operation entirely. Any changes done\nto the $query instance will be retained for the rest of the find. The\n$primary parameter indicates whether or not this is the root query,\nor an associated query.\n\n- `buildValidator(Event $event, Validator $validator, string $name)`\nFired when the validator object identified by $name is being built. You can use this\ncallback to add validation rules or add validation providers.\n\n- `buildRules(Event $event, RulesChecker $rules)`\nFired when the rules checking object for the table is being built. You can use this\ncallback to add more rules to the set.\n\n- `beforeRules(Event $event, EntityInterface $entity, ArrayObject $options, $operation)`\nFired before an entity is validated using by a rules checker. By stopping this event,\nyou can return the final value of the rules checking operation.\n\n- `afterRules(Event $event, EntityInterface $entity, ArrayObject $options, bool $result, $operation)`\nFired after the rules have been checked on the entity. By stopping this event,\nyou can return the final value of the rules checking operation.\n\n- `beforeSave(Event $event, EntityInterface $entity, ArrayObject $options)`\nFired before each entity is saved. Stopping this event will abort the save\noperation. When the event is stopped the result of the event will be returned.\n\n- `afterSave(Event $event, EntityInterface $entity, ArrayObject $options)`\nFired after an entity is saved.\n\n- `beforeDelete(Event $event, EntityInterface $entity, ArrayObject $options)`\nFired before an entity is deleted. By stopping this event you will abort\nthe delete operation.\n\n- `afterDelete(Event $event, EntityInterface $entity, ArrayObject $options)`\nFired after an entity has been deleted.\n\nIn addition to the core events, behaviors can respond to any\nevent fired from your Table classes including custom application\nspecific ones.\n\nYou can set the priority of a behaviors callbacks by using the\n`priority` setting when attaching a behavior. This will set the\npriority for all the callbacks a behavior provides.\n\n### Finder methods\n\nBehaviors can provide finder methods that hook into a Table's\nfind() method. Custom finders are a great way to provide preset\nqueries that relate to your behavior. For example a SluggableBehavior\ncould provide a find('slugged') finder. Behavior finders\nare implemented the same as other finders. Any method\nstarting with `find` will be setup as a finder. Your finder\nmethods should expect the following arguments:\n\n```\nfindSlugged(Query $query, array $options)\n```"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$table"],"optionals":["$config"],"docParameters":{"$table":{"type":"\\Cake\\ORM\\Table","description":"The table this behavior is attached to."},"$config":{"type":"array","description":"The config for this behavior."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"Merges config with the default and store in the config property"},"deprecated":false}}}},"Cake\\ORM\\BehaviorRegistry":{"class":{"descriptions":{"short":"BehaviorRegistry is used as a registry for loaded behaviors and handles loading\nand constructing behavior objects.","long":"This class also provides method for checking and dispatching behavior methods."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$table"],"docParameters":{"$table":{"type":"\\Cake\\ORM\\Table|null","description":"The table this registry is attached to."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\ORM\\Behavior\\CounterCacheBehavior":{"class":{"descriptions":{"short":"CounterCache behavior","long":"Enables models to cache the amount of connections in a given relation.\n\nExamples with Post model belonging to User model\n\nRegular counter cache\n```\n[\n'Users' => [\n'post_count'\n]\n]\n```\n\nCounter cache with scope\n```\n[\n'Users' => [\n'posts_published' => [\n'conditions' => [\n'published' => true\n]\n]\n]\n]\n```\n\nCounter cache using custom find\n```\n[\n'Users' => [\n'posts_published' => [\n'finder' => 'published' \/\/ Will be using findPublished()\n]\n]\n]\n```\n\nCounter cache using lambda function returning the count\nThis is equivalent to example #2\n```\n[\n'Users' => [\n'posts_published' => function (Event $event, EntityInterface $entity, Table $table) {\n$query = $table->find('all')->where([\n'published' => true,\n'user_id' => $entity->get('user_id')\n]);\nreturn $query->count();\n}\n]\n]\n```"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$table"],"optionals":["$config"],"docParameters":{"$table":{"type":"\\Cake\\ORM\\Table","description":"The table this behavior is attached to."},"$config":{"type":"array","description":"The config for this behavior."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"Merges config with the default and store in the config property"},"deprecated":false}}}},"Cake\\ORM\\Behavior\\TimestampBehavior":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$table"],"optionals":["$config"],"docParameters":{"$table":{"type":"\\Cake\\ORM\\Table","description":"The table this behavior is attached to."},"$config":{"type":"array","description":"The config for this behavior."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"Merges config with the default and store in the config property"},"deprecated":false}}}},"Cake\\ORM\\Behavior\\TranslateBehavior":{"class":{"descriptions":{"short":"This behavior provides a way to translate dynamic data by keeping translations\nin a separate table linked to the original record from another one. Translated\nfields can be configured to override those in the main table when fetched or\nput aside into another property for the same entity.","long":"If you wish to override fields, you need to call the `locale` method in this\nbehavior for setting the language you want to fetch from the translations table.\n\nIf you want to bring all or certain languages for each of the fetched records,\nyou can use the custom `translations` finders that is exposed to the table."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$table"],"optionals":["$config"],"docParameters":{"$table":{"type":"\\Cake\\ORM\\Table","description":"The table this behavior is attached to."},"$config":{"type":"array","description":"The config for this behavior."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\ORM\\Behavior\\Translate\\TranslateTrait":{"class":{"descriptions":{"short":"Contains a translation method aimed to help managing multiple translations\nfor an entity.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Behavior\\TreeBehavior":{"class":{"descriptions":{"short":"Makes the table to which this is attached to behave like a nested set and\nprovides methods for managing and retrieving information out of the derived\nhierarchical structure.","long":"Tables attaching this behavior are required to have a column referencing the\nparent row, and two other numeric columns (lft and rght) where the implicit\norder will be cached.\n\nFor more information on what is a nested set and a how it works refer to\nhttp:\/\/www.sitepoint.com\/hierarchical-data-database-2\/"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$table"],"optionals":["$config"],"docParameters":{"$table":{"type":"\\Cake\\ORM\\Table","description":"The table this behavior is attached to."},"$config":{"type":"array","description":"The config for this behavior."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"Merges config with the default and store in the config property"},"deprecated":false}}}},"Cake\\ORM\\EagerLoadable":{"class":{"descriptions":{"short":"Represents a single level in the associations tree to be eagerly loaded\nfor a specific query. This contains all the information required to\nfetch the results from the database from an associations and all its children\nlevels.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$config"],"docParameters":{"$name":{"type":"string","description":"The Association name."},"$config":{"type":"array","description":"The list of properties to set."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. The $config parameter accepts the following array\nkeys:","long":"- associations\n- instance\n- config\n- canBeJoined\n- aliasPath\n- propertyPath\n- forMatching\n\nThe keys maps to the settable properties in this class."},"deprecated":false}}}},"Cake\\ORM\\EagerLoader":{"class":{"descriptions":{"short":"Exposes the methods for storing the associations that should be eager loaded\nfor a table once a query is provided and delegates the job of creating the\nrequired joins and decorating the results so that those associations can be\npart of the result set.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Entity":{"class":{"descriptions":{"short":"An entity represents a single result row from a repository. It exposes the\nmethods for retrieving and storing properties associated in this row.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$properties","$options"],"docParameters":{"$properties":{"type":"array","description":"hash of properties to set in this entity"},"$options":{"type":"array","description":"list of options to use when creating this entity"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes the internal properties of this entity out of the\nkeys in an array. The following list of options can be used:","long":"- useSetters: whether use internal setters for properties or not\n- markClean: whether to mark all properties as clean after setting them\n- markNew: whether this instance has not yet been persisted\n- guard: whether to prevent inaccessible properties from being set (default: false)\n- source: A string representing the alias of the repository this entity came from\n\n### Example:\n\n```\n$entity = new Entity(['id' => 1, 'name' => 'Andrew'])\n```"},"deprecated":false}}}},"Cake\\ORM\\Exception\\MissingBehaviorException":{"class":{"descriptions":{"short":"Used when a behavior cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\ORM\\Exception\\MissingEntityException":{"class":{"descriptions":{"short":"Exception raised when an Entity could not be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\ORM\\Exception\\MissingTableClassException":{"class":{"descriptions":{"short":"Exception raised when a Table could not be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\ORM\\LazyEagerLoader":{"class":{"descriptions":{"short":"Contains methods that are capable of injecting eagerly loaded associations into\nentities or lists of entities by using the same syntax as the EagerLoader.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Locator\\LocatorAwareTrait":{"class":{"descriptions":{"short":"Contains method for setting and accessing LocatorInterface instance","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Locator\\LocatorInterface":{"class":{"descriptions":{"short":"Registries for Table objects should implement this interface.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Locator\\TableLocator":{"class":{"descriptions":{"short":"Provides a default registry\/factory for Table objects.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\ORM\\Marshaller":{"class":{"descriptions":{"short":"Contains logic to convert array data into entities.","long":"Useful when converting request data into entities."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$table"],"optionals":[],"docParameters":{"$table":{"type":"\\Cake\\ORM\\Table","description":"The table this marshaller is for."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\ORM\\Query":{"class":{"descriptions":{"short":"Extends the base Query class to provide new methods related to association\nloading, automatic fields selection, automatic type casting and to wrap results\ninto a specific iterator that will be responsible for hydrating results if\nrequired.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$connection","$table"],"optionals":[],"docParameters":{"$connection":{"type":"\\Cake\\Database\\Connection","description":"The connection object"},"$table":{"type":"\\Cake\\ORM\\Table","description":"The table this query is starting on"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\ORM\\ResultSet":{"class":{"descriptions":{"short":"Represents the results obtained after executing a query for a specific table\nThis object is responsible for correctly nesting result keys reported from\nthe query, casting each field to the correct type and executing the extra\nqueries required for eager loading external associations.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$query","$statement"],"optionals":[],"docParameters":{"$query":{"type":"\\Cake\\ORM\\Query","description":"Query from where results come"},"$statement":{"type":"\\Cake\\Database\\StatementInterface","description":"The statement to fetch from"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\ORM\\Rule\\ExistsIn":{"class":{"descriptions":{"short":"Checks that the value provided in a field exists as the primary key of another\ntable.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$fields","$repository"],"optionals":[],"docParameters":{"$fields":{"type":"string|array","description":"The field or fields to check existence as primary key."},"$repository":{"type":"object|string","description":"The repository where the field will be looked for, or the association name for the repository."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\ORM\\Rule\\IsUnique":{"class":{"descriptions":{"short":"Checks that a list of fields from an entity are unique in the table","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$fields"],"optionals":[],"docParameters":{"$fields":{"type":"array","description":"The list of fields to check uniqueness for"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\ORM\\RulesChecker":{"class":{"descriptions":{"short":"ORM flavoured rules checker.","long":"Adds ORM related features to the RulesChecker class."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"The options to pass to every rule"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Takes the options to be passed to all rules.","long":""},"deprecated":false}}}},"Cake\\ORM\\Table":{"class":{"descriptions":{"short":"Represents a single database table.","long":"Exposes methods for retrieving data out of it, and manages the associations\nthis table has to other tables. Multiple instances of this class can be created\nfor the same database table with different aliases, this allows you to address\nyour database structure in a richer and more expressive way.\n\n### Retrieving data\n\nThe primary way to retrieve data is using Table::find(). See that method\nfor more information.\n\n### Dynamic finders\n\nIn addition to the standard find($type) finder methods, CakePHP provides dynamic\nfinder methods. These methods allow you to easily set basic conditions up. For example\nto filter users by username you would call\n\n```\n$query = $users->findByUsername('mark');\n```\n\nYou can also combine conditions on multiple fields using either `Or` or `And`:\n\n```\n$query = $users->findByUsernameOrEmail('mark', 'mark@example.org');\n```\n\n### Bulk updates\/deletes\n\nYou can use Table::updateAll() and Table::deleteAll() to do bulk updates\/deletes.\nYou should be aware that events will *not* be fired for bulk updates\/deletes.\n\n### Callbacks\/events\n\nTable objects provide a few callbacks\/events you can hook into to augment\/replace\nfind operations. Each event uses the standard event subsystem in CakePHP\n\n- `beforeFind(Event $event, Query $query, ArrayObject $options, boolean $primary)`\nFired before each find operation. By stopping the event and supplying a\nreturn value you can bypass the find operation entirely. Any changes done\nto the $query instance will be retained for the rest of the find. The\n$primary parameter indicates whether or not this is the root query,\nor an associated query.\n\n- `buildValidator(Event $event, Validator $validator, string $name)`\nAllows listeners to modify validation rules for the provided named validator.\n\n- `buildRules(Event $event, RulesChecker $rules)`\nAllows listeners to modify the rules checker by adding more rules.\n\n- `beforeRules(Event $event, EntityInterface $entity, ArrayObject $options, string $operation)`\nFired before an entity is validated using the rules checker. By stopping this event,\nyou can return the final value of the rules checking operation.\n\n- `afterRules(Event $event, EntityInterface $entity, ArrayObject $options, bool $result, string $operation)`\nFired after the rules have been checked on the entity. By stopping this event,\nyou can return the final value of the rules checking operation.\n\n- `beforeSave(Event $event, EntityInterface $entity, ArrayObject $options)`\nFired before each entity is saved. Stopping this event will abort the save\noperation. When the event is stopped the result of the event will be returned.\n\n- `afterSave(Event $event, EntityInterface $entity, ArrayObject $options)`\nFired after an entity is saved.\n\n- `beforeDelete(Event $event, EntityInterface $entity, ArrayObject $options)`\nFired before an entity is deleted. By stopping this event you will abort\nthe delete operation.\n\n- `afterDelete(Event $event, EntityInterface $entity, ArrayObject $options)`\nFired after an entity has been deleted."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"Cake\\ORM\\TableRegistry":{"class":{"descriptions":{"short":"Provides a registry\/factory for Table objects.","long":"This registry allows you to centralize the configuration for tables\ntheir connections and other meta-data.\n\n### Configuring instances\n\nYou may need to configure your table objects, using TableRegistry you can\ncentralize configuration. Any configuration set before instances are created\nwill be used when creating instances. If you modify configuration after\nan instance is made, the instances *will not* be updated.\n\n```\nTableRegistry::config('Users', ['table' => 'my_users']);\n```\n\nConfiguration data is stored *per alias* if you use the same table with\nmultiple aliases you will need to set configuration multiple times.\n\n### Getting instances\n\nYou can fetch instances out of the registry using get(). One instance is stored\nper alias. Once an alias is populated the same instance will always be returned.\nThis is used to make the ORM use less memory and help make cyclic references easier\nto solve.\n\n```\n$table = TableRegistry::get('Users', $config);\n```"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Routing\\Dispatcher":{"class":{"descriptions":{"short":"Dispatcher converts Requests into controller actions. It uses the dispatched Request\nto locate and load the correct controller. If found, the requested action is called on\nthe controller","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Routing\\DispatcherFactory":{"class":{"descriptions":{"short":"A factory for creating dispatchers with all the desired middleware\nconnected.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Routing\\DispatcherFilter":{"class":{"descriptions":{"short":"This abstract class represents a filter to be applied to a dispatcher cycle. It acts as an\nevent listener with the ability to alter the request or response as needed before it is handled\nby a controller or after the response body has already been built.","long":"Subclasses of this class use a class naming convention having a `Filter` suffix.\n\n### Limiting filters to specific paths\n\nBy using the `for` option you can limit with request paths a filter is applied to.\nBoth the before and after event will have the same conditions applied to them. For\nexample, if you only wanted a filter applied to blog requests you could do:\n\n```\n$filter = new BlogFilter(['for' => '\/blog']);\n```\n\nWhen the above filter is connected to a dispatcher it will only fire\nits `beforeDispatch` and `afterDispatch` methods on requests that start with `\/blog`.\n\nThe for condition can also be a regular expression by using the `preg:` prefix:\n\n```\n$filter = new BlogFilter(['for' => 'preg:#^\/blog\/\\d+$#']);\n```\n\n### Limiting filters based on conditions\n\nIn addition to simple path based matching you can use a closure to match on arbitrary request\nor response conditions. For example:\n\n```\n$cookieMonster = new CookieFilter([\n'when' => function ($req, $res) {\n\/\/ Custom code goes here.\n}\n]);\n```\n\nIf your when condition returns `true` the before\/after methods will be called.\n\nWhen using the `for` or `when` matchers, conditions will be re-checked on the before and after\ncallback as the conditions could change during the dispatch cycle."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Settings for the filter."}},"throws":{"\\InvalidArgumentException":"When 'when' conditions are not callable."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Routing\\Exception\\MissingControllerException":{"class":{"descriptions":{"short":"Missing Controller exception - used when a controller\ncannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Routing\\Exception\\MissingDispatcherFilterException":{"class":{"descriptions":{"short":"Exception raised when a Dispatcher filter could not be found","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Routing\\Exception\\MissingRouteException":{"class":{"descriptions":{"short":"Exception raised when a URL cannot be reverse routed\nor when a URL cannot be parsed.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\Routing\\Filter\\AssetFilter":{"class":{"descriptions":{"short":"Filters a request and tests whether it is a file in the webroot folder or not and\nserves the file to the client if appropriate.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Array of config."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Routing\\Filter\\ControllerFactoryFilter":{"class":{"descriptions":{"short":"A dispatcher filter that builds the controller to dispatch\nin the request.","long":"This filter resolves the request parameters into a controller\ninstance and attaches it to the event object."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Settings for the filter."}},"throws":{"\\InvalidArgumentException":"When 'when' conditions are not callable."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Routing\\Filter\\LocaleSelectorFilter":{"class":{"descriptions":{"short":"Sets the runtime default locale for the request based on the\nAccept-Language header. The default will only be set if it\nmatches the list of passed valid locales.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Settings for the filter."}},"throws":{"\\Cake\\Core\\Exception\\Exception":"When 'when' conditions are not callable."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Routing\\Filter\\RoutingFilter":{"class":{"descriptions":{"short":"A dispatcher filter that applies routing rules to the request.","long":"This filter will call Router::parse() when the request has no controller\nparameter defined."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Settings for the filter."}},"throws":{"\\InvalidArgumentException":"When 'when' conditions are not callable."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Routing\\RequestActionTrait":{"class":{"descriptions":{"short":"Provides the requestAction() method for doing sub-requests","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Routing\\RouteBuilder":{"class":{"descriptions":{"short":"Provides features for building routes inside scopes.","long":"Gives an easy to use way to build routes and append them\ninto a route collection."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$collection","$path"],"optionals":["$params","$options"],"docParameters":{"$collection":{"type":"\\Cake\\Routing\\RouteCollection","description":"The route collection to append routes into."},"$path":{"type":"string","description":"The path prefix the scope is for."},"$params":{"type":"array","description":"The scope's routing parameters."},"$options":{"type":"array","description":"Options list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"### Options\n\n- `routeClass` - The default route class to use when adding routes.\n- `extensions` - The extensions to connect when adding routes.\n- `namePrefix` - The prefix to prepend to all route names."},"deprecated":false}}}},"Cake\\Routing\\RouteCollection":{"class":{"descriptions":{"short":"Contains a collection of routes.","long":"Provides an interface for adding\/removing routes\nand parsing\/generating URLs with the routes it contains."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Routing\\Route\\DashedRoute":{"class":{"descriptions":{"short":"This route class will transparently inflect the controller, action and plugin\nrouting parameters, so that requesting `\/my-plugin\/my-controller\/my-action`\nis parsed as `['plugin' => 'MyPlugin', 'controller' => 'MyController', 'action' => 'myAction']`","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$template"],"optionals":["$defaults","$options"],"docParameters":{"$template":{"type":"string","description":"Template string with parameter placeholders"},"$defaults":{"type":"array|string","description":"Defaults for the route."},"$options":{"type":"array","description":"Array of additional options for the Route"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor for a Route","long":"### Options\n\n- `_ext` - Defines the extensions used for this route.\n- `pass` - Copies the listed parameters into params['pass']."},"deprecated":false}}}},"Cake\\Routing\\Route\\InflectedRoute":{"class":{"descriptions":{"short":"This route class will transparently inflect the controller and plugin routing\nparameters, so that requesting `\/my_controller` is parsed as `['controller' => 'MyController']`","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$template"],"optionals":["$defaults","$options"],"docParameters":{"$template":{"type":"string","description":"Template string with parameter placeholders"},"$defaults":{"type":"array|string","description":"Defaults for the route."},"$options":{"type":"array","description":"Array of additional options for the Route"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor for a Route","long":"### Options\n\n- `_ext` - Defines the extensions used for this route.\n- `pass` - Copies the listed parameters into params['pass']."},"deprecated":false}}}},"Cake\\Routing\\Route\\PluginShortRoute":{"class":{"descriptions":{"short":"Plugin short route, that copies the plugin param to the controller parameters\nIt is used for supporting \/:plugin routes.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$template"],"optionals":["$defaults","$options"],"docParameters":{"$template":{"type":"string","description":"Template string with parameter placeholders"},"$defaults":{"type":"array|string","description":"Defaults for the route."},"$options":{"type":"array","description":"Array of additional options for the Route"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor for a Route","long":"### Options\n\n- `_ext` - Defines the extensions used for this route.\n- `pass` - Copies the listed parameters into params['pass']."},"deprecated":false}}}},"Cake\\Routing\\Route\\RedirectRoute":{"class":{"descriptions":{"short":"Redirect route will perform an immediate redirect. Redirect routes\nare useful when you want to have Routing layer redirects occur in your\napplication, for when URLs move.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$template"],"optionals":["$defaults","$options"],"docParameters":{"$template":{"type":"string","description":"Template string with parameter placeholders"},"$defaults":{"type":"array|string","description":"Defaults for the route."},"$options":{"type":"array","description":"Array of additional options for the Route"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Routing\\Route\\Route":{"class":{"descriptions":{"short":"A single Route used by the Router to connect requests to\nparameter maps.","long":"Not normally created as a standalone. Use Router::connect() to create\nRoutes for your application."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$template"],"optionals":["$defaults","$options"],"docParameters":{"$template":{"type":"string","description":"Template string with parameter placeholders"},"$defaults":{"type":"array|string","description":"Defaults for the route."},"$options":{"type":"array","description":"Array of additional options for the Route"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor for a Route","long":"### Options\n\n- `_ext` - Defines the extensions used for this route.\n- `pass` - Copies the listed parameters into params['pass']."},"deprecated":false}}}},"Cake\\Routing\\Router":{"class":{"descriptions":{"short":"Parses the request URL into controller, action, and parameters. Uses the connected routes\nto match the incoming URL string to parameters that will allow the request to be dispatched. Also\nhandles converting parameter lists into URL strings, using the connected routes. Routing allows you to decouple\nthe way the world interacts with your application (URLs) and the implementation (controllers and actions).","long":"### Connecting routes\n\nConnecting routes is done using Router::connect(). When parsing incoming requests or reverse matching\nparameters, routes are enumerated in the order they were connected. For more information on routes and\nhow to connect them see Router::connect()."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Shell\\CommandListShell":{"class":{"descriptions":{"short":"Shows a list of commands available from the console.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\CompletionShell":{"class":{"descriptions":{"short":"Provide command completion shells such as bash.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\Helper\\ProgressHelper":{"class":{"descriptions":{"short":"Create a progress bar using a supplied callback.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$io"],"optionals":["$config"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"The ConsoleIo instance to use."},"$config":{"type":"array","description":"The settings for this helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Shell\\Helper\\TableHelper":{"class":{"descriptions":{"short":"Create a visually pleasing ASCII art table\nfrom 2 dimensional array data.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$io"],"optionals":["$config"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"The ConsoleIo instance to use."},"$config":{"type":"array","description":"The settings for this helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\Shell\\I18nShell":{"class":{"descriptions":{"short":"Shell for I18N management.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\OrmCacheShell":{"class":{"descriptions":{"short":"ORM Cache Shell.","long":"Provides a CLI interface to the ORM metadata caching features.\nThis tool is intended to be used by deployment scripts so that you\ncan prevent thundering herd effects on the metadata cache when new\nversions of your application are deployed, or when migrations\nrequiring updated metadata are required."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\PluginShell":{"class":{"descriptions":{"short":"Shell for tasks related to plugins.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\RoutesShell":{"class":{"descriptions":{"short":"Provides interactive CLI tools for routing.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\ServerShell":{"class":{"descriptions":{"short":"built-in Server Shell","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\Task\\AssetsTask":{"class":{"descriptions":{"short":"Task for symlinking \/ copying plugin assets to app's webroot.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\Task\\CommandTask":{"class":{"descriptions":{"short":"Base class for Shell Command reflection.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\Task\\ExtractTask":{"class":{"descriptions":{"short":"Language string extractor","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\Task\\LoadTask":{"class":{"descriptions":{"short":"Task for loading plugins.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\Shell\\Task\\UnloadTask":{"class":{"descriptions":{"short":"Task for unloading plugins.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Cake\\TestSuite\\Fixture\\FixtureManager":{"class":{"descriptions":{"short":"A factory class to manage the life cycle of test fixtures","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\TestSuite\\Fixture\\TestFixture":{"class":{"descriptions":{"short":"Cake TestFixture is responsible for building and destroying tables to be used\nduring testing.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\TestSuite\\StringCompareTrait":{"class":{"descriptions":{"short":"Compare a string to the contents of a file","long":"Implementing objects are expected to modify the `$_compareBasePath` property\nbefore use."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\TestSuite\\Stub\\ConsoleOutput":{"class":{"descriptions":{"short":"StubOutput makes testing shell commands\/shell helpers easier.","long":"You can use this class by injecting it into a ConsoleIo instance\nthat your command\/task\/helper uses:\n\n```\nuse Cake\\Console\\ConsoleIo;\nuse Cake\\TestSuite\\Stub\\ConsoleOutput;\n\n$output = new ConsoleOutput();\n$io = new ConsoleIo($output);\n```"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$stream"],"docParameters":{"$stream":{"type":"string","description":"The identifier of the stream to write output to."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct the output object.","long":"Checks for a pretty console environment. Ansicon and ConEmu allows\npretty consoles on windows, and is supported."},"deprecated":false}}}},"Cake\\TestSuite\\Stub\\Response":{"class":{"descriptions":{"short":"A response class intended for test cases.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"list of parameters to setup the response. Possible values are: - body: the response text that should be sent to the client - statusCodes: additional allowable response codes - status: the HTTP status code to respond with - type: a complete mime-type string or an extension mapped in this class - charset: the charset for the response body"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\ArticlesFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\ArticlesTagsFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\AttachmentsFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\AuthUsersFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\AuthorsFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\AuthorsTagsFixture":{"class":{"descriptions":{"short":"AuthorsTags fixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\CakeSessionsFixture":{"class":{"descriptions":{"short":"Class SessionFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\CategoriesFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\CommentsFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\CompositeIncrementsFixture":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\CounterCacheCategoriesFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\CounterCachePostsFixture":{"class":{"descriptions":{"short":"Counter Cache Test Fixtures","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\CounterCacheUserCategoryPostsFixture":{"class":{"descriptions":{"short":"CounterCache test fixture for testing binding keys.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\CounterCacheUsersFixture":{"class":{"descriptions":{"short":"Short description for class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\FeaturedTagsFixture":{"class":{"descriptions":{"short":"Class FeaturedTagsFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\GroupsFixture":{"class":{"descriptions":{"short":"Class GroupsFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\GroupsMembersFixture":{"class":{"descriptions":{"short":"Class GroupsMembersFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\MembersFixture":{"class":{"descriptions":{"short":"Class MembersFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\MenuLinkTreesFixture":{"class":{"descriptions":{"short":"Class NumberTreeFixture","long":"Generates a tree of data for use testing the tree behavior"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\NumberTreesFixture":{"class":{"descriptions":{"short":"Class NumberTreeFixture","long":"Generates a tree of data for use testing the tree behavior"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\OrdersFixture":{"class":{"descriptions":{"short":"Class OrdersFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\PolymorphicTaggedFixture":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\PostsFixture":{"class":{"descriptions":{"short":"Class PostFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\ProductsFixture":{"class":{"descriptions":{"short":"Class ProductsFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\SessionsFixture":{"class":{"descriptions":{"short":"Class SessionFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\SiteArticlesFixture":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\SiteArticlesTagsFixture":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\SiteAuthorsFixture":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\SiteTagsFixture":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\SpecialTagsFixture":{"class":{"descriptions":{"short":"A fixture for a join table containing additional data","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\TagsFixture":{"class":{"descriptions":{"short":"Class TagFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\TagsTranslationsFixture":{"class":{"descriptions":{"short":"Class TagsTranslationsFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\TestPluginCommentsFixture":{"class":{"descriptions":{"short":"Class TestPluginCommentFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\ThingsFixture":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\TranslatesFixture":{"class":{"descriptions":{"short":"Class TranslateFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\UsersFixture":{"class":{"descriptions":{"short":"Class UserFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\UuiditemsFixture":{"class":{"descriptions":{"short":"Class UuiditemFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Test\\Fixture\\UuidportfoliosFixture":{"class":{"descriptions":{"short":"Class UuidportfolioFixture","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":{"\\Cake\\Core\\Exception\\Exception":"on invalid datasource usage."},"return":{"type":"self","description":null},"descriptions":{"short":"Instantiate the fixture.","long":""},"deprecated":false}}}},"Cake\\Utility\\CookieCryptTrait":{"class":{"descriptions":{"short":"Cookie Crypt Trait.","long":"Provides the encrypt\/decrypt logic for the CookieComponent."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Utility\\Crypto\\Mcrypt":{"class":{"descriptions":{"short":"Mcrypt implementation of crypto features for Cake\\Utility\\Security","long":"This class is not intended to be used directly and should only\nbe used in the context of Cake\\Utility\\Security."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Utility\\Crypto\\OpenSsl":{"class":{"descriptions":{"short":"OpenSSL implementation of crypto features for Cake\\Utility\\Security","long":"OpenSSL should be favored over mcrypt as it is actively maintained and\nmore widely available.\n\nThis class is not intended to be used directly and should only\nbe used in the context of Cake\\Utility\\Security."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Utility\\Exception\\XmlException":{"class":{"descriptions":{"short":"Exception class for Xml.  This exception will be thrown from Xml when it\nencounters an error.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Cake\\Utility\\Hash":{"class":{"descriptions":{"short":"Library of array functions for manipulating and extracting data\nfrom arrays or 'sets' of data.","long":"`Hash` provides an improved interface, more consistent and\npredictable set of features over `Set`. While it lacks the spotty\nsupport for pseudo Xpath, its more fully featured dot notation provides\nsimilar features in a more consistent implementation."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Utility\\Inflector":{"class":{"descriptions":{"short":"Pluralize and singularize English words.","long":"Inflector pluralizes and singularizes English nouns.\nUsed by CakePHP's naming conventions throughout the framework."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Utility\\MergeVariablesTrait":{"class":{"descriptions":{"short":"Provides features for merging object properties recursively with\nparent classes.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Utility\\Security":{"class":{"descriptions":{"short":"Security Library contains utility methods related to security","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Utility\\Text":{"class":{"descriptions":{"short":"Text handling methods.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Utility\\Xml":{"class":{"descriptions":{"short":"XML handling for CakePHP.","long":"The methods in these classes enable the datasources that use XML to work."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Validation\\RulesProvider":{"class":{"descriptions":{"short":"A Proxy class used to remove any extra arguments when the user intended to call\na method in another class that is not aware of validation providers signature","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$class"],"docParameters":{"$class":{"type":"string","description":"the default class to proxy"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor, sets the default class to use for calling methods","long":""},"deprecated":false}}}},"Cake\\Validation\\ValidatableInterface":{"class":{"descriptions":{"short":"Describes objects that can be validated by passing a Validator object.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Validation\\Validation":{"class":{"descriptions":{"short":"Validation Class. Used for validation of model data","long":"Offers different validation methods."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Validation\\ValidationRule":{"class":{"descriptions":{"short":"ValidationRule object. Represents a validation method, error message and\nrules for applying such method to a field.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$validator"],"docParameters":{"$validator":{"type":"array","description":"[optional] The validator properties"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Validation\\ValidationSet":{"class":{"descriptions":{"short":"ValidationSet object. Holds all validation rules for a field and exposes\nmethods to dynamically add or remove validation rules","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\Validation\\Validator":{"class":{"descriptions":{"short":"Validator object encapsulates all methods related to data validations for a model\nIt also provides an API to dynamically change validation rules for each model field.","long":"Implements ArrayAccess to easily modify rules in the set"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\Validation\\ValidatorAwareTrait":{"class":{"descriptions":{"short":"A trait that provides methods for building and\ninteracting with Validators.","long":"This trait is useful when building ORM like features where\nthe implementing class wants to build and customize a variety\nof validator instances.\n\nThis trait expects that classes including it define two constants:\n\n- `DEFAULT_VALIDATOR` - The default validator name.\n- `VALIDATOR_PROVIDER_NAME ` - The provider name the including class is assigned\nin validators.\n\nIf the including class also implements events the `Model.buildValidator` event\nwill be triggered when validators are created."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\AjaxView":{"class":{"descriptions":{"short":"A view class that is used for AJAX responses.\nCurrently only switches the default layout and sets the response type - which just maps to\ntext\/html by default.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$viewOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"The request object."},"$response":{"type":"\\Cake\\Network\\Response","description":"The response object."},"$eventManager":{"type":"\\Cake\\Event\\EventManager","description":"Event manager object."},"$viewOptions":{"type":"array","description":"View options."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\Cell":{"class":{"descriptions":{"short":"Cell base.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$cellOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"The request to use in the cell."},"$response":{"type":"\\Cake\\Network\\Response","description":"The response to use in the cell."},"$eventManager":{"type":"\\Cake\\Event\\EventManager","description":"The eventManager to bind events to."},"$cellOptions":{"type":"array","description":"Cell options to apply."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\CellTrait":{"class":{"descriptions":{"short":"Provides cell() method for usage in Controller and View classes.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\Exception\\MissingCellException":{"class":{"descriptions":{"short":"Used when a cell class file cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\View\\Exception\\MissingCellViewException":{"class":{"descriptions":{"short":"Used when a view file for a cell cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\View\\Exception\\MissingElementException":{"class":{"descriptions":{"short":"Used when an element file cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\View\\Exception\\MissingHelperException":{"class":{"descriptions":{"short":"Used when a helper cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\View\\Exception\\MissingLayoutException":{"class":{"descriptions":{"short":"Used when a layout file cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\View\\Exception\\MissingTemplateException":{"class":{"descriptions":{"short":"Used when a template file cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\View\\Exception\\MissingViewException":{"class":{"descriptions":{"short":"Used when a view class file cannot be found.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous"],"docParameters":{"$message":{"type":"string|array","description":"Either the string of the error message, or an array of attributes that are made available in the view, and sprintf()'d into Exception::$_messageTemplate"},"$code":{"type":"int","description":"The code of the error, is also the HTTP status code for the error."},"$previous":{"type":"\\Exception","description":"the previous exception."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Allows you to create exceptions that are treated as framework errors and disabled\nwhen debug = 0."},"deprecated":false}}}},"Cake\\View\\Form\\ArrayContext":{"class":{"descriptions":{"short":"Provides a basic array based context provider for FormHelper.","long":"This adapter is useful in testing or when you have forms backed by\nsimple array data structures.\n\nImportant keys:\n\n- `defaults` The default values for fields. These values\nwill be used when there is no request data set. Data should be nested following\nthe dot separated paths you access your fields with.\n- `required` A nested array of fields, relationships and boolean\nflags to indicate a field is required.\n- `schema` An array of data that emulate the column structures that\nCake\\Database\\Schema\\Table uses. This array allows you to control\nthe inferred type for fields and allows auto generation of attributes\nlike maxlength, step and other HTML attributes. If you want\nprimary key\/id detection to work. Make sure you have provided a `_constraints`\narray that contains `primary`. See below for an example.\n- `errors` An array of validation errors. Errors should be nested following\nthe dot separated paths you access your fields with.\n\n### Example\n\n```\n$data = [\n'schema' => [\n'id' => ['type' => 'integer'],\n'title' => ['type' => 'string', 'length' => 255],\n'_constraints' => [\n'primary' => ['type' => 'primary', 'columns' => ['id']]\n]\n],\n'defaults' => [\n'id' => 1,\n'title' => 'First post!',\n]\n];\n```"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$request","$context"],"optionals":[],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"The request object."},"$context":{"type":"array","description":"Context info."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Form\\ContextInterface":{"class":{"descriptions":{"short":"Interface for FormHelper context implementations.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\Form\\EntityContext":{"class":{"descriptions":{"short":"Provides a form context around a single entity and its relations.\nIt also can be used as context around an array or iterator of entities.","long":"This class lets FormHelper interface with entities or collections\nof entities.\n\nImportant Keys:\n\n- `entity` The entity this context is operating on.\n- `table` Either the ORM\\Table instance to fetch schema\/validators\nfrom, an array of table instances in the case of a form spanning\nmultiple entities, or the name(s) of the table.\nIf this is null the table name(s) will be determined using naming\nconventions.\n- `validator` Either the Validation\\Validator to use, or the name of the\nvalidation method to call on the table object. For example 'default'.\nDefaults to 'default'. Can be an array of table alias=>validators when\ndealing with associated forms."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$request","$context"],"optionals":[],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"The request object."},"$context":{"type":"array","description":"Context info."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Form\\FormContext":{"class":{"descriptions":{"short":"Provides a context provider for Cake\\Form\\Form instances.","long":"This context provider simply fulfils the interface requirements\nthat FormHelper has and allows access to the request data."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$request","$context"],"optionals":[],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"The request object."},"$context":{"type":"array","description":"Context info."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Form\\NullContext":{"class":{"descriptions":{"short":"Provides a context provider that does nothing.","long":"This context provider simply fulfils the interface requirements\nthat FormHelper has and allows access to the request data."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$request","$context"],"optionals":[],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"The request object."},"$context":{"type":"array","description":"Context info."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Helper":{"class":{"descriptions":{"short":"Abstract base class for all other Helpers in CakePHP.\nProvides common methods and features.","long":"### Callback methods\n\nHelpers support a number of callback methods. These callbacks allow you to hook into\nthe various view lifecycle events and either modify existing view content or perform\nother application specific logic. The events are not implemented by this base class, as\nimplementing a callback method subscribes a helper to the related event. The callback methods\nare as follows:\n\n- `beforeRender(Event $event, $viewFile)` - beforeRender is called before the view file is rendered.\n- `afterRender(Event $event, $viewFile)` - afterRender is called after the view file is rendered\nbut before the layout has been rendered.\n- beforeLayout(Event $event, $layoutFile)` - beforeLayout is called before the layout is rendered.\n- `afterLayout(Event $event, $layoutFile)` - afterLayout is called after the layout has rendered.\n- `beforeRenderFile(Event $event, $viewFile)` - Called before any view fragment is rendered.\n- `afterRenderFile(Event $event, $viewFile, $content)` - Called after any view fragment is rendered.\nIf a listener returns a non-null value, the output of the rendered file will be set to that."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"Cake\\View\\HelperRegistry":{"class":{"descriptions":{"short":"HelperRegistry is used as a registry for loaded helpers and handles loading\nand constructing helper class objects.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$view"],"optionals":[],"docParameters":{"$view":{"type":"\\Cake\\View\\View","description":"View object."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\Helper\\FlashHelper":{"class":{"descriptions":{"short":"FlashHelper class to render flash messages.","long":"After setting messages in your controllers with FlashComponent, you can use\nthis class to output your flash messages in your views."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"Cake\\View\\Helper\\FormHelper":{"class":{"descriptions":{"short":"Form helper library.","long":"Automatic generation of HTML FORMs from given data."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct the widgets and binds the default context providers","long":""},"deprecated":false}}}},"Cake\\View\\Helper\\HtmlHelper":{"class":{"descriptions":{"short":"Html Helper class for easy use of HTML widgets.","long":"HtmlHelper encloses all methods needed while working with HTML pages."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"### Settings\n\n- `templates` Either a filename to a config containing templates.\nOr an array of templates to load. See Cake\\View\\StringTemplate for\ntemplate formatting.\n\n### Customizing tag sets\n\nUsing the `templates` option you can redefine the tag HtmlHelper will use."},"deprecated":false}}}},"Cake\\View\\Helper\\IdGeneratorTrait":{"class":{"descriptions":{"short":"A trait that provides id generating methods to be\nused in various widget classes.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\Helper\\NumberHelper":{"class":{"descriptions":{"short":"Number helper library.","long":"Methods to make numbers more readable."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper"}},"throws":{"\\Cake\\Core\\Exception\\Exception":"When the engine class could not be found."},"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":"### Settings:\n\n- `engine` Class name to use to replace Cake\\I18n\\Number functionality\nThe class needs to be placed in the `Utility` directory."},"deprecated":false}}}},"Cake\\View\\Helper\\PaginatorHelper":{"class":{"descriptions":{"short":"Pagination Helper class for easy generation of pagination links.","long":"PaginationHelper encloses all methods needed when working with pagination."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor. Overridden to merge passed args with URL options.","long":""},"deprecated":false}}}},"Cake\\View\\Helper\\RssHelper":{"class":{"descriptions":{"short":"RSS Helper class for easy output RSS structures.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"Cake\\View\\Helper\\SecureFieldTokenTrait":{"class":{"descriptions":{"short":"Provides methods for building token data that is\ncompatible with SecurityComponent.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\Helper\\SessionHelper":{"class":{"descriptions":{"short":"Session Helper.","long":"Session reading from the view."},"deprecated":true},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\Helper\\TextHelper":{"class":{"descriptions":{"short":"Text helper library.","long":"Text manipulations: Highlight, excerpt, truncate, strip of links, convert email addresses to mailto: links..."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"the view object the helper is attached to."},"$config":{"type":"array","description":"Settings array Settings array"}},"throws":{"\\Cake\\Core\\Exception\\Exception":"when the engine class could not be found."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"### Settings:\n\n- `engine` Class name to use to replace String functionality.\nThe class needs to be placed in the `Utility` directory."},"deprecated":false}}}},"Cake\\View\\Helper\\TimeHelper":{"class":{"descriptions":{"short":"Time Helper class for easy use of time data.","long":"Manipulation of time data."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"Cake\\View\\Helper\\UrlHelper":{"class":{"descriptions":{"short":"UrlHelper class for generating urls.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"Cake\\View\\JsonView":{"class":{"descriptions":{"short":"A view class that is used for JSON responses.","long":"It allows you to omit templates if you just need to emit JSON string as response.\n\nIn your controller, you could do the following:\n\n```\n$this->set(['posts' => $posts]);\n$this->set('_serialize', true);\n```\n\nWhen the view is rendered, the `$posts` view variable will be serialized\ninto JSON.\n\nYou can also set multiple view variables for serialization. This will create\na top level object containing all the named view variables:\n\n```\n$this->set(compact('posts', 'users', 'stuff'));\n$this->set('_serialize', true);\n```\n\nThe above would generate a JSON object that looks like:\n\n`{\"posts\": [...], \"users\": [...]}`\n\nYou can also set `'_serialize'` to a string or array to serialize only the\nspecified view variables.\n\nIf you don't use the `_serialize`, you will need a view template. You can use\nextended views to provide layout-like functionality.\n\nYou can also enable JSONP support by setting parameter `_jsonp` to true or a\nstring to specify custom query string parameter name which will contain the\ncallback function name."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$viewOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response","description":"Response instance."},"$eventManager":{"type":"\\Cake\\Event\\EventManager","description":"EventManager instance."},"$viewOptions":{"type":"array","description":"An array of view options"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\SerializedView":{"class":{"descriptions":{"short":"Parent class for view classes generating serialized outputs like JsonView and XmlView.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$viewOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response","description":"Response instance."},"$eventManager":{"type":"\\Cake\\Event\\EventManager","description":"EventManager instance."},"$viewOptions":{"type":"array","description":"An array of view options"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\StringTemplate":{"class":{"descriptions":{"short":"Provides an interface for registering and inserting\ncontent into simple logic-less string templates.","long":"Used by several helpers to provide simple flexible templates\nfor generating HTML and other content."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"A set of templates to add."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\StringTemplateTrait":{"class":{"descriptions":{"short":"Adds string template functionality to any class by providing methods to\nload and parse string templates.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\View":{"class":{"descriptions":{"short":"View, the V in the MVC triad. View interacts with Helpers and view variables passed\nin from the controller to render the results of the controller action. Often this is HTML,\nbut can also take the form of JSON, XML, PDF's or streaming files.","long":"CakePHP uses a two-step-view pattern. This means that the template content is rendered first,\nand then inserted into the selected layout. This also means you can pass data from the template to the\nlayout using `$this->set()`\n\nView class supports using plugins as themes. You can set\n\n```\npublic function beforeRender(\\Cake\\Event\\Event $event)\n{\n$this->viewBuilder()->theme('SuperHot');\n}\n```\n\nin your Controller to use plugin `SuperHot` as a theme. Eg. If current action\nis PostsController::index() then View class will look for template file\n`plugins\/SuperHot\/Template\/Posts\/index.ctp`. If a theme template\nis not found for the current action the default app template file is used."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$viewOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response instance."},"$eventManager":{"type":"\\Cake\\Event\\EventManager|null","description":"Event manager instance."},"$viewOptions":{"type":"array","description":"View options. See View::$_passedVars for list of options which get set as class properties."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\ViewBlock":{"class":{"descriptions":{"short":"ViewBlock implements the concept of Blocks or Slots in the View layer.\nSlots or blocks are combined with extending views and layouts to afford slots\nof content that are present in a layout or parent view, but are defined by the child\nview or elements used in the view.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\ViewBuilder":{"class":{"descriptions":{"short":"Provides an API for iteratively building a view up.","long":"Once you have configured the view and established all the context\nyou can create a view instance with `build()`."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\ViewVarsTrait":{"class":{"descriptions":{"short":"Provides the set() method for collecting template context.","long":"Once collected context data can be passed to another object.\nThis is done in Controller, TemplateTask and View for example."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\Widget\\BasicWidget":{"class":{"descriptions":{"short":"Basic input class.","long":"This input class can be used to render basic simple\ninput elements like hidden, text, email, tel and other\ntypes."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Widget\\ButtonWidget":{"class":{"descriptions":{"short":"Button input class","long":"This input class can be used to render button elements.\nIf you need to make basic submit inputs with type=submit,\nuse the Basic input widget."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Widget\\CheckboxWidget":{"class":{"descriptions":{"short":"Input widget for creating checkbox widgets.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Widget\\DateTimeWidget":{"class":{"descriptions":{"short":"Input widget class for generating a date time input widget.","long":"This class is intended as an internal implementation detail\nof Cake\\View\\Helper\\FormHelper and is not intended for direct use."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates","$selectBox"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."},"$selectBox":{"type":"\\Cake\\View\\Widget\\SelectBoxWidget","description":"Selectbox widget instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\Widget\\FileWidget":{"class":{"descriptions":{"short":"Input widget class for generating a file upload control.","long":"This class is intended as an internal implementation detail\nof Cake\\View\\Helper\\FormHelper and is not intended for direct use."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\Widget\\LabelWidget":{"class":{"descriptions":{"short":"Form 'widget' for creating labels.","long":"Generally this element is used by other widgets,\nand FormHelper itself."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"This class uses the following template:\n\n- `label` Used to generate the label for a radio button.\nCan use the following variables `attrs`, `text` and `input`."},"deprecated":false}}}},"Cake\\View\\Widget\\MultiCheckboxWidget":{"class":{"descriptions":{"short":"Input widget class for generating multiple checkboxes.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates","$label"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."},"$label":{"type":"\\Cake\\View\\Widget\\LabelWidget","description":"Label widget instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Render multi-checkbox widget.","long":"This class uses the following templates:\n\n- `checkbox` Renders checkbox input controls. Accepts\nthe `name`, `value` and `attrs` variables.\n- `checkboxWrapper` Renders the containing div\/element for\na checkbox and its label. Accepts the `input`, and `label`\nvariables."},"deprecated":false}}}},"Cake\\View\\Widget\\NestingLabelWidget":{"class":{"descriptions":{"short":"Form 'widget' for creating labels that contain their input.","long":"Generally this element is used by other widgets,\nand FormHelper itself."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"This class uses the following template:\n\n- `label` Used to generate the label for a radio button.\nCan use the following variables `attrs`, `text` and `input`."},"deprecated":false}}}},"Cake\\View\\Widget\\RadioWidget":{"class":{"descriptions":{"short":"Input widget class for generating a set of radio buttons.","long":"This class is intended as an internal implementation detail\nof Cake\\View\\Helper\\FormHelper and is not intended for direct use."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates","$label"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."},"$label":{"type":"\\Cake\\View\\Widget\\LabelWidget","description":"Label widget instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"This class uses a few templates:\n\n- `radio` Used to generate the input for a radio button.\nCan use the following variables `name`, `value`, `attrs`.\n- `radioWrapper` Used to generate the container element for\nthe radio + input element. Can use the `input` and `label`\nvariables."},"deprecated":false}}}},"Cake\\View\\Widget\\SelectBoxWidget":{"class":{"descriptions":{"short":"Input widget class for generating a selectbox.","long":"This class is intended as an internal implementation detail\nof Cake\\View\\Helper\\FormHelper and is not intended for direct use."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Widget\\TextareaWidget":{"class":{"descriptions":{"short":"Input widget class for generating a textarea control.","long":"This class is intended as an internal implementation detail\nof Cake\\View\\Helper\\FormHelper and is not intended for direct use."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates"],"optionals":[],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates list."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Cake\\View\\Widget\\WidgetInterface":{"class":{"descriptions":{"short":"Interface for input widgets.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Cake\\View\\Widget\\WidgetRegistry":{"class":{"descriptions":{"short":"A registry\/factory for input widgets.","long":"Can be used by helpers\/view logic to build form widgets\nand other HTML widgets.\n\nThis class handles the mapping between names and concrete classes.\nIt also has a basic name based dependency resolver that allows\nwidgets to depend on each other.\n\nEach widget should expect a StringTemplate instance as their first\nargument. All other dependencies will be included after.\n\nWidgets can ask for the current view by using the `_view` widget."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$templates","$view"],"optionals":["$widgets"],"docParameters":{"$templates":{"type":"\\Cake\\View\\StringTemplate","description":"Templates instance to use."},"$view":{"type":"\\Cake\\View\\View","description":"The view instance to set as a widget."},"$widgets":{"type":"string|array","description":"See add() method for more information."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Cake\\View\\XmlView":{"class":{"descriptions":{"short":"A view class that is used for creating XML responses.","long":"By setting the '_serialize' key in your controller, you can specify a view variable\nthat should be serialized to XML and used as the response for the request.\nThis allows you to omit views + layouts, if your just need to emit a single view\nvariable as the XML response.\n\nIn your controller, you could do the following:\n\n```\n$this->set(['posts' => $posts, '_serialize' => true]);\n```\n\nWhen the view is rendered, the `$posts` view variable will be serialized\ninto XML.\n\n**Note** The view variable you specify must be compatible with Xml::fromArray().\n\nYou can also define `'_serialize'` as an array. This will create an additional\ntop level element named `<response>` containing all the named view variables:\n\n```\n$this->set(compact('posts', 'users', 'stuff'));\n$this->set('_serialize', true);\n```\n\nThe above would generate a XML object that looks like:\n\n`<response><posts>...<\/posts><users>...<\/users><\/response>`\n\nYou can also set `'_serialize'` to a string or array to serialize only the\nspecified view variables.\n\nIf you don't use the `_serialize` key, you will need a view. You can use extended\nviews to provide layout like functionality."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$eventManager","$viewOptions"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request","description":"Request instance."},"$response":{"type":"\\Cake\\Network\\Response","description":"Response instance."},"$eventManager":{"type":"\\Cake\\Event\\EventManager","description":"EventManager instance."},"$viewOptions":{"type":"array","description":"An array of view options"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"DebugKit\\Cache\\Engine\\DebugEngine":{"class":{"descriptions":{"short":"A spying proxy for cache engines.","long":"Used by the CachePanel to wrap and track metrics related to caching."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$config"],"optionals":[],"docParameters":{"$config":{"type":"mixed","description":"Config data or the proxied adapter."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"DebugKit\\Controller\\Component\\ToolbarComponent":{"class":{"descriptions":{"short":"Class ToolbarComponent","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$registry"],"optionals":["$settings"],"docParameters":{"$registry":{"type":"\\Cake\\Controller\\ComponentRegistry","description":"The ComponentRegistry"},"$settings":{"type":"array","description":"An array of config"}},"throws":{"\\RuntimeException":""},"return":{"type":"void","description":""},"descriptions":{"short":"Constructor","long":"If debug is off the component will be disabled and not do any further time tracking\nor load the toolbar helper."},"deprecated":false}}}},"DebugKit\\Controller\\PanelsController":{"class":{"descriptions":{"short":"Provides access to panel data.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$name","$eventManager","$components"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request object for this controller. Can be null for testing, but expect that features that use the request parameters will not work."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response object for this controller."},"$name":{"type":"string|null","description":"Override the name useful in testing when using mocks."},"$eventManager":{"type":"\\Cake\\Event\\EventManager|null","description":"The event manager. Defaults to a new instance."},"$components":{"type":"\\Cake\\Controller\\ComponentRegistry|null","description":"The component registry. Defaults to a new instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Sets a number of properties based on conventions if they are empty. To override the\nconventions CakePHP uses you can define properties in your class declaration."},"deprecated":false}}}},"DebugKit\\Controller\\RequestsController":{"class":{"descriptions":{"short":"Provides access to panel data.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$name","$eventManager","$components"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request object for this controller. Can be null for testing, but expect that features that use the request parameters will not work."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response object for this controller."},"$name":{"type":"string|null","description":"Override the name useful in testing when using mocks."},"$eventManager":{"type":"\\Cake\\Event\\EventManager|null","description":"The event manager. Defaults to a new instance."},"$components":{"type":"\\Cake\\Controller\\ComponentRegistry|null","description":"The component registry. Defaults to a new instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Sets a number of properties based on conventions if they are empty. To override the\nconventions CakePHP uses you can define properties in your class declaration."},"deprecated":false}}}},"DebugKit\\Controller\\ToolbarController":{"class":{"descriptions":{"short":"Provides utility features need by the toolbar.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$request","$response","$name","$eventManager","$components"],"docParameters":{"$request":{"type":"\\Cake\\Network\\Request|null","description":"Request object for this controller. Can be null for testing, but expect that features that use the request parameters will not work."},"$response":{"type":"\\Cake\\Network\\Response|null","description":"Response object for this controller."},"$name":{"type":"string|null","description":"Override the name useful in testing when using mocks."},"$eventManager":{"type":"\\Cake\\Event\\EventManager|null","description":"The event manager. Defaults to a new instance."},"$components":{"type":"\\Cake\\Controller\\ComponentRegistry|null","description":"The component registry. Defaults to a new instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"Sets a number of properties based on conventions if they are empty. To override the\nconventions CakePHP uses you can define properties in your class declaration."},"deprecated":false}}}},"DebugKit\\Database\\Log\\DebugLog":{"class":{"descriptions":{"short":"DebugKit Query logger.","long":"This logger decorates the existing logger if it exists,\nand stores log messages internally so they can be displayed\nor stored for future use."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$logger","$name"],"optionals":[],"docParameters":{"$logger":{"type":"Cake\\Database\\Log\\QueryLogger","description":"The logger to decorate and spy on."},"$name":{"type":"string","description":"The name of the connection being logged."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"DebugKit\\DebugMemory":{"class":{"descriptions":{"short":"Contains methods for Profiling memory usage.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\DebugPanel":{"class":{"descriptions":{"short":"Base class for debug panels.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\DebugTimer":{"class":{"descriptions":{"short":"Contains methods for Profiling and creating timers.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Log\\Engine\\DebugKitLog":{"class":{"descriptions":{"short":"A CakeLog listener which saves having to munge files or other configured loggers.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Configuration array"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"__construct method","long":""},"deprecated":false}}}},"DebugKit\\Model\\Behavior\\TimedBehavior":{"class":{"descriptions":{"short":"Class TimedBehavior","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$table"],"optionals":["$config"],"docParameters":{"$table":{"type":"\\Cake\\ORM\\Table","description":"The table this behavior is attached to."},"$config":{"type":"array","description":"The config for this behavior."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"Merges config with the default and store in the config property"},"deprecated":false}}}},"DebugKit\\Model\\Entity\\Panel":{"class":{"descriptions":{"short":"Panel entity class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$properties","$options"],"docParameters":{"$properties":{"type":"array","description":"hash of properties to set in this entity"},"$options":{"type":"array","description":"list of options to use when creating this entity"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes the internal properties of this entity out of the\nkeys in an array. The following list of options can be used:","long":"- useSetters: whether use internal setters for properties or not\n- markClean: whether to mark all properties as clean after setting them\n- markNew: whether this instance has not yet been persisted\n- guard: whether to prevent inaccessible properties from being set (default: false)\n- source: A string representing the alias of the repository this entity came from\n\n### Example:\n\n```\n$entity = new Entity(['id' => 1, 'name' => 'Andrew'])\n```"},"deprecated":false}}}},"DebugKit\\Model\\Table\\LazyTableTrait":{"class":{"descriptions":{"short":"A set of methods for building a database table when it is missing.","long":"Because the debugkit doesn't come with a pre-built SQLite database,\nwe'll need to make it as we need it.\n\nThis trait lets us dump fixture schema into a given database at runtime."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Model\\Table\\PanelsTable":{"class":{"descriptions":{"short":"The panels table collects the information for each panel on\neach request.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"DebugKit\\Model\\Table\\RequestsTable":{"class":{"descriptions":{"short":"The requests table tracks basic information about each request.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"List of options for this table"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes a new instance","long":"The $config array understands the following keys:\n\n- table: Name of the database table to represent\n- alias: Alias to be assigned to this table (default to table name)\n- connection: The connection instance to use\n- entityClass: The fully namespaced class name of the entity class that will\nrepresent rows in this table.\n- schema: A \\Cake\\Database\\Schema\\Table object or an array that can be\npassed to it.\n- eventManager: An instance of an event manager to use for internal events\n- behaviors: A BehaviorRegistry. Generally not used outside of tests.\n- associations: An AssociationCollection instance.\n- validator: A Validator instance which is assigned as the \"default\"\nvalidation set, or an associative array, where key is the name of the\nvalidation set and value the Validator instance."},"deprecated":false}}}},"DebugKit\\Panel\\CachePanel":{"class":{"descriptions":{"short":"A panel for spying on cache engines.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Panel\\EnvironmentPanel":{"class":{"descriptions":{"short":"Provides information about your PHP and CakePHP environment to assist with debugging.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Panel\\HistoryPanel":{"class":{"descriptions":{"short":"Provides debug information on previous requests.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Panel\\IncludePanel":{"class":{"descriptions":{"short":"Provides a list of included files for the current request","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Get a list of plugins on construct for later use","long":""},"deprecated":false}}}},"DebugKit\\Panel\\LogPanel":{"class":{"descriptions":{"short":"Log Panel - Reads log entries made this request.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Panel\\PanelRegistry":{"class":{"descriptions":{"short":"Registry object for panels.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$events"],"optionals":[],"docParameters":{"$events":{"type":"\\Cake\\Event\\EventManager","description":"Event Manager that panels should bind to. Typically this is the global manager."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"DebugKit\\Panel\\RequestPanel":{"class":{"descriptions":{"short":"Provides debug information on the Current request params.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Panel\\SessionPanel":{"class":{"descriptions":{"short":"Provides debug information on the Session contents.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Panel\\SqlLogPanel":{"class":{"descriptions":{"short":"Provides debug information on the SQL logs and provides links to an ajax explain interface.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Panel\\TimerPanel":{"class":{"descriptions":{"short":"Provides debug information on all timers used in a request.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Panel\\VariablesPanel":{"class":{"descriptions":{"short":"Provides debug information on the View variables.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DebugKit\\Routing\\Filter\\DebugBarFilter":{"class":{"descriptions":{"short":"Toolbar injector filter.","long":"This class loads all the panels into the registry\nand binds the correct events into the provided event\nmanager"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$events","$config"],"optionals":[],"docParameters":{"$events":{"type":"\\Cake\\Event\\EventManager","description":"The event manager to use."},"$config":{"type":"array","description":"The configuration data for DebugKit."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"DebugKit\\Shell\\BenchmarkShell":{"class":{"descriptions":{"short":"Benchmark Shell Class","long":"Provides basic benchmarking of application requests\nfunctionally similar to Apache AB"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"DebugKit\\Shell\\WhitespaceShell":{"class":{"descriptions":{"short":"Whitespace shell. Helps find and trim whitespace from files.","long":"Based on jperras' shell found at http:\/\/bin.cakephp.org\/view\/626544881"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"DebugKit\\View\\Helper\\SimpleGraphHelper":{"class":{"descriptions":{"short":"Class SimpleGraphHelper","long":"Allows creation and display of extremely simple graphing elements"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"DebugKit\\View\\Helper\\TidyHelper":{"class":{"descriptions":{"short":"TidyHelper class","long":"Passes html through tidy on the command line, and reports markup errors"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"DebugKit\\View\\Helper\\ToolbarHelper":{"class":{"descriptions":{"short":"Provides Base methods for content specific debug toolbar helpers.\nActs as a facade for other toolbars helpers as well.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Default Constructor","long":""},"deprecated":false}}}},"Detection\\MobileDetect":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$headers","$userAgent"],"docParameters":{"$headers":{"type":"array","description":"Specify the headers as injection. Should be PHP _SERVER flavored. If left empty, will use the global _SERVER['HTTP_*'] vars instead."},"$userAgent":{"type":"string","description":"Inject the User-Agent header. If null, will use HTTP_USER_AGENT from the $headers array instead."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct an instance of this class.","long":""},"deprecated":false}}}},"JakubOnderka\\PhpConsoleColor\\ConsoleColor":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"JakubOnderka\\PhpConsoleColor\\InvalidStyleException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$styleName"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"JakubOnderka\\PhpConsoleHighlighter\\Highlighter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$color"],"optionals":[],"docParameters":{"$color":{"type":"ConsoleColor","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Migrations\\AbstractMigration":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$version"],"optionals":[],"docParameters":{"$version":{"type":"int","description":"Migration Version"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Migrations\\CakeAdapter":{"class":{"descriptions":{"short":"Decorates an AdapterInterface in order to proxy some method to the actual\nconnection object.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$adapter","$connection"],"optionals":[],"docParameters":{"$adapter":{"type":"\\Phinx\\Db\\Adapter\\AdapterInterface","description":"The original adapter to decorate."},"$connection":{"type":"\\Cake\\Database\\Connection","description":"The connection to actually use."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Migrations\\CakeManager":{"class":{"descriptions":{"short":"Overrides Phinx Manager class in order to provide an interface\nfor running migrations within an app","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$config","$output"],"optionals":[],"docParameters":{"$config":{"type":"ConfigInterface","description":"Configuration Object"},"$output":{"type":"OutputInterface","description":"Console Output"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Migrations\\Command\\Create":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Migrations\\Command\\MarkMigrated":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Migrations\\Command\\Migrate":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Migrations\\Command\\Rollback":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Migrations\\Command\\Seed":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Migrations\\Command\\Status":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Migrations\\ConfigurationTrait":{"class":{"descriptions":{"short":"Contains a set of methods designed as overrides for\nthe methods in phinx that are responsible for reading the project configuration.\nThis is needed so that we can use the application configuration instead of having\na configuration yaml file.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Migrations\\Migrations":{"class":{"descriptions":{"short":"The Migrations class is responsible for handling migrations command\nwithin an none-shell application.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$default"],"docParameters":{"$default":{"type":"array","description":"Default option to be used when calling a method. Available options are : - `connection` The datasource connection to use - `source` The folder where migrations are in - `plugin` The plugin containing the migrations"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":""},"deprecated":false}}}},"Migrations\\MigrationsDispatcher":{"class":{"descriptions":{"short":"Used to register all supported subcommand in order to make\nthem executable by the Symfony Console component","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$version"],"optionals":[],"docParameters":{"$version":{"type":"string","description":"The Application Version"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":"Initialize the Phinx console application."},"deprecated":false}}}},"Migrations\\Shell\\MigrationsShell":{"class":{"descriptions":{"short":"A wrapper shell for phinx migrations, used to inject our own\nconsole actions so that database configuration already defined\nfor the application can be reused.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\CommandTask":{"class":{"descriptions":{"short":"Base Task that Migrations subcommands Task class should extend.\nIt implements the getOptionParser method that defines the common options\nfor all subcommands.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\CreateTask":{"class":{"descriptions":{"short":"This task class is needed in order to provide a correct autocompletion feature\nwhen using the CakePHP migrations shell plugin. It has no effect on the\nmigrations process.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\MarkMigratedTask":{"class":{"descriptions":{"short":"This task class is needed in order to provide a correct autocompletion feature\nwhen using the CakePHP migrations shell plugin. It has no effect on the\nmigrations process.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\MigrateTask":{"class":{"descriptions":{"short":"This task class is needed in order to provide a correct autocompletion feature\nwhen using the CakePHP migrations shell plugin. It has no effect on the\nmigrations process.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\MigrationSnapshotTask":{"class":{"descriptions":{"short":"Task class for generating migration snapshot files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\MigrationTask":{"class":{"descriptions":{"short":"Task class for generating migration snapshot files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\RollbackTask":{"class":{"descriptions":{"short":"This task class is needed in order to provide a correct autocompletion feature\nwhen using the CakePHP migrations shell plugin. It has no effect on the\nmigrations process.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\SeedTask":{"class":{"descriptions":{"short":"Task class for generating seed files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\SimpleMigrationTask":{"class":{"descriptions":{"short":"Task class for generating migration snapshot files.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Shell\\Task\\StatusTask":{"class":{"descriptions":{"short":"This task class is needed in order to provide a correct autocompletion feature\nwhen using the CakePHP migrations shell plugin. It has no effect on the\nmigrations process.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$io"],"docParameters":{"$io":{"type":"\\Cake\\Console\\ConsoleIo","description":"An io instance."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs this Shell instance.","long":""},"deprecated":false}}}},"Migrations\\Table":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$options","$adapter"],"docParameters":{"$name":{"type":"string","description":"Table Name"},"$options":{"type":"array","description":"Options"},"$adapter":{"type":"AdapterInterface","description":"Database Adapter"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constuctor.","long":""},"deprecated":false}}}},"Migrations\\Util\\ColumnParser":{"class":{"descriptions":{"short":"Utility class used to parse arguments passed to a ``bake migration`` class","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Migrations\\View\\Helper\\MigrationHelper":{"class":{"descriptions":{"short":"Migration Helper class for output of field data in migration files.","long":"MigrationHelper encloses all methods needed while working with HTML pages."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$View"],"optionals":["$config"],"docParameters":{"$View":{"type":"\\Cake\\View\\View","description":"The View this helper is being attached to."},"$config":{"type":"array","description":"Configuration settings for the helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor","long":"### Settings\n\n- `collection` \\Cake\\Database\\Schema\\Collection"},"deprecated":false}}}},"Mobile_Detect":{"class":{"descriptions":{"short":"Mobile Detect Library\n=====================","long":"Motto: \"Every business should have a mobile detection script to detect mobile readers\"\n\nMobile_Detect is a lightweight PHP class for detecting mobile devices (including tablets).\nIt uses the User-Agent string combined with specific HTTP headers to detect the mobile environment.\n\n@author      Current authors: Serban Ghita <serbanghita@gmail.com>\nNick Ilyin <nick.ilyin@gmail.com>\n\nOriginal author: Victor Stanciu <vic.stanciu@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$headers","$userAgent"],"docParameters":{"$headers":{"type":"array","description":"Specify the headers as injection. Should be PHP _SERVER flavored. If left empty, will use the global _SERVER['HTTP_*'] vars instead."},"$userAgent":{"type":"string","description":"Inject the User-Agent header. If null, will use HTTP_USER_AGENT from the $headers array instead."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct an instance of this class.","long":""},"deprecated":false}}}},"Phinx\\Config\\Config":{"class":{"descriptions":{"short":"Phinx configuration class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$configArray"],"optionals":["$configFilePath"],"docParameters":{"$configArray":{"type":"array","description":"Config Array"},"$configFilePath":{"type":"string","description":"Optional File Path"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor","long":""},"deprecated":false}}}},"Phinx\\Config\\ConfigInterface":{"class":{"descriptions":{"short":"Phinx configuration interface.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Console\\Command\\AbstractCommand":{"class":{"descriptions":{"short":"Abstract command, contains bootstrapping info","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\Command\\Create":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\Command\\Init":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\Command\\Migrate":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\Command\\Rollback":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\Command\\SeedCreate":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\Command\\SeedRun":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\Command\\Status":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\Command\\Test":{"class":{"descriptions":{"short":"@author Leonid Kuzmin <lndkuzmin@gmail.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Phinx\\Console\\PhinxApplication":{"class":{"descriptions":{"short":"Phinx console application.","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$version"],"docParameters":{"$version":{"type":"string","description":"The Application Version"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":"Initialize the Phinx console application."},"deprecated":false}}}},"Phinx\\Db\\Adapter\\AdapterFactory":{"class":{"descriptions":{"short":"Adapter factory and registry.","long":"Used for registering adapters and creating instances of adapters.\n\n@author Woody Gilk <woody.gilk@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Db\\Adapter\\AdapterInterface":{"class":{"descriptions":{"short":"Adapter Interface.","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Db\\Adapter\\AdapterWrapper":{"class":{"descriptions":{"short":"Adapter Wrapper.","long":"Proxy commands through to another adapter, allowing modification of\nparameters during calls.\n\n@author Woody Gilk <woody.gilk@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$adapter"],"optionals":[],"docParameters":{"$adapter":{"type":"AdapterInterface","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class constructor, must always wrap another adapter.","long":""},"deprecated":false}}}},"Phinx\\Db\\Adapter\\MysqlAdapter":{"class":{"descriptions":{"short":"Phinx MySQL Adapter.","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$options"],"optionals":["$output"],"docParameters":{"$options":{"type":"array","description":"Options"},"$output":{"type":"OutputInterface","description":"Output Interface"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Db\\Adapter\\PdoAdapter":{"class":{"descriptions":{"short":"Phinx PDO Adapter.","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$options"],"optionals":["$output"],"docParameters":{"$options":{"type":"array","description":"Options"},"$output":{"type":"OutputInterface","description":"Output Interface"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Db\\Adapter\\PostgresAdapter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$options"],"optionals":["$output"],"docParameters":{"$options":{"type":"array","description":"Options"},"$output":{"type":"OutputInterface","description":"Output Interface"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Db\\Adapter\\ProxyAdapter":{"class":{"descriptions":{"short":"Phinx Proxy Adapter.","long":"Used for recording migration commands to automatically reverse them.\n\n@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$adapter"],"optionals":[],"docParameters":{"$adapter":{"type":"AdapterInterface","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class constructor, must always wrap another adapter.","long":""},"deprecated":false}}}},"Phinx\\Db\\Adapter\\SQLiteAdapter":{"class":{"descriptions":{"short":"Phinx SQLite Adapter.","long":"@author Rob Morgan <robbym@gmail.com>\n@author Richard McIntyre <richard.mackstars@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$options"],"optionals":["$output"],"docParameters":{"$options":{"type":"array","description":"Options"},"$output":{"type":"OutputInterface","description":"Output Interface"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Db\\Adapter\\SqlServerAdapter":{"class":{"descriptions":{"short":"Phinx SqlServer Adapter.","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$options"],"optionals":["$output"],"docParameters":{"$options":{"type":"array","description":"Options"},"$output":{"type":"OutputInterface","description":"Output Interface"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Db\\Adapter\\TablePrefixAdapter":{"class":{"descriptions":{"short":"Table prefix\/suffix adapter.","long":"Used for inserting a prefix or suffix into table names.\n\n@author Samuel Fisher <sam@sfisher.co>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$adapter"],"optionals":[],"docParameters":{"$adapter":{"type":"AdapterInterface","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class constructor, must always wrap another adapter.","long":""},"deprecated":false}}}},"Phinx\\Db\\Adapter\\WrapperInterface":{"class":{"descriptions":{"short":"Wrapper Interface.","long":"@author Woody Gilk <woody.gilk@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Db\\Table":{"class":{"descriptions":{"short":"This object is based loosely on: http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/ConnectionAdapters\/Table.html.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$options","$adapter"],"docParameters":{"$name":{"type":"string","description":"Table Name"},"$options":{"type":"array","description":"Options"},"$adapter":{"type":"AdapterInterface","description":"Database Adapter"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constuctor.","long":""},"deprecated":false}}}},"Phinx\\Db\\Table\\Column":{"class":{"descriptions":{"short":"This object is based loosely on: http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/ConnectionAdapters\/Table.html.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Db\\Table\\ForeignKey":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Db\\Table\\Index":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Migration\\AbstractMigration":{"class":{"descriptions":{"short":"Abstract Migration Class.","long":"It is expected that the migrations you write extend from this class.\n\nThis abstract class proxies the various database methods to your specified\nadapter.\n\n@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$version"],"optionals":[],"docParameters":{"$version":{"type":"int","description":"Migration Version"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Migration\\CreationInterface":{"class":{"descriptions":{"short":"Migration interface","long":"@author Richard Quadling <RQuadling@GMail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Migration\\IrreversibleMigrationException":{"class":{"descriptions":{"short":"Exception class thrown when migrations cannot be reversed using the 'change'\nfeature.","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Phinx\\Migration\\Manager":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$config","$output"],"optionals":[],"docParameters":{"$config":{"type":"ConfigInterface","description":"Configuration Object"},"$output":{"type":"OutputInterface","description":"Console Output"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Migration\\Manager\\Environment":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name","$options"],"optionals":[],"docParameters":{"$name":{"type":"string","description":"Environment Name"},"$options":{"type":"array","description":"Options"}},"throws":[],"return":{"type":"Environment","description":""},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Migration\\MigrationInterface":{"class":{"descriptions":{"short":"Migration interface","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Seed\\AbstractSeed":{"class":{"descriptions":{"short":"Abstract Seed Class.","long":"It is expected that the seeds you write extend from this class.\n\nThis abstract class proxies the various database methods to your specified\nadapter.\n\n@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"void","description":""},"descriptions":{"short":"Class Constructor.","long":""},"deprecated":false}}}},"Phinx\\Seed\\SeedInterface":{"class":{"descriptions":{"short":"Seed interface","long":"@author Rob Morgan <robbym@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Util\\Util":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Phinx\\Wrapper\\TextWrapper":{"class":{"descriptions":{"short":"Phinx text wrapper: a way to run `status`, `migrate`, and `rollback` commands\nand get the output of the command back as plain text.","long":"@author Woody Gilk <woody.gilk@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$app"],"optionals":["$options"],"docParameters":{"$app":{"type":"PhinxApplication","description":null},"$options":{"type":"array","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"PhpParser\\Autoloader":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Builder":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\BuilderAbstract":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\BuilderFactory":{"class":{"descriptions":{"short":"The following methods use reserved keywords, so their implementation is defined with an underscore and made available\nwith the reserved name through __call() magic.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Builder\\Class_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":{"$name":{"type":"string","description":"Name of the class"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a class builder.","long":""},"deprecated":false}}}},"PhpParser\\Builder\\Declaration":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Builder\\FunctionLike":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Builder\\Function_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":{"$name":{"type":"string","description":"Name of the function"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a function builder.","long":""},"deprecated":false}}}},"PhpParser\\Builder\\Interface_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":{"$name":{"type":"string","description":"Name of the interface"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates an interface builder.","long":""},"deprecated":false}}}},"PhpParser\\Builder\\Method":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":{"$name":{"type":"string","description":"Name of the method"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a method builder.","long":""},"deprecated":false}}}},"PhpParser\\Builder\\Namespace_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":{"$name":{"type":"Node\\Name|string|null","description":"Name of the namespace"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a namespace builder.","long":""},"deprecated":false}}}},"PhpParser\\Builder\\Param":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":{"$name":{"type":"string","description":"Name of the parameter"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a parameter builder.","long":""},"deprecated":false}}}},"PhpParser\\Builder\\Property":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":{"$name":{"type":"string","description":"Name of the property"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a property builder.","long":""},"deprecated":false}}}},"PhpParser\\Builder\\Trait_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":{"$name":{"type":"string","description":"Name of the interface"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates an interface builder.","long":""},"deprecated":false}}}},"PhpParser\\Builder\\Use_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name","$type"],"optionals":[],"docParameters":{"$name":{"type":"Node\\Name|string","description":"Name of the entity (namespace, class, function, constant) to alias"},"$type":{"type":"int","description":"One of the Stmt\\Use_::TYPE_* constants"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a name use (alias) builder.","long":""},"deprecated":false}}}},"PhpParser\\Comment":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$text"],"optionals":["$line"],"docParameters":{"$text":{"type":"string","description":"Comment text (including comment delimiters like \/*)"},"$line":{"type":"int","description":"Line number the comment started on"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a comment node.","long":""},"deprecated":false}}}},"PhpParser\\Comment\\Doc":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$text"],"optionals":["$line"],"docParameters":{"$text":{"type":"string","description":"Comment text (including comment delimiters like \/*)"},"$line":{"type":"int","description":"Line number the comment started on"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a comment node.","long":""},"deprecated":false}}}},"PhpParser\\Error":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$attributes"],"docParameters":{"$message":{"type":"string","description":"Error message"},"$attributes":{"type":"array|int","description":"Attributes of node\/token where error occurred (or start line of error -- deprecated)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates an Exception signifying a parse error.","long":""},"deprecated":false}}}},"PhpParser\\Lexer":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"Options array. Currently only the 'usedAttributes' option is supported, which is an array of attributes to add to the AST nodes. Possible attributes are: 'comments', 'startLine', 'endLine', 'startTokenPos', 'endTokenPos', 'startFilePos', 'endFilePos'. The option defaults to the first three. For more info see getNextToken() docs."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a Lexer.","long":""},"deprecated":false}}}},"PhpParser\\Lexer\\Emulative":{"class":{"descriptions":{"short":"ATTENTION: This code is WRITE-ONLY. Do not try to read it.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"Options array. Currently only the 'usedAttributes' option is supported, which is an array of attributes to add to the AST nodes. Possible attributes are: 'comments', 'startLine', 'endLine', 'startTokenPos', 'endTokenPos', 'startFilePos', 'endFilePos'. The option defaults to the first three. For more info see getNextToken() docs."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a Lexer.","long":""},"deprecated":false}}}},"PhpParser\\Node":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\NodeAbstract":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Array of attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a Node.","long":""},"deprecated":false}}}},"PhpParser\\NodeDumper":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\NodeTraverser":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$cloneNodes"],"docParameters":{"$cloneNodes":{"type":"bool","description":"Should the traverser clone the nodes when traversing the AST"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a node traverser.","long":""},"deprecated":false}}}},"PhpParser\\NodeTraverserInterface":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\NodeVisitor":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\NodeVisitorAbstract":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\NodeVisitor\\NameResolver":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Node\\Arg":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":["$byRef","$unpack","$attributes"],"docParameters":{"$value":{"type":"Expr","description":"Value to pass"},"$byRef":{"type":"bool","description":"Whether to pass by ref"},"$unpack":{"type":"bool","description":"Whether to unpack the argument"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a function call argument node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Const_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name","$value"],"optionals":["$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$value":{"type":"Expr","description":"Value"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a const node for use in class const and const statements.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Array of attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a Node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\ArrayDimFetch":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var"],"optionals":["$dim","$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$dim":{"type":"null|Expr","description":"Array index \/ dim"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an array index fetch node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\ArrayItem":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":["$key","$byRef","$attributes"],"docParameters":{"$value":{"type":"Expr","description":"Value"},"$key":{"type":"null|Expr","description":"Key"},"$byRef":{"type":"bool","description":"Whether to assign by reference"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an array item node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Array_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$items","$attributes"],"docParameters":{"$items":{"type":"ArrayItem[]","description":"Items of the array"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an array node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Assign":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an assignment node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\BitwiseAnd":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\BitwiseOr":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\BitwiseXor":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\Concat":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\Div":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\Minus":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\Mod":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\Mul":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\Plus":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\Pow":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\ShiftLeft":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignOp\\ShiftRight":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a compound assignment operation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\AssignRef":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$expr"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an assignment node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\BitwiseAnd":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\BitwiseOr":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\BitwiseXor":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\BooleanAnd":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\BooleanOr":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Coalesce":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Concat":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Div":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Equal":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Greater":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\GreaterOrEqual":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Identical":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\LogicalAnd":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\LogicalOr":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\LogicalXor":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Minus":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Mod":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Mul":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\NotEqual":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\NotIdentical":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Plus":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Pow":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\ShiftLeft":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\ShiftRight":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Smaller":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\SmallerOrEqual":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BinaryOp\\Spaceship":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$left","$right"],"optionals":["$attributes"],"docParameters":{"$left":{"type":"Expr","description":"The left hand side expression"},"$right":{"type":"Expr","description":"The right hand side expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise and node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BitwiseNot":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a bitwise not node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\BooleanNot":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a boolean not node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Cast":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a cast node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Cast\\Array_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a cast node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Cast\\Bool_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a cast node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Cast\\Double":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a cast node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Cast\\Int_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a cast node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Cast\\Object_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a cast node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Cast\\String_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a cast node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Cast\\Unset_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a cast node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\ClassConstFetch":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$class","$name"],"optionals":["$attributes"],"docParameters":{"$class":{"type":"Name|Expr","description":"Class name"},"$name":{"type":"string","description":"Constant name"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a class const fetch node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Clone_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a clone node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Closure":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$subNodes","$attributes"],"docParameters":{"$subNodes":{"type":"array","description":"Array of the following optional subnodes: 'static' => false : Whether the closure is static 'byRef' => false : Whether to return by reference 'params' => array(): Parameters 'uses' => array(): use()s 'returnType' => null : Return type 'stmts' => array(): Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a lambda function node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\ClosureUse":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var"],"optionals":["$byRef","$attributes"],"docParameters":{"$var":{"type":"string","description":"Name of variable"},"$byRef":{"type":"bool","description":"Whether to use by reference"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a closure use node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\ConstFetch":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$attributes"],"docParameters":{"$name":{"type":"Name","description":"Constant name"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a const fetch node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Empty_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an empty() node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\ErrorSuppress":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an error suppress node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Eval_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an eval() node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Exit_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$expr","$attributes"],"docParameters":{"$expr":{"type":"null|Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an exit() node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\FuncCall":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$args","$attributes"],"docParameters":{"$name":{"type":"Node\\Name|Expr","description":"Function name"},"$args":{"type":"Node\\Arg[]","description":"Arguments"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a function call node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Include_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr","$type"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$type":{"type":"int","description":"Type of include"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an include node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Instanceof_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr","$class"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$class":{"type":"Name|Expr","description":"Class name"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an instanceof check node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Isset_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$vars"],"optionals":["$attributes"],"docParameters":{"$vars":{"type":"Expr[]","description":"Variables"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an array node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\List_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$vars"],"optionals":["$attributes"],"docParameters":{"$vars":{"type":"Expr[]","description":"List of variables to assign to"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a list() destructuring node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\MethodCall":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$name"],"optionals":["$args","$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable holding object"},"$name":{"type":"string|Expr","description":"Method name"},"$args":{"type":"Arg[]","description":"Arguments"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a function call node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\New_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$class"],"optionals":["$args","$attributes"],"docParameters":{"$class":{"type":"Node\\Name|Expr|Node\\Stmt\\Class_","description":"Class name (or class node for anonymous classes)"},"$args":{"type":"Node\\Arg[]","description":"Arguments"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a function call node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\PostDec":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a post decrement node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\PostInc":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a post increment node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\PreDec":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a pre decrement node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\PreInc":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a pre increment node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Print_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an print() node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\PropertyFetch":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$var","$name"],"optionals":["$attributes"],"docParameters":{"$var":{"type":"Expr","description":"Variable holding object"},"$name":{"type":"string|Expr","description":"Property name"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a function call node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\ShellExec":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$parts"],"optionals":["$attributes"],"docParameters":{"$parts":{"type":"array","description":"Encapsed string array"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a shell exec (backtick) node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\StaticCall":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$class","$name"],"optionals":["$args","$attributes"],"docParameters":{"$class":{"type":"Node\\Name|Expr","description":"Class name"},"$name":{"type":"string|Expr","description":"Method name"},"$args":{"type":"Node\\Arg[]","description":"Arguments"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a static method call node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\StaticPropertyFetch":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$class","$name"],"optionals":["$attributes"],"docParameters":{"$class":{"type":"Name|Expr","description":"Class name"},"$name":{"type":"string|Expr","description":"Property name"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a static property fetch node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Ternary":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$cond","$if","$else"],"optionals":["$attributes"],"docParameters":{"$cond":{"type":"Expr","description":"Condition"},"$if":{"type":"null|Expr","description":"Expression for true"},"$else":{"type":"Expr","description":"Expression for false"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a ternary operator node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\UnaryMinus":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a unary minus node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\UnaryPlus":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a unary plus node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Variable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$attributes"],"docParameters":{"$name":{"type":"string|Expr","description":"Name"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a variable node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\YieldFrom":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an \"yield from\" node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Expr\\Yield_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$value","$key","$attributes"],"docParameters":{"$value":{"type":"null|Expr","description":"Value expression"},"$key":{"type":"null|Expr","description":"Key expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a yield expression node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\FunctionLike":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Node\\Name":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$parts"],"optionals":["$attributes"],"docParameters":{"$parts":{"type":"string|array","description":"Parts of the name (or name as string)"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a name node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Name\\FullyQualified":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$parts"],"optionals":["$attributes"],"docParameters":{"$parts":{"type":"string|array","description":"Parts of the name (or name as string)"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a name node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Name\\Relative":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$parts"],"optionals":["$attributes"],"docParameters":{"$parts":{"type":"string|array","description":"Parts of the name (or name as string)"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a name node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Param":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$default","$type","$byRef","$variadic","$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$default":{"type":"null|Expr","description":"Default value"},"$type":{"type":"null|string|Name","description":"Typehint"},"$byRef":{"type":"bool","description":"Whether is passed by reference"},"$variadic":{"type":"bool","description":"Whether this is a variadic argument"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a parameter node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Array of attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a Node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\DNumber":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":["$attributes"],"docParameters":{"$value":{"type":"float","description":"Value of the number"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a float number scalar node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\Encapsed":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$parts"],"optionals":["$attributes"],"docParameters":{"$parts":{"type":"array","description":"Encaps list"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an encapsed string node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\EncapsedStringPart":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":["$attributes"],"docParameters":{"$value":{"type":"string","description":"String value"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a node representing a string part of an encapsed string.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\LNumber":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":["$attributes"],"docParameters":{"$value":{"type":"int","description":"Value of the number"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an integer number scalar node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst\\Class_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst\\Dir":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst\\File":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst\\Function_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst\\Line":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst\\Method":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst\\Namespace_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\MagicConst\\Trait_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a magic constant node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Scalar\\String_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":["$attributes"],"docParameters":{"$value":{"type":"string","description":"Value of the string"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a string scalar node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Array of attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a Node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Break_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$num","$attributes"],"docParameters":{"$num":{"type":"null|Node\\Expr","description":"Number of loops to break"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a break node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Case_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$cond"],"optionals":["$stmts","$attributes"],"docParameters":{"$cond":{"type":"null|Node\\Expr","description":"Condition (null for default)"},"$stmts":{"type":"Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a case node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Catch_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$type","$var"],"optionals":["$stmts","$attributes"],"docParameters":{"$type":{"type":"Node\\Name","description":"Class of exception"},"$var":{"type":"string","description":"Variable for exception"},"$stmts":{"type":"Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a catch node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\ClassConst":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$consts"],"optionals":["$attributes"],"docParameters":{"$consts":{"type":"Node\\Const_[]","description":"Constant declarations"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a class const list node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\ClassLike":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Array of attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a Node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\ClassMethod":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$subNodes","$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$subNodes":{"type":"array","description":"Array of the following optional subnodes: 'type' => MODIFIER_PUBLIC: Type 'byRef' => false : Whether to return by reference 'params' => array() : Parameters 'returnType' => null : Return type 'stmts' => array() : Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a class method node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Class_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$subNodes","$attributes"],"docParameters":{"$name":{"type":"string|null","description":"Name"},"$subNodes":{"type":"array","description":"Array of the following optional subnodes: 'type' => 0 : Type 'extends' => null : Name of extended class 'implements' => array(): Names of implemented interfaces 'stmts' => array(): Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a class node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Const_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$consts"],"optionals":["$attributes"],"docParameters":{"$consts":{"type":"Node\\Const_[]","description":"Constant declarations"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a const list node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Continue_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$num","$attributes"],"docParameters":{"$num":{"type":"null|Node\\Expr","description":"Number of loops to continue"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a continue node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\DeclareDeclare":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$key","$value"],"optionals":["$attributes"],"docParameters":{"$key":{"type":"string","description":"Key"},"$value":{"type":"Node\\Expr","description":"Value"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a declare key=>value pair node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Declare_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$declares","$stmts"],"optionals":["$attributes"],"docParameters":{"$declares":{"type":"DeclareDeclare[]","description":"List of declares"},"$stmts":{"type":"Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a declare node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Do_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$cond"],"optionals":["$stmts","$attributes"],"docParameters":{"$cond":{"type":"Node\\Expr","description":"Condition"},"$stmts":{"type":"Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a do while node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Echo_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$exprs"],"optionals":["$attributes"],"docParameters":{"$exprs":{"type":"Node\\Expr[]","description":"Expressions"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an echo node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\ElseIf_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$cond"],"optionals":["$stmts","$attributes"],"docParameters":{"$cond":{"type":"Node\\Expr","description":"Condition"},"$stmts":{"type":"Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an elseif node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Else_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$stmts","$attributes"],"docParameters":{"$stmts":{"type":"Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an else node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\For_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$subNodes","$attributes"],"docParameters":{"$subNodes":{"type":"array","description":"Array of the following optional subnodes: 'init' => array(): Init expressions 'cond' => array(): Loop conditions 'loop' => array(): Loop expressions 'stmts' => array(): Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a for loop node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Foreach_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr","$valueVar"],"optionals":["$subNodes","$attributes"],"docParameters":{"$expr":{"type":"Node\\Expr","description":"Expression to iterate"},"$valueVar":{"type":"Node\\Expr","description":"Variable to assign value to"},"$subNodes":{"type":"array","description":"Array of the following optional subnodes: 'keyVar' => null : Variable to assign key to 'byRef' => false : Whether to assign value by reference 'stmts' => array(): Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a foreach node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Function_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$subNodes","$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$subNodes":{"type":"array","description":"Array of the following optional subnodes: 'byRef' => false : Whether to return by reference 'params' => array(): Parameters 'returnType' => null : Return type 'stmts' => array(): Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a function node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Global_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$vars"],"optionals":["$attributes"],"docParameters":{"$vars":{"type":"Node\\Expr[]","description":"Variables to unset"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a global variables list node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Goto_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$attributes"],"docParameters":{"$name":{"type":"string","description":"Name of label to jump to"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a goto node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\GroupUse":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$prefix","$uses"],"optionals":["$type","$attributes"],"docParameters":{"$prefix":{"type":"Name","description":"Prefix for uses"},"$uses":{"type":"UseUse[]","description":"Uses"},"$type":{"type":"int","description":"Type of group use"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a group use node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\HaltCompiler":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$remaining"],"optionals":["$attributes"],"docParameters":{"$remaining":{"type":"string","description":"Remaining text after halt compiler statement."},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a __halt_compiler node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\If_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$cond"],"optionals":["$subNodes","$attributes"],"docParameters":{"$cond":{"type":"Node\\Expr","description":"Condition"},"$subNodes":{"type":"array","description":"Array of the following optional subnodes: 'stmts' => array(): Statements 'elseifs' => array(): Elseif clauses 'else' => null : Else clause"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an if node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\InlineHTML":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":["$attributes"],"docParameters":{"$value":{"type":"string","description":"String"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an inline HTML node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Interface_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$subNodes","$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$subNodes":{"type":"array","description":"Array of the following optional subnodes: 'extends' => array(): Name of extended interfaces 'stmts' => array(): Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a class node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Label":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a label node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Namespace_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name","$stmts","$attributes"],"docParameters":{"$name":{"type":"null|Node\\Name","description":"Name"},"$stmts":{"type":"null|Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a namespace node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Property":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$type","$props"],"optionals":["$attributes"],"docParameters":{"$type":{"type":"int","description":"Modifiers"},"$props":{"type":"PropertyProperty[]","description":"Properties"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a class property list node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\PropertyProperty":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$default","$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$default":{"type":"null|Node\\Expr","description":"Default value"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a class property node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Return_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$expr","$attributes"],"docParameters":{"$expr":{"type":"null|Node\\Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a return node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\StaticVar":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$default","$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$default":{"type":"null|Node\\Expr","description":"Default value"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a static variable node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Static_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$vars"],"optionals":["$attributes"],"docParameters":{"$vars":{"type":"StaticVar[]","description":"Variable definitions"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a static variables list node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Switch_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$cond","$cases"],"optionals":["$attributes"],"docParameters":{"$cond":{"type":"Node\\Expr","description":"Condition"},"$cases":{"type":"Case_[]","description":"Case list"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a case node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Throw_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$expr"],"optionals":["$attributes"],"docParameters":{"$expr":{"type":"Node\\Expr","description":"Expression"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a throw node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\TraitUse":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$traits"],"optionals":["$adaptations","$attributes"],"docParameters":{"$traits":{"type":"Node\\Name[]","description":"Traits"},"$adaptations":{"type":"TraitUseAdaptation[]","description":"Adaptations"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a trait use node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\TraitUseAdaptation":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$attributes"],"docParameters":{"$attributes":{"type":"array","description":"Array of attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a Node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\TraitUseAdaptation\\Alias":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$trait","$method","$newModifier","$newName"],"optionals":["$attributes"],"docParameters":{"$trait":{"type":"null|Node\\Name","description":"Trait name"},"$method":{"type":"string","description":"Method name"},"$newModifier":{"type":"null|int","description":"New modifier"},"$newName":{"type":"null|string","description":"New name"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a trait use precedence adaptation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\TraitUseAdaptation\\Precedence":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$trait","$method","$insteadof"],"optionals":["$attributes"],"docParameters":{"$trait":{"type":"Node\\Name","description":"Trait name"},"$method":{"type":"string","description":"Method name"},"$insteadof":{"type":"Node\\Name[]","description":"Overwritten traits"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a trait use precedence adaptation node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Trait_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$stmts","$attributes"],"docParameters":{"$name":{"type":"string","description":"Name"},"$stmts":{"type":"Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a trait node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\TryCatch":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$stmts","$catches"],"optionals":["$finallyStmts","$attributes"],"docParameters":{"$stmts":{"type":"Node[]","description":"Statements"},"$catches":{"type":"Catch_[]","description":"Catches"},"$finallyStmts":{"type":"null|Node[]","description":"Finally statements (null means no finally clause)"},"$attributes":{"type":"array|null","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a try catch node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Unset_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$vars"],"optionals":["$attributes"],"docParameters":{"$vars":{"type":"Node\\Expr[]","description":"Variables to unset"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an unset node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\UseUse":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$alias","$type","$attributes"],"docParameters":{"$name":{"type":"Node\\Name","description":"Namespace\/Class to alias"},"$alias":{"type":"null|string","description":"Alias"},"$type":{"type":"int","description":"Type of the use element (for mixed group use declarations only)"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an alias (use) node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\Use_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$uses"],"optionals":["$type","$attributes"],"docParameters":{"$uses":{"type":"UseUse[]","description":"Aliases"},"$type":{"type":"int","description":"Type of alias"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs an alias (use) list node.","long":""},"deprecated":false}}}},"PhpParser\\Node\\Stmt\\While_":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$cond"],"optionals":["$stmts","$attributes"],"docParameters":{"$cond":{"type":"Node\\Expr","description":"Condition"},"$stmts":{"type":"Node[]","description":"Statements"},"$attributes":{"type":"array","description":"Additional attributes"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a while node.","long":""},"deprecated":false}}}},"PhpParser\\Parser":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\ParserAbstract":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$lexer"],"optionals":["$options"],"docParameters":{"$lexer":{"type":"Lexer","description":"A lexer"},"$options":{"type":"array","description":"Options array. The boolean 'throwOnError' option determines whether an exception should be thrown on first error, or if the parser should try to continue parsing the remaining code and build a partial AST."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a parser instance.","long":""},"deprecated":false}}}},"PhpParser\\ParserFactory":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Parser\\Multiple":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$parsers"],"optionals":[],"docParameters":{"$parsers":{"type":"Parser[]","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Create a parser which will try multiple parsers in an order of preference.","long":"Parsers will be invoked in the order they're provided to the constructor. If one of the\nparsers runs without errors, it's output is returned. Otherwise the errors (and\nPhpParser\\Error exception) of the first parser are used."},"deprecated":false}}}},"PhpParser\\Parser\\Php5":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$lexer"],"optionals":["$options"],"docParameters":{"$lexer":{"type":"Lexer","description":"A lexer"},"$options":{"type":"array","description":"Options array. The boolean 'throwOnError' option determines whether an exception should be thrown on first error, or if the parser should try to continue parsing the remaining code and build a partial AST."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a parser instance.","long":""},"deprecated":false}}}},"PhpParser\\Parser\\Php7":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$lexer"],"optionals":["$options"],"docParameters":{"$lexer":{"type":"Lexer","description":"A lexer"},"$options":{"type":"array","description":"Options array. The boolean 'throwOnError' option determines whether an exception should be thrown on first error, or if the parser should try to continue parsing the remaining code and build a partial AST."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a parser instance.","long":""},"deprecated":false}}}},"PhpParser\\Parser\\Tokens":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\PrettyPrinterAbstract":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"Dictionary of formatting options"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a pretty printer instance using the given options.","long":"Supported options:\n* bool $shortArraySyntax = false: Whether to use [] instead of array()"},"deprecated":false}}}},"PhpParser\\PrettyPrinter\\Standard":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$options":{"type":"array","description":"Dictionary of formatting options"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Creates a pretty printer instance using the given options.","long":"Supported options:\n* bool $shortArraySyntax = false: Whether to use [] instead of array()"},"deprecated":false}}}},"PhpParser\\Serializer":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Serializer\\XML":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructs a XML serializer.","long":""},"deprecated":false}}}},"PhpParser\\Unserializer":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PhpParser\\Unserializer\\XML":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psr\\Log\\AbstractLogger":{"class":{"descriptions":{"short":"This is a simple Logger implementation that other Loggers can inherit from.","long":"It simply delegates all log-level-specific methods to the `log` method to\nreduce boilerplate code that a simple Logger that does the same thing with\nmessages regardless of the error level has to implement."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psr\\Log\\InvalidArgumentException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psr\\Log\\LogLevel":{"class":{"descriptions":{"short":"Describes log levels","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psr\\Log\\LoggerAwareInterface":{"class":{"descriptions":{"short":"Describes a logger-aware instance","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psr\\Log\\LoggerAwareTrait":{"class":{"descriptions":{"short":"Basic Implementation of LoggerAwareInterface.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psr\\Log\\LoggerInterface":{"class":{"descriptions":{"short":"Describes a logger instance","long":"The message MUST be a string or object implementing __toString().\n\nThe message MAY contain placeholders in the form: {foo} where foo\nwill be replaced by the context data in key \"foo\".\n\nThe context array can contain arbitrary data, the only assumption that\ncan be made by implementors is that if an Exception instance is given\nto produce a stack trace, it MUST be in a key named \"exception\".\n\nSee https:\/\/github.com\/php-fig\/fig-standards\/blob\/master\/accepted\/PSR-3-logger-interface.md\nfor the full interface specification."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psr\\Log\\LoggerTrait":{"class":{"descriptions":{"short":"This is a simple Logger trait that classes unable to extend AbstractLogger\n(because they extend another class, etc) can include.","long":"It simply delegates all log-level-specific methods to the `log` method to\nreduce boilerplate code that a simple Logger that does the same thing with\nmessages regardless of the error level has to implement."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psr\\Log\\NullLogger":{"class":{"descriptions":{"short":"This Logger can be used to avoid conditional log calls","long":"Logging should always be optional, and if no logger is provided to your\nlibrary creating a NullLogger instance to have something to throw logs at\nis a good way to avoid littering your code with `if ($this->logger) { }`\nblocks."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Autoloader":{"class":{"descriptions":{"short":"Psy class autoloader.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner":{"class":{"descriptions":{"short":"A service to clean up user input, detect parse errors before they happen,\nand generally work around issues with the PHP code evaluation experience.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$parser","$printer","$traverser"],"docParameters":{"$parser":{"type":"Parser","description":"A PhpParser Parser instance. One will be created if not explicitly supplied."},"$printer":{"type":"Printer","description":"A PhpParser Printer instance. One will be created if not explicitly supplied."},"$traverser":{"type":"NodeTraverser","description":"A PhpParser NodeTraverser instance. One will be created if not explicitly supplied."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"CodeCleaner constructor.","long":""},"deprecated":false}}}},"Psy\\CodeCleaner\\AbstractClassPass":{"class":{"descriptions":{"short":"The abstract class pass handles abstract classes and methods, complaining if there are too few or too many of either.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\AssignThisVariablePass":{"class":{"descriptions":{"short":"Validate that the user input does not assign the `$this` variable.","long":"@author Martin Haso\u0148 <martin.hason@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\CallTimePassByReferencePass":{"class":{"descriptions":{"short":"Validate that the user did not use the call-time pass-by-reference that causes a fatal error.","long":"As of PHP 5.4.0, call-time pass-by-reference was removed, so using it will raise a fatal error.\n\n@author Martin Haso\u0148 <martin.hason@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\CalledClassPass":{"class":{"descriptions":{"short":"The called class pass throws warnings for get_class() and get_called_class()\noutside a class context.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\CodeCleanerPass":{"class":{"descriptions":{"short":"A CodeCleaner pass is a PhpParser Node Visitor.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\FunctionReturnInWriteContextPass":{"class":{"descriptions":{"short":"Validate that the functions are used correctly.","long":"@author Martin Haso\u0148 <martin.hason@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psy\\CodeCleaner\\ImplicitReturnPass":{"class":{"descriptions":{"short":"Add an implicit \"return\" to the last statement, provided it can be returned.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\InstanceOfPass":{"class":{"descriptions":{"short":"Validate that the instanceof statement does not receive a scalar value or a non-class constant.","long":"@author Martin Haso\u0148 <martin.hason@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\LeavePsyshAlonePass":{"class":{"descriptions":{"short":"Validate that the user input does not reference the `$__psysh__` variable.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\LegacyEmptyPass":{"class":{"descriptions":{"short":"Validate that the user did not call the language construct `empty()` on a\nstatement in PHP < 5.5.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\MagicConstantsPass":{"class":{"descriptions":{"short":"Swap out __DIR__ and __FILE__ magic constants with our best guess?","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\NamespaceAwarePass":{"class":{"descriptions":{"short":"Abstract namespace-aware code cleaner pass.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\NamespacePass":{"class":{"descriptions":{"short":"Provide implicit namespaces for subsequent execution.","long":"The namespace pass remembers the last standalone namespace line encountered:\n\nnamespace Foo\\Bar;\n\n... which it then applies implicitly to all future evaluated code, until the\nnamespace is replaced by another namespace. To reset to the top level\nnamespace, enter `namespace {}`. This is a bit ugly, but it does the trick :)"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$cleaner"],"optionals":[],"docParameters":{"$cleaner":{"type":"CodeCleaner","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psy\\CodeCleaner\\StaticConstructorPass":{"class":{"descriptions":{"short":"Validate that the old-style constructor function is not static.","long":"As of PHP 5.3.3, methods with the same name as the last element of a namespaced class name\nwill no longer be treated as constructor. This change doesn't affect non-namespaced classes.\n\nValidation of the __construct method ensures the PHP Parser.\n\n@author Martin Haso\u0148 <martin.hason@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psy\\CodeCleaner\\UseStatementPass":{"class":{"descriptions":{"short":"Provide implicit use statements for subsequent execution.","long":"The use statement pass remembers the last use statement line encountered:\n\nuse Foo\\Bar as Baz;\n\n... which it then applies implicitly to all future evaluated code, until the\ncurrent namespace is replaced by another namespace."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\ValidClassNamePass":{"class":{"descriptions":{"short":"Validate that classes exist.","long":"This pass throws a FatalErrorException rather than letting PHP run\nheadfirst into a real fatal error and die."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psy\\CodeCleaner\\ValidConstantPass":{"class":{"descriptions":{"short":"Validate that namespaced constant references will succeed.","long":"This pass throws a FatalErrorException rather than letting PHP run\nheadfirst into a real fatal error and die."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\CodeCleaner\\ValidFunctionNamePass":{"class":{"descriptions":{"short":"Validate that function calls will succeed.","long":"This pass throws a FatalErrorException rather than letting PHP run\nheadfirst into a real fatal error and die."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Command\\BufferCommand":{"class":{"descriptions":{"short":"Interact with the current code buffer.","long":"Shows and clears the buffer for the current multi-line expression."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ClearCommand":{"class":{"descriptions":{"short":"Clear the Psy Shell.","long":"Just what it says on the tin."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\Command":{"class":{"descriptions":{"short":"The Psy Shell base command.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\DocCommand":{"class":{"descriptions":{"short":"Read the documentation for an object, class, constant, method or property.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\DumpCommand":{"class":{"descriptions":{"short":"Dump an object or primitive.","long":"This is like var_dump but *way* awesomer."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ExitCommand":{"class":{"descriptions":{"short":"Exit the Psy Shell.","long":"Just what it says on the tin."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\HelpCommand":{"class":{"descriptions":{"short":"Help command.","long":"Lists available commands, and gives command-specific help when asked nicely."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\HistoryCommand":{"class":{"descriptions":{"short":"Psy Shell history command.","long":"Shows, searches and replays readline history. Not too shabby."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand":{"class":{"descriptions":{"short":"List available local variables, object properties, etc.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\ClassConstantEnumerator":{"class":{"descriptions":{"short":"Class Constant Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\ClassEnumerator":{"class":{"descriptions":{"short":"Class Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\ConstantEnumerator":{"class":{"descriptions":{"short":"Constant Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\Enumerator":{"class":{"descriptions":{"short":"Abstract Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\FunctionEnumerator":{"class":{"descriptions":{"short":"Function Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\GlobalVariableEnumerator":{"class":{"descriptions":{"short":"Global Variable Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\InterfaceEnumerator":{"class":{"descriptions":{"short":"Interface Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\MethodEnumerator":{"class":{"descriptions":{"short":"Method Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\PropertyEnumerator":{"class":{"descriptions":{"short":"Property Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\TraitEnumerator":{"class":{"descriptions":{"short":"Trait Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Enumerator constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ListCommand\\VariableEnumerator":{"class":{"descriptions":{"short":"Variable Enumerator class.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$presenter","$context"],"optionals":[],"docParameters":{"$presenter":{"type":"Presenter","description":null},"$context":{"type":"Context","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Variable Enumerator constructor.","long":"Unlike most other enumerators, the Variable Enumerator needs access to\nthe current scope variables, so we need to pass it a Context instance."},"deprecated":false}}}},"Psy\\Command\\ParseCommand":{"class":{"descriptions":{"short":"Parse PHP code and show the abstract syntax tree.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\PsyVersionCommand":{"class":{"descriptions":{"short":"A dumb little command for printing out the current Psy Shell version.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ReflectingCommand":{"class":{"descriptions":{"short":"An abstract command with helpers for inspecting the current context.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ShowCommand":{"class":{"descriptions":{"short":"Show the code for an object, class, constant, method or property.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\ThrowUpCommand":{"class":{"descriptions":{"short":"Throw an exception out of the Psy Shell.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\TraceCommand":{"class":{"descriptions":{"short":"Show the current stack trace.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\WhereamiCommand":{"class":{"descriptions":{"short":"Show the context of where you opened the debugger.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Command\\WtfCommand":{"class":{"descriptions":{"short":"Show the last uncaught exception.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Compiler":{"class":{"descriptions":{"short":"A Psy Shell Phar compiler.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\ConfigPaths":{"class":{"descriptions":{"short":"A Psy Shell configuration path helper.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Configuration":{"class":{"descriptions":{"short":"The Psy Shell configuration.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"array","description":"Optional array of configuration values."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct a Configuration instance.","long":"Optionally, supply an array of configuration values to load."},"deprecated":false}}}},"Psy\\Context":{"class":{"descriptions":{"short":"The Shell execution context.","long":"This class encapsulates the current variables, most recent return value and\nexception, and the current namespace."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\ContextAware":{"class":{"descriptions":{"short":"ContextAware interface.","long":"This interface is used to pass the Shell's context into commands and such\nwhich require access to the current scope variables."},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Exception\\BreakException":{"class":{"descriptions":{"short":"A break exception, used for halting the Psy Shell.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"{@inheritdoc}","long":""},"deprecated":false}}}},"Psy\\Exception\\DeprecatedException":{"class":{"descriptions":{"short":"A DeprecatedException for Psy.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":{"$message":{"type":"string","description":"(default: \"\")"},"$code":{"type":"int","description":"(default: 0)"},"$previous":{"type":"\\Exception","description":"(default: null)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Make this bad boy.","long":""},"deprecated":false}}}},"Psy\\Exception\\ErrorException":{"class":{"descriptions":{"short":"A custom error Exception for Psy with a formatted $message.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$severity","$filename","$lineno","$previous"],"docParameters":{"$message":{"type":"string","description":"(default: \"\")"},"$code":{"type":"int","description":"(default: 0)"},"$severity":{"type":"int","description":"(default: 1)"},"$filename":{"type":"string","description":"(default: null)"},"$lineno":{"type":"int","description":"(default: null)"},"$previous":{"type":"Exception","description":"(default: null)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct a Psy ErrorException.","long":""},"deprecated":false}}}},"Psy\\Exception\\Exception":{"class":{"descriptions":{"short":"An interface for Psy Exceptions.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Exception\\FatalErrorException":{"class":{"descriptions":{"short":"A \"fatal error\" Exception for Psy.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$severity","$filename","$lineno","$previous"],"docParameters":{"$message":{"type":"string","description":"(default: \"\")"},"$code":{"type":"int","description":"(default: 0)"},"$severity":{"type":"int","description":"(default: 9000)"},"$filename":{"type":"string","description":"(default: null)"},"$lineno":{"type":"int","description":"(default: null)"},"$previous":{"type":"\\Exception","description":"(default: null)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Create a fatal error.","long":""},"deprecated":false}}}},"Psy\\Exception\\ParseErrorException":{"class":{"descriptions":{"short":"A \"parse error\" Exception for Psy.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$line"],"docParameters":{"$message":{"type":"string","description":"(default: \"\")"},"$line":{"type":"int","description":"(default: -1)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor!","long":""},"deprecated":false}}}},"Psy\\Exception\\RuntimeException":{"class":{"descriptions":{"short":"A RuntimeException for Psy.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":{"$message":{"type":"string","description":"(default: \"\")"},"$code":{"type":"int","description":"(default: 0)"},"$previous":{"type":"\\Exception","description":"(default: null)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Make this bad boy.","long":""},"deprecated":false}}}},"Psy\\Exception\\ThrowUpException":{"class":{"descriptions":{"short":"A throw-up exception, used for throwing an exception out of the Psy Shell.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$exception"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"{@inheritdoc}","long":""},"deprecated":false}}}},"Psy\\ExecutionLoop\\ForkingLoop":{"class":{"descriptions":{"short":"A forking version of the Psy Shell execution loop.","long":"This version is preferred, as it won't die prematurely if user input includes\na fatal error, such as redeclaring a class or function."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$config"],"optionals":[],"docParameters":{"$config":{"type":"Configuration","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Loop constructor.","long":"The non-forking loop doesn't have much use for Configuration, so we'll\njust ignore it."},"deprecated":false}}}},"Psy\\ExecutionLoop\\Loop":{"class":{"descriptions":{"short":"The Psy Shell execution loop.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$config"],"optionals":[],"docParameters":{"$config":{"type":"Configuration","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Loop constructor.","long":"The non-forking loop doesn't have much use for Configuration, so we'll\njust ignore it."},"deprecated":false}}}},"Psy\\Formatter\\CodeFormatter":{"class":{"descriptions":{"short":"A pretty-printer for code.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Formatter\\DocblockFormatter":{"class":{"descriptions":{"short":"A pretty-printer for docblocks.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Formatter\\Formatter":{"class":{"descriptions":{"short":"Formatter interface.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Formatter\\SignatureFormatter":{"class":{"descriptions":{"short":"An abstract representation of a function, class or property signature.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Output\\OutputPager":{"class":{"descriptions":{"short":"An output pager is much the same as a regular OutputInterface, but allows\nthe stream to be flushed to a pager periodically.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Output\\PassthruPager":{"class":{"descriptions":{"short":"A passthrough pager is a no-op. It simply wraps a StreamOutput's stream and\ndoes nothing when the pager is closed.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$output"],"optionals":[],"docParameters":{"$output":{"type":"StreamOutput","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Output\\ProcOutputPager":{"class":{"descriptions":{"short":"ProcOutputPager class.","long":"A ProcOutputPager instance wraps a regular StreamOutput's stream. Rather\nthan writing directly to the stream, it shells out to a pager process and\ngives that process the stream as stdout. This means regular *nix commands\nlike `less` and `more` can be used to page large amounts of output."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$output"],"optionals":["$cmd"],"docParameters":{"$output":{"type":"StreamOutput","description":null},"$cmd":{"type":"string","description":"Pager process command (default: 'less -R -S -F -X')"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Psy\\Output\\ShellOutput":{"class":{"descriptions":{"short":"A ConsoleOutput subclass specifically for Psy Shell output.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$verbosity","$decorated","$formatter","$pager"],"docParameters":{"$verbosity":{"type":"mixed","description":"(default: self::VERBOSITY_NORMAL)"},"$decorated":{"type":"bool","description":"(default: null)"},"$formatter":{"type":"OutputFormatterInterface","description":"(default: null)"},"$pager":{"type":"null|string|OutputPager","description":"(default: null)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct a ShellOutput instance.","long":""},"deprecated":false}}}},"Psy\\ParserFactory":{"class":{"descriptions":{"short":"Parser factory to abstract over PHP parser library versions.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Readline\\GNUReadline":{"class":{"descriptions":{"short":"A Readline interface implementation for GNU Readline.","long":"This is by far the coolest way to do it, but it doesn't work with new PHP.\n\nOh well."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$historyFile","$historySize","$eraseDups"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"GNU Readline constructor.","long":""},"deprecated":false}}}},"Psy\\Readline\\Libedit":{"class":{"descriptions":{"short":"A Libedit-based Readline implementation.","long":"This is largely the same as the Readline implementation, but it emulates\nsupport for `readline_list_history` since PHP decided it was a good idea to\nship a fake Readline implementation that is missing history support."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$historyFile","$historySize","$eraseDups"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"GNU Readline constructor.","long":""},"deprecated":false}}}},"Psy\\Readline\\Readline":{"class":{"descriptions":{"short":"An interface abstracting the various readline_* functions.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Readline\\Transient":{"class":{"descriptions":{"short":"An array-based Readline emulation implementation.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$historyFile","$historySize","$eraseDups"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Transient Readline constructor.","long":""},"deprecated":false}}}},"Psy\\Reflection\\ReflectionConstant":{"class":{"descriptions":{"short":"Somehow the standard reflection library doesn't include constants.","long":"ReflectionConstant corrects that omission."},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$class","$name"],"optionals":[],"docParameters":{"$class":{"type":"mixed","description":null},"$name":{"type":"string","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Construct a ReflectionConstant object.","long":""},"deprecated":false}}}},"Psy\\Shell":{"class":{"descriptions":{"short":"The Psy Shell application.","long":"Usage:\n\n$shell = new Shell;\n$shell->run();\n\n@author Justin Hileman <justin@justinhileman.info>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$config"],"docParameters":{"$config":{"type":"Configuration","description":"(default: null)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Create a new Psy Shell.","long":""},"deprecated":false}}}},"Psy\\TabCompletion\\AutoCompleter":{"class":{"descriptions":{"short":"A readline tab completion service.","long":"@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\AbstractContextAwareMatcher":{"class":{"descriptions":{"short":"An abstract tab completion Matcher which implements ContextAware.","long":"The AutoCompleter service will inject a Context instance into all\nContextAware Matchers.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\AbstractMatcher":{"class":{"descriptions":{"short":"Abstract tab completion Matcher.","long":"@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\ClassAttributesMatcher":{"class":{"descriptions":{"short":"A class attribute tab completion Matcher.","long":"Given a namespace and class, this matcher provides completion for constants\nand static properties.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\ClassMethodsMatcher":{"class":{"descriptions":{"short":"A class method tab completion Matcher.","long":"Given a namespace and class, this matcher provides completion for static\nmethods.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\ClassNamesMatcher":{"class":{"descriptions":{"short":"A class name tab completion Matcher.","long":"This matcher provides completion for all declared classes.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\CommandsMatcher":{"class":{"descriptions":{"short":"A Psy Command tab completion Matcher.","long":"This matcher provides completion for all registered Psy Command names and\naliases.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$commands"],"optionals":[],"docParameters":{"$commands":{"type":"Command[]","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"CommandsMatcher constructor.","long":""},"deprecated":false}}}},"Psy\\TabCompletion\\Matcher\\ConstantsMatcher":{"class":{"descriptions":{"short":"A constant name tab completion Matcher.","long":"This matcher provides completion for all defined constants.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\FunctionsMatcher":{"class":{"descriptions":{"short":"A function name tab completion Matcher.","long":"This matcher provides completion for all internal and user-defined functions.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\KeywordsMatcher":{"class":{"descriptions":{"short":"A PHP keyword tab completion Matcher.","long":"This matcher provides completion for all function-like PHP keywords.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\MongoClientMatcher":{"class":{"descriptions":{"short":"A MongoDB Client tab completion Matcher.","long":"This matcher provides completion for MongoClient database names.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\MongoDatabaseMatcher":{"class":{"descriptions":{"short":"A MongoDB tab completion Matcher.","long":"This matcher provides completion for Mongo collection names.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\ObjectAttributesMatcher":{"class":{"descriptions":{"short":"An object attribute tab completion Matcher.","long":"This matcher provides completion for properties of objects in the current\nContext.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\ObjectMethodsMatcher":{"class":{"descriptions":{"short":"An object method tab completion Matcher.","long":"This matcher provides completion for methods of objects in the current\nContext.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\TabCompletion\\Matcher\\VariablesMatcher":{"class":{"descriptions":{"short":"A variable name tab completion Matcher.","long":"This matcher provides completion for variable names in the current Context.\n\n@author Marc Garcia <markcial@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Util\\Docblock":{"class":{"descriptions":{"short":"A docblock representation.","long":"Based on PHP-DocBlock-Parser by Paul Scott:\n\n{@link http:\/\/www.github.com\/icio\/PHP-DocBlock-Parser}\n\n@author Paul Scott <paul@duedil.com>\n@author Justin Hileman <justin@justinhileman.info>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$reflector"],"optionals":[],"docParameters":{"$reflector":{"type":"\\Reflector","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Docblock constructor.","long":""},"deprecated":false}}}},"Psy\\Util\\Json":{"class":{"descriptions":{"short":"A static class to wrap JSON encoding\/decoding with PsySH's default options.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Util\\Mirror":{"class":{"descriptions":{"short":"A utility class for getting Reflectors.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\Util\\Str":{"class":{"descriptions":{"short":"String utility methods.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Psy\\VarDumper\\Cloner":{"class":{"descriptions":{"short":"A PsySH-specialized VarCloner.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$casters"],"docParameters":{"$casters":{"type":"callable[]|null","description":"A map of casters."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psy\\VarDumper\\Dumper":{"class":{"descriptions":{"short":"A PsySH-specialized CliDumper.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$output","$charset"],"docParameters":{"$output":{"type":"callable|resource|string|null","description":"A line dumper callable, an opened stream or an output path, defaults to static::$defaultOutput."},"$charset":{"type":"string","description":"The default character encoding to use for non-UTF8 strings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psy\\VarDumper\\Presenter":{"class":{"descriptions":{"short":"A Presenter service.","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$formatter"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Psy\\VarDumper\\PresenterAware":{"class":{"descriptions":{"short":"Presenter injects itself as a dependency to all objects which\nimplement PresenterAware.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SqlFormatter":{"class":{"descriptions":{"short":"SQL Formatter is a collection of utilities for debugging SQL queries.\nIt includes methods for formatting, syntax highlighting, removing comments, etc.","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\ConfigCache":{"class":{"descriptions":{"short":"ConfigCache caches arbitrary content in files on disk.","long":"When in debug mode, those metadata resources that implement\n\\Symfony\\Component\\Config\\Resource\\SelfCheckingResourceInterface will\nbe used to check cache freshness.\n\nDuring a transition period, also instances of\n\\Symfony\\Component\\Config\\Resource\\ResourceInterface will be checked\nby means of the isFresh() method. This behaviour is deprecated since 2.8\nand will be removed in 3.0.\n\n@author Fabien Potencier <fabien@symfony.com>\n@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$file","$debug"],"optionals":[],"docParameters":{"$file":{"type":"string","description":"The absolute cache path"},"$debug":{"type":"bool","description":"Whether debugging is enabled or not"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\ConfigCacheFactory":{"class":{"descriptions":{"short":"Basic implementation of ConfigCacheFactoryInterface that\ncreates an instance of the default ConfigCache.","long":"This factory and\/or cache <em>do not<\/em> support cache validation\nby means of ResourceChecker instances (that is, service-based).\n\n@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$debug"],"optionals":[],"docParameters":{"$debug":{"type":"bool","description":"The debug flag to pass to ConfigCache"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\ConfigCacheFactoryInterface":{"class":{"descriptions":{"short":"Interface for a ConfigCache factory. This factory creates\nan instance of ConfigCacheInterface and initializes the\ncache if necessary.","long":"@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\ConfigCacheInterface":{"class":{"descriptions":{"short":"Interface for ConfigCache.","long":"@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\ArrayNode":{"class":{"descriptions":{"short":"Represents an Array node in the config tree.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\BaseNode":{"class":{"descriptions":{"short":"The base node class.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\BooleanNode":{"class":{"descriptions":{"short":"This node represents a Boolean value in the config tree.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\ArrayNodeDefinition":{"class":{"descriptions":{"short":"This class provides a fluent interface for defining an array node.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\BooleanNodeDefinition":{"class":{"descriptions":{"short":"This class provides a fluent interface for defining a node.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\EnumNodeDefinition":{"class":{"descriptions":{"short":"Enum Node Definition.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\ExprBuilder":{"class":{"descriptions":{"short":"This class builds an if expression.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>\n@author Christophe Coevoet <stof@notk.org>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$node"],"optionals":[],"docParameters":{"$node":{"type":"NodeDefinition","description":"The related node"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\FloatNodeDefinition":{"class":{"descriptions":{"short":"This class provides a fluent interface for defining a float node.","long":"@author Jeanmonod David <david.jeanmonod@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\IntegerNodeDefinition":{"class":{"descriptions":{"short":"This class provides a fluent interface for defining an integer node.","long":"@author Jeanmonod David <david.jeanmonod@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\MergeBuilder":{"class":{"descriptions":{"short":"This class builds merge conditions.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$node"],"optionals":[],"docParameters":{"$node":{"type":"NodeDefinition","description":"The related node"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\NodeBuilder":{"class":{"descriptions":{"short":"This class provides a fluent interface for building a node.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition":{"class":{"descriptions":{"short":"This class provides a fluent interface for defining a node.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface":{"class":{"descriptions":{"short":"An interface that must be implemented by all node parents.","long":"@author Victor Berchet <victor@suumit.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\Builder\\NormalizationBuilder":{"class":{"descriptions":{"short":"This class builds normalization conditions.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$node"],"optionals":[],"docParameters":{"$node":{"type":"NodeDefinition","description":"The related node"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\NumericNodeDefinition":{"class":{"descriptions":{"short":"Abstract class that contains common code of integer and float node definitions.","long":"@author David Jeanmonod <david.jeanmonod@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\ParentNodeDefinitionInterface":{"class":{"descriptions":{"short":"An interface that must be implemented by nodes which can have children.","long":"@author Victor Berchet <victor@suumit.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\Builder\\ScalarNodeDefinition":{"class":{"descriptions":{"short":"This class provides a fluent interface for defining a node.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder":{"class":{"descriptions":{"short":"This is the entry class for building a config tree.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\Builder\\ValidationBuilder":{"class":{"descriptions":{"short":"This class builds validation conditions.","long":"@author Christophe Coevoet <stof@notk.org>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$node"],"optionals":[],"docParameters":{"$node":{"type":"NodeDefinition","description":"The related node"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Builder\\VariableNodeDefinition":{"class":{"descriptions":{"short":"This class provides a fluent interface for defining a node.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeParentInterface|null","description":"The parent"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\ConfigurationInterface":{"class":{"descriptions":{"short":"Configuration interface.","long":"@author Victor Berchet <victor@suumit.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\Dumper\\XmlReferenceDumper":{"class":{"descriptions":{"short":"Dumps a XML reference configuration for the given configuration\/node instance.","long":"@author Wouter J <waldio.webdesign@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\Dumper\\YamlReferenceDumper":{"class":{"descriptions":{"short":"Dumps a Yaml reference configuration for the given configuration\/node instance.","long":"@author Kevin Bond <kevinbond@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\EnumNode":{"class":{"descriptions":{"short":"Node which only allows a finite set of values.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Exception\\DuplicateKeyException":{"class":{"descriptions":{"short":"This exception is thrown whenever the key of an array is not unique. This can\nonly be the case if the configuration is coming from an XML file.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Exception\\Exception":{"class":{"descriptions":{"short":"Base exception for all configuration exceptions.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Exception\\ForbiddenOverwriteException":{"class":{"descriptions":{"short":"This exception is thrown when a configuration path is overwritten from a\nsubsequent configuration file, but the entry node specifically forbids this.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Exception\\InvalidConfigurationException":{"class":{"descriptions":{"short":"A very general exception which can be thrown whenever non of the more specific\nexceptions is suitable.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Exception\\InvalidDefinitionException":{"class":{"descriptions":{"short":"Thrown when an error is detected in a node Definition.","long":"@author Victor Berchet <victor.berchet@suumit.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException":{"class":{"descriptions":{"short":"This exception is thrown if an invalid type is encountered.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Exception\\UnsetKeyException":{"class":{"descriptions":{"short":"This exception is usually not encountered by the end-user, but only used\ninternally to signal the parent scope to unset a key.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\FloatNode":{"class":{"descriptions":{"short":"This node represents a float value in the config tree.","long":"@author Jeanmonod David <david.jeanmonod@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\IntegerNode":{"class":{"descriptions":{"short":"This node represents an integer value in the config tree.","long":"@author Jeanmonod David <david.jeanmonod@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\NodeInterface":{"class":{"descriptions":{"short":"Common Interface among all nodes.","long":"In most cases, it is better to inherit from BaseNode instead of implementing\nthis interface yourself.\n\n@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\NumericNode":{"class":{"descriptions":{"short":"This node represents a numeric value in the config tree.","long":"@author David Jeanmonod <david.jeanmonod@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\Processor":{"class":{"descriptions":{"short":"This class is the entry point for config normalization\/merging\/finalization.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\PrototypeNodeInterface":{"class":{"descriptions":{"short":"This interface must be implemented by nodes which can be used as prototypes.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Definition\\PrototypedArrayNode":{"class":{"descriptions":{"short":"Represents a prototyped Array node in the config tree.","long":"@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\ScalarNode":{"class":{"descriptions":{"short":"This node represents a scalar value in the config tree.","long":"The following values are considered scalars:\n* booleans\n* strings\n* null\n* integers\n* floats\n\n@author Johannes M. Schmitt <schmittjoh@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Definition\\VariableNode":{"class":{"descriptions":{"short":"This node represents a value of variable type in the config tree.","long":"This node is intended for values of arbitrary type.\nAny PHP type is accepted as a value.\n\n@author Jeremy Mikola <jmikola@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$parent"],"docParameters":{"$name":{"type":"string","description":"The name of the node"},"$parent":{"type":"NodeInterface","description":"The parent of this node"}},"throws":{"\\InvalidArgumentException":"if the name contains a period."},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Exception\\FileLoaderImportCircularReferenceException":{"class":{"descriptions":{"short":"Exception class for when a circular reference is detected when importing resources.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$resource"],"optionals":["$sourceResource","$code","$previous"],"docParameters":{"$resource":{"type":"string","description":"The resource that could not be imported"},"$sourceResource":{"type":"string","description":"The original resource importing the new resource"},"$code":{"type":"int","description":"The error code"},"$previous":{"type":"\\Exception","description":"A previous exception"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Exception\\FileLoaderLoadException":{"class":{"descriptions":{"short":"Exception class for when a resource cannot be loaded or imported.","long":"@author Ryan Weaver <ryan@thatsquality.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$resource"],"optionals":["$sourceResource","$code","$previous"],"docParameters":{"$resource":{"type":"string","description":"The resource that could not be imported"},"$sourceResource":{"type":"string","description":"The original resource importing the new resource"},"$code":{"type":"int","description":"The error code"},"$previous":{"type":"\\Exception","description":"A previous exception"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\FileLocator":{"class":{"descriptions":{"short":"FileLocator uses an array of pre-defined paths to find files.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$paths"],"docParameters":{"$paths":{"type":"string|array","description":"A path or an array of paths where to look for resources"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\FileLocatorInterface":{"class":{"descriptions":{"short":"@author Fabien Potencier <fabien@symfony.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Loader\\DelegatingLoader":{"class":{"descriptions":{"short":"DelegatingLoader delegates loading to other loaders using a loader resolver.","long":"This loader acts as an array of LoaderInterface objects - each having\na chance to load a given resource (handled by the resolver)\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$resolver"],"optionals":[],"docParameters":{"$resolver":{"type":"LoaderResolverInterface","description":"A LoaderResolverInterface instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Loader\\FileLoader":{"class":{"descriptions":{"short":"FileLoader is the abstract class used by all built-in loaders that are file based.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$locator"],"optionals":[],"docParameters":{"$locator":{"type":"FileLocatorInterface","description":"A FileLocatorInterface instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Loader\\Loader":{"class":{"descriptions":{"short":"Loader is the abstract class used by all built-in loaders.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Loader\\LoaderInterface":{"class":{"descriptions":{"short":"LoaderInterface is the interface implemented by all loader classes.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Loader\\LoaderResolver":{"class":{"descriptions":{"short":"LoaderResolver selects a loader for a given resource.","long":"A resource can be anything (e.g. a full path to a config file or a Closure).\nEach loader determines whether it can load a resource and how.\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$loaders"],"docParameters":{"$loaders":{"type":"LoaderInterface[]","description":"An array of loaders"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Loader\\LoaderResolverInterface":{"class":{"descriptions":{"short":"LoaderResolverInterface selects a loader for a given resource.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\ResourceCheckerConfigCache":{"class":{"descriptions":{"short":"ResourceCheckerConfigCache uses instances of ResourceCheckerInterface\nto check whether cached data is still fresh.","long":"@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$file"],"optionals":["$resourceCheckers"],"docParameters":{"$file":{"type":"string","description":"The absolute cache path"},"$resourceCheckers":{"type":"ResourceCheckerInterface[]","description":"The ResourceCheckers to use for the freshness check"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\ResourceCheckerConfigCacheFactory":{"class":{"descriptions":{"short":"A ConfigCacheFactory implementation that validates the\ncache with an arbitrary set of ResourceCheckers.","long":"@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$resourceCheckers"],"docParameters":{"$resourceCheckers":{"type":"ResourceCheckerInterface[]","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\ResourceCheckerInterface":{"class":{"descriptions":{"short":"Interface for ResourceCheckers.","long":"When a ResourceCheckerConfigCache instance is checked for freshness, all its associated\nmetadata resources are passed to ResourceCheckers. The ResourceCheckers\ncan then inspect the resources and decide whether the cache can be considered\nfresh or not.\n\n@author Matthias Pigulla <mp@webfactory.de>\n@author Benjamin Klotz <bk@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Resource\\BCResourceInterfaceChecker":{"class":{"descriptions":{"short":"Resource checker for the ResourceInterface. Exists for BC.","long":"@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":true},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Resource\\DirectoryResource":{"class":{"descriptions":{"short":"DirectoryResource represents a resources stored in a subdirectory tree.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$resource"],"optionals":["$pattern"],"docParameters":{"$resource":{"type":"string","description":"The file path to the resource"},"$pattern":{"type":"string|null","description":"A pattern to restrict monitored files"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Resource\\FileExistenceResource":{"class":{"descriptions":{"short":"FileExistenceResource represents a resource stored on the filesystem.\nFreshness is only evaluated against resource creation or deletion.","long":"The resource can be a file or a directory.\n\n@author Charles-Henri Bruyand <charleshenri.bruyand@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$resource"],"optionals":[],"docParameters":{"$resource":{"type":"string","description":"The file path to the resource"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Resource\\FileResource":{"class":{"descriptions":{"short":"FileResource represents a resource stored on the filesystem.","long":"The resource can be a file or a directory.\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$resource"],"optionals":[],"docParameters":{"$resource":{"type":"string","description":"The file path to the resource"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Config\\Resource\\ResourceInterface":{"class":{"descriptions":{"short":"ResourceInterface is the interface that must be implemented by all Resource classes.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Resource\\SelfCheckingResourceChecker":{"class":{"descriptions":{"short":"Resource checker for instances of SelfCheckingResourceInterface.","long":"As these resources perform the actual check themselves, we can provide\nthis class as a standard way of validating them.\n\n@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Resource\\SelfCheckingResourceInterface":{"class":{"descriptions":{"short":"Interface for Resources that can check for freshness autonomously,\nwithout special support from external services.","long":"@author Matthias Pigulla <mp@webfactory.de>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Config\\Util\\XmlUtils":{"class":{"descriptions":{"short":"XMLUtils is a bunch of utility methods to XML operations.","long":"This class contains static methods only and is not meant to be instantiated.\n\n@author Fabien Potencier <fabien@symfony.com>\n@author Martin Haso\u0148 <martin.hason@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"This class should not be instantiated.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Application":{"class":{"descriptions":{"short":"An Application is the container for a collection of commands.","long":"It is the main entry point of a Console application.\n\nThis class is optimized for a standard CLI environment.\n\nUsage:\n\n$app = new Application('myapp', '1.0 (stable)');\n$app->add(new SimpleCommand());\n$app->run();\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name","$version"],"docParameters":{"$name":{"type":"string","description":"The name of the application"},"$version":{"type":"string","description":"The version of the application"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Command\\Command":{"class":{"descriptions":{"short":"Base class for all commands.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Command\\HelpCommand":{"class":{"descriptions":{"short":"HelpCommand displays the help for a given command.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Command\\ListCommand":{"class":{"descriptions":{"short":"ListCommand displays the list of all available commands for the application.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$name"],"docParameters":{"$name":{"type":"string|null","description":"The name of the command; passing null means it must be set in configure()"}},"throws":{"LogicException":"When the command name is empty"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\ConsoleEvents":{"class":{"descriptions":{"short":"Contains all events dispatched by an Application.","long":"@author Francesco Levorato <git@flevour.net>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Descriptor\\ApplicationDescription":{"class":{"descriptions":{"short":"@author Jean-Fran\u00e7ois Simon <jeanfrancois.simon@sensiolabs.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$application"],"optionals":["$namespace"],"docParameters":{"$application":{"type":"Application","description":null},"$namespace":{"type":"string|null","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Descriptor\\Descriptor":{"class":{"descriptions":{"short":"@author Jean-Fran\u00e7ois Simon <jeanfrancois.simon@sensiolabs.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Descriptor\\DescriptorInterface":{"class":{"descriptions":{"short":"Descriptor interface.","long":"@author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Descriptor\\JsonDescriptor":{"class":{"descriptions":{"short":"JSON descriptor.","long":"@author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Descriptor\\MarkdownDescriptor":{"class":{"descriptions":{"short":"Markdown descriptor.","long":"@author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Descriptor\\TextDescriptor":{"class":{"descriptions":{"short":"Text descriptor.","long":"@author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Descriptor\\XmlDescriptor":{"class":{"descriptions":{"short":"XML descriptor.","long":"@author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Exception\\CommandNotFoundException":{"class":{"descriptions":{"short":"Represents an incorrect command name typed in the console.","long":"@author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$alternatives","$code","$previous"],"docParameters":{"$message":{"type":"string","description":"Exception message to throw."},"$alternatives":{"type":"array","description":"List of similar defined names."},"$code":{"type":"int","description":"Exception code."},"$previous":{"type":"Exception","description":"previous exception used for the exception chaining."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Exception\\ExceptionInterface":{"class":{"descriptions":{"short":"ExceptionInterface.","long":"@author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Exception\\InvalidArgumentException":{"class":{"descriptions":{"short":"@author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Exception\\InvalidOptionException":{"class":{"descriptions":{"short":"Represents an incorrect option name typed in the console.","long":"@author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Exception\\LogicException":{"class":{"descriptions":{"short":"@author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Exception\\RuntimeException":{"class":{"descriptions":{"short":"@author J\u00e9r\u00f4me Tamarelle <jerome@tamarelle.net>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Formatter\\OutputFormatter":{"class":{"descriptions":{"short":"Formatter class for console output.","long":"@author Konstantin Kudryashov <ever.zet@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$decorated","$styles"],"docParameters":{"$decorated":{"type":"bool","description":"Whether this formatter should actually decorate strings"},"$styles":{"type":"OutputFormatterStyleInterface[]","description":"Array of \"name => FormatterStyle\" instances"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes console output formatter.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface":{"class":{"descriptions":{"short":"Formatter interface for console output.","long":"@author Konstantin Kudryashov <ever.zet@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle":{"class":{"descriptions":{"short":"Formatter style class for defining styles.","long":"@author Konstantin Kudryashov <ever.zet@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$foreground","$background","$options"],"docParameters":{"$foreground":{"type":"string|null","description":"The style foreground color name"},"$background":{"type":"string|null","description":"The style background color name"},"$options":{"type":"array","description":"The style options"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Initializes output formatter style.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleInterface":{"class":{"descriptions":{"short":"Formatter style interface for defining styles.","long":"@author Konstantin Kudryashov <ever.zet@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack":{"class":{"descriptions":{"short":"@author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$emptyStyle"],"docParameters":{"$emptyStyle":{"type":"OutputFormatterStyleInterface|null","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\DebugFormatterHelper":{"class":{"descriptions":{"short":"Helps outputting debug information when running an external program from a command.","long":"An external program can be a Process, an HTTP request, or anything else.\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Helper\\DescriptorHelper":{"class":{"descriptions":{"short":"This class adds helper method to describe objects in various formats.","long":"@author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\DialogHelper":{"class":{"descriptions":{"short":"The Dialog class provides helpers to interact with the user.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":true},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$triggerDeprecationError"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\FormatterHelper":{"class":{"descriptions":{"short":"The Formatter class provides helpers to format messages.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Helper\\Helper":{"class":{"descriptions":{"short":"Helper is the base class for all helper classes.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Helper\\HelperInterface":{"class":{"descriptions":{"short":"HelperInterface is the interface all helpers must implement.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Helper\\HelperSet":{"class":{"descriptions":{"short":"HelperSet represents a set of helpers to be used with a command.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$helpers"],"docParameters":{"$helpers":{"type":"Helper[]","description":"An array of helper."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\InputAwareHelper":{"class":{"descriptions":{"short":"An implementation of InputAwareInterface for Helpers.","long":"@author Wouter J <waldio.webdesign@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Helper\\ProcessHelper":{"class":{"descriptions":{"short":"The ProcessHelper class provides helpers to run external processes.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Helper\\ProgressBar":{"class":{"descriptions":{"short":"The ProgressBar provides helpers to display progress output.","long":"@author Fabien Potencier <fabien@symfony.com>\n@author Chris Jones <leeked@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$output"],"optionals":["$max"],"docParameters":{"$output":{"type":"OutputInterface","description":"An OutputInterface instance"},"$max":{"type":"int","description":"Maximum steps (0 if unknown)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\ProgressHelper":{"class":{"descriptions":{"short":"The Progress class provides helpers to display progress output.","long":"@author Chris Jones <leeked@gmail.com>\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":true},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$triggerDeprecationError"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\ProgressIndicator":{"class":{"descriptions":{"short":"@author Kevin Bond <kevinbond@gmail.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$output"],"optionals":["$format","$indicatorChangeInterval","$indicatorValues"],"docParameters":{"$output":{"type":"OutputInterface","description":null},"$format":{"type":"string|null","description":"Indicator format"},"$indicatorChangeInterval":{"type":"int","description":"Change interval in milliseconds"},"$indicatorValues":{"type":"array|null","description":"Animated indicator characters"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\QuestionHelper":{"class":{"descriptions":{"short":"The QuestionHelper class provides helpers to interact with the user.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Helper\\SymfonyQuestionHelper":{"class":{"descriptions":{"short":"Symfony Style Guide compliant question helper.","long":"@author Kevin Bond <kevinbond@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Helper\\Table":{"class":{"descriptions":{"short":"Provides helpers to display a table.","long":"@author Fabien Potencier <fabien@symfony.com>\n@author \u0421\u0430\u0448\u0430 \u0421\u0442\u0430\u043c\u0435\u043d\u043a\u043e\u0432\u0438\u045b <umpirsky@gmail.com>\n@author Abdellatif Ait boudad <a.aitboudad@gmail.com>\n@author Max Grigorian <maxakawizard@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$output"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\TableCell":{"class":{"descriptions":{"short":"@author Abdellatif Ait boudad <a.aitboudad@gmail.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$value","$options"],"docParameters":{"$value":{"type":"string","description":null},"$options":{"type":"array","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\TableHelper":{"class":{"descriptions":{"short":"Provides helpers to display table output.","long":"@author \u0421\u0430\u0448\u0430 \u0421\u0442\u0430\u043c\u0435\u043d\u043a\u043e\u0432\u0438\u045b <umpirsky@gmail.com>\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":true},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$triggerDeprecationError"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\TableSeparator":{"class":{"descriptions":{"short":"Marks a row as being a separator.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options"],"docParameters":{"$value":{"type":"string","description":null},"$options":{"type":"array","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Helper\\TableStyle":{"class":{"descriptions":{"short":"Defines the styles for a Table.","long":"@author Fabien Potencier <fabien@symfony.com>\n@author \u0421\u0430\u0448\u0430 \u0421\u0442\u0430\u043c\u0435\u043d\u043a\u043e\u0432\u0438\u045b <umpirsky@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Input\\ArgvInput":{"class":{"descriptions":{"short":"ArgvInput represents an input coming from the CLI arguments.","long":"Usage:\n\n$input = new ArgvInput();\n\nBy default, the `$_SERVER['argv']` array is used for the input values.\n\nThis can be overridden by explicitly passing the input values in the constructor:\n\n$input = new ArgvInput($_SERVER['argv']);\n\nIf you pass it yourself, don't forget that the first element of the array\nis the name of the running application.\n\nWhen passing an argument to the constructor, be sure that it respects\nthe same rules as the argv one. It's almost always better to use the\n`StringInput` when you want to provide your own input.\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$argv","$definition"],"docParameters":{"$argv":{"type":"array","description":"An array of parameters from the CLI (in the argv format)"},"$definition":{"type":"InputDefinition","description":"A InputDefinition instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Input\\ArrayInput":{"class":{"descriptions":{"short":"ArrayInput represents an input provided as an array.","long":"Usage:\n\n$input = new ArrayInput(array('name' => 'foo', '--bar' => 'foobar'));\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$parameters"],"optionals":["$definition"],"docParameters":{"$parameters":{"type":"array","description":"An array of parameters"},"$definition":{"type":"InputDefinition","description":"A InputDefinition instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Input\\Input":{"class":{"descriptions":{"short":"Input is the base class for all concrete Input classes.","long":"Three concrete classes are provided by default:\n\n* `ArgvInput`: The input comes from the CLI arguments (argv)\n* `StringInput`: The input is provided as a string\n* `ArrayInput`: The input is provided as an array\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$definition"],"docParameters":{"$definition":{"type":"InputDefinition","description":"A InputDefinition instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Input\\InputArgument":{"class":{"descriptions":{"short":"Represents a command line argument.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$mode","$description","$default"],"docParameters":{"$name":{"type":"string","description":"The argument name"},"$mode":{"type":"int","description":"The argument mode: self::REQUIRED or self::OPTIONAL"},"$description":{"type":"string","description":"A description text"},"$default":{"type":"mixed","description":"The default value (for self::OPTIONAL mode only)"}},"throws":{"InvalidArgumentException":"When argument mode is not valid"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Input\\InputAwareInterface":{"class":{"descriptions":{"short":"InputAwareInterface should be implemented by classes that depends on the\nConsole Input.","long":"@author Wouter J <waldio.webdesign@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Input\\InputDefinition":{"class":{"descriptions":{"short":"A InputDefinition represents a set of valid command line arguments and options.","long":"Usage:\n\n$definition = new InputDefinition(array(\nnew InputArgument('name', InputArgument::REQUIRED),\nnew InputOption('foo', 'f', InputOption::VALUE_REQUIRED),\n));\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$definition"],"docParameters":{"$definition":{"type":"array","description":"An array of InputArgument and InputOption instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Input\\InputInterface":{"class":{"descriptions":{"short":"InputInterface is the interface implemented by all input classes.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Input\\InputOption":{"class":{"descriptions":{"short":"Represents a command line option.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$shortcut","$mode","$description","$default"],"docParameters":{"$name":{"type":"string","description":"The option name"},"$shortcut":{"type":"string|array","description":"The shortcuts, can be null, a string of shortcuts delimited by | or an array of shortcuts"},"$mode":{"type":"int","description":"The option mode: One of the VALUE_* constants"},"$description":{"type":"string","description":"A description text"},"$default":{"type":"mixed","description":"The default value (must be null for self::VALUE_REQUIRED or self::VALUE_NONE)"}},"throws":{"InvalidArgumentException":"If option mode is invalid or incompatible"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Input\\StringInput":{"class":{"descriptions":{"short":"StringInput represents an input provided as a string.","long":"Usage:\n\n$input = new StringInput('foo --bar=\"foobar\"');\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$input"],"optionals":["$definition"],"docParameters":{"$input":{"type":"string","description":"An array of parameters from the CLI (in the argv format)"},"$definition":{"type":"InputDefinition","description":"A InputDefinition instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":true}}}},"Symfony\\Component\\Console\\Logger\\ConsoleLogger":{"class":{"descriptions":{"short":"PSR-3 compliant console logger.","long":"@author K\u00e9vin Dunglas <dunglas@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$output"],"optionals":["$verbosityLevelMap","$formatLevelMap"],"docParameters":{"$output":{"type":"OutputInterface","description":null},"$verbosityLevelMap":{"type":"array","description":null},"$formatLevelMap":{"type":"array","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Output\\BufferedOutput":{"class":{"descriptions":{"short":"@author Jean-Fran\u00e7ois Simon <contact@jfsimon.fr>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$verbosity","$decorated","$formatter"],"docParameters":{"$verbosity":{"type":"int","description":"The verbosity level (one of the VERBOSITY constants in OutputInterface)"},"$decorated":{"type":"bool","description":"Whether to decorate messages"},"$formatter":{"type":"OutputFormatterInterface|null","description":"Output formatter instance (null to use default OutputFormatter)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Output\\ConsoleOutput":{"class":{"descriptions":{"short":"ConsoleOutput is the default class for all CLI output. It uses STDOUT.","long":"This class is a convenient wrapper around `StreamOutput`.\n\n$output = new ConsoleOutput();\n\nThis is equivalent to:\n\n$output = new StreamOutput(fopen('php:\/\/stdout', 'w'));\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$verbosity","$decorated","$formatter"],"docParameters":{"$verbosity":{"type":"int","description":"The verbosity level (one of the VERBOSITY constants in OutputInterface)"},"$decorated":{"type":"bool|null","description":"Whether to decorate messages (null for auto-guessing)"},"$formatter":{"type":"OutputFormatterInterface|null","description":"Output formatter instance (null to use default OutputFormatter)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Output\\ConsoleOutputInterface":{"class":{"descriptions":{"short":"ConsoleOutputInterface is the interface implemented by ConsoleOutput class.\nThis adds information about stderr output stream.","long":"@author Dariusz G\u00f3recki <darek.krk@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Output\\NullOutput":{"class":{"descriptions":{"short":"NullOutput suppresses all output.","long":"$output = new NullOutput();\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Output\\Output":{"class":{"descriptions":{"short":"Base class for output classes.","long":"There are five levels of verbosity:\n\n* normal: no option passed (normal output)\n* verbose: -v (more output)\n* very verbose: -vv (highly extended output)\n* debug: -vvv (all debug output)\n* quiet: -q (no output)\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$verbosity","$decorated","$formatter"],"docParameters":{"$verbosity":{"type":"int","description":"The verbosity level (one of the VERBOSITY constants in OutputInterface)"},"$decorated":{"type":"bool","description":"Whether to decorate messages"},"$formatter":{"type":"OutputFormatterInterface|null","description":"Output formatter instance (null to use default OutputFormatter)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Output\\OutputInterface":{"class":{"descriptions":{"short":"OutputInterface is the interface implemented by all Output classes.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Output\\StreamOutput":{"class":{"descriptions":{"short":"StreamOutput writes the output to a given stream.","long":"Usage:\n\n$output = new StreamOutput(fopen('php:\/\/stdout', 'w'));\n\nAs `StreamOutput` can use any stream, you can also use a file:\n\n$output = new StreamOutput(fopen('\/path\/to\/output.log', 'a', false));\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$stream"],"optionals":["$verbosity","$decorated","$formatter"],"docParameters":{"$stream":{"type":"resource","description":"A stream resource"},"$verbosity":{"type":"int","description":"The verbosity level (one of the VERBOSITY constants in OutputInterface)"},"$decorated":{"type":"bool|null","description":"Whether to decorate messages (null for auto-guessing)"},"$formatter":{"type":"OutputFormatterInterface|null","description":"Output formatter instance (null to use default OutputFormatter)"}},"throws":{"InvalidArgumentException":"When first argument is not a real stream"},"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Question\\ChoiceQuestion":{"class":{"descriptions":{"short":"Represents a choice question.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$question","$choices"],"optionals":["$default"],"docParameters":{"$question":{"type":"string","description":"The question to ask to the user"},"$choices":{"type":"array","description":"The list of available choices"},"$default":{"type":"mixed","description":"The default answer to return"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Question\\ConfirmationQuestion":{"class":{"descriptions":{"short":"Represents a yes\/no question.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$question"],"optionals":["$default","$trueAnswerRegex"],"docParameters":{"$question":{"type":"string","description":"The question to ask to the user"},"$default":{"type":"bool","description":"The default answer to return, true or false"},"$trueAnswerRegex":{"type":"string","description":"A regex to match the \"yes\" answer"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Question\\Question":{"class":{"descriptions":{"short":"Represents a Question.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$question"],"optionals":["$default"],"docParameters":{"$question":{"type":"string","description":"The question to ask to the user"},"$default":{"type":"mixed","description":"The default answer to return if the user enters nothing"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Shell":{"class":{"descriptions":{"short":"A Shell wraps an Application to add shell capabilities to it.","long":"Support for history and completion only works with a PHP compiled\nwith readline support (either --with-readline or --with-libedit)"},"deprecated":true},"methods":{"constructor":{"has":true,"args":{"parameters":["$application"],"optionals":[],"docParameters":{"$application":{"type":"Application","description":"An application instance"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":"If there is no readline support for the current PHP executable\na \\RuntimeException exception is thrown."},"deprecated":false}}}},"Symfony\\Component\\Console\\Style\\OutputStyle":{"class":{"descriptions":{"short":"Decorates output to add console style guide helpers.","long":"@author Kevin Bond <kevinbond@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$output"],"optionals":[],"docParameters":{"$output":{"type":"OutputInterface","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Style\\StyleInterface":{"class":{"descriptions":{"short":"Output style helpers.","long":"@author Kevin Bond <kevinbond@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Console\\Style\\SymfonyStyle":{"class":{"descriptions":{"short":"Output decorator helpers for the Symfony Style Guide.","long":"@author Kevin Bond <kevinbond@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$input","$output"],"optionals":[],"docParameters":{"$input":{"type":"InputInterface","description":null},"$output":{"type":"OutputInterface","description":null}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Tester\\ApplicationTester":{"class":{"descriptions":{"short":"Eases the testing of console applications.","long":"When testing an application, don't forget to disable the auto exit flag:\n\n$application = new Application();\n$application->setAutoExit(false);\n\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$application"],"optionals":[],"docParameters":{"$application":{"type":"Application","description":"An Application instance to test."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Console\\Tester\\CommandTester":{"class":{"descriptions":{"short":"Eases the testing of console commands.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$command"],"optionals":[],"docParameters":{"$command":{"type":"Command","description":"A Command instance to test."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Filesystem\\Exception\\ExceptionInterface":{"class":{"descriptions":{"short":"Exception interface for all exceptions thrown by the component.","long":"@author Romain Neutron <imprec@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException":{"class":{"descriptions":{"short":"Exception class thrown when a file couldn't be found.","long":"@author Fabien Potencier <fabien@symfony.com>\n@author Christian G\u00e4rtner <christiangaertner.film@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous","$path"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Filesystem\\Exception\\IOException":{"class":{"descriptions":{"short":"Exception class thrown when a filesystem operation failure happens.","long":"@author Romain Neutron <imprec@gmail.com>\n@author Christian G\u00e4rtner <christiangaertner.film@googlemail.com>\n@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$code","$previous","$path"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Filesystem\\Exception\\IOExceptionInterface":{"class":{"descriptions":{"short":"IOException interface for file and input\/output stream related exceptions thrown by the component.","long":"@author Christian G\u00e4rtner <christiangaertner.film@googlemail.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Filesystem\\Filesystem":{"class":{"descriptions":{"short":"Provides basic utility to manipulate the file system.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Filesystem\\LockHandler":{"class":{"descriptions":{"short":"LockHandler class provides a simple abstraction to lock anything by means of\na file lock.","long":"A locked file is created based on the lock name when calling lock(). Other\nlock handlers will not be able to lock the same name until it is released\n(explicitly by calling release() or implicitly when the instance holding the\nlock is destroyed).\n\n@author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>\n@author Romain Neutron <imprec@gmail.com>\n@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$lockPath"],"docParameters":{"$name":{"type":"string","description":"The lock name"},"$lockPath":{"type":"string|null","description":"The directory to store the lock. Default values will use temporary directory"}},"throws":{"IOException":"If the lock directory could not be created or is not writable"},"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Caster\\AmqpCaster":{"class":{"descriptions":{"short":"Casts Amqp related classes to array representation.","long":"@author Gr\u00e9goire Pineau <lyrixx@lyrixx.info>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\Caster":{"class":{"descriptions":{"short":"Helper for filtering out properties in casters.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\ConstStub":{"class":{"descriptions":{"short":"Represents a PHP constant and its value.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name","$value"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Caster\\CutArrayStub":{"class":{"descriptions":{"short":"Represents a cut array.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value","$preservedKeys"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Caster\\CutStub":{"class":{"descriptions":{"short":"Represents the main properties of a PHP variable, pre-casted by a caster.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Caster\\DOMCaster":{"class":{"descriptions":{"short":"Casts DOM related classes to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster":{"class":{"descriptions":{"short":"Casts Doctrine related classes to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\EnumStub":{"class":{"descriptions":{"short":"Represents an enumeration of values.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$values"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster":{"class":{"descriptions":{"short":"Casts common Exception classes to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\FrameStub":{"class":{"descriptions":{"short":"Represents a single backtrace frame as returned by debug_backtrace() or Exception->getTrace().","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$frame"],"optionals":["$keepArgs","$inTraceStub"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Caster\\MongoCaster":{"class":{"descriptions":{"short":"Casts classes from the MongoDb extension to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\PdoCaster":{"class":{"descriptions":{"short":"Casts PDO related classes to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\PgSqlCaster":{"class":{"descriptions":{"short":"Casts pqsql resources to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster":{"class":{"descriptions":{"short":"Casts Reflector related classes to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\ResourceCaster":{"class":{"descriptions":{"short":"Casts common resource types to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\SplCaster":{"class":{"descriptions":{"short":"Casts SPL related classes to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\StubCaster":{"class":{"descriptions":{"short":"Casts a caster's Stub.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Caster\\TraceStub":{"class":{"descriptions":{"short":"Represents a backtrace as returned by debug_backtrace() or Exception->getTrace().","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$trace"],"optionals":["$keepArgs","$sliceOffset","$sliceLength","$numberingOffset"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Caster\\XmlResourceCaster":{"class":{"descriptions":{"short":"Casts XML resources to array representation.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner":{"class":{"descriptions":{"short":"AbstractCloner implements a generic caster mechanism for objects and resources.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$casters"],"docParameters":{"$casters":{"type":"callable[]|null","description":"A map of casters."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Cloner\\ClonerInterface":{"class":{"descriptions":{"short":"@author Nicolas Grekas <p@tchwork.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Cloner\\Cursor":{"class":{"descriptions":{"short":"Represents the current state of a dumper while dumping.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Cloner\\Data":{"class":{"descriptions":{"short":"@author Nicolas Grekas <p@tchwork.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$data"],"optionals":[],"docParameters":{"$data":{"type":"array","description":"A array as returned by ClonerInterface::cloneVar()."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Cloner\\DumperInterface":{"class":{"descriptions":{"short":"DumperInterface used by Data objects.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Cloner\\Stub":{"class":{"descriptions":{"short":"Represents the main properties of a PHP variable.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Cloner\\VarCloner":{"class":{"descriptions":{"short":"@author Nicolas Grekas <p@tchwork.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$casters"],"docParameters":{"$casters":{"type":"callable[]|null","description":"A map of casters."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper":{"class":{"descriptions":{"short":"Abstract mechanism for dumping a Data object.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$output","$charset"],"docParameters":{"$output":{"type":"callable|resource|string|null","description":"A line dumper callable, an opened stream or an output path, defaults to static::$defaultOutput."},"$charset":{"type":"string","description":"The default character encoding to use for non-UTF8 strings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Dumper\\CliDumper":{"class":{"descriptions":{"short":"CliDumper dumps variables for command line output.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$output","$charset"],"docParameters":{"$output":{"type":"callable|resource|string|null","description":"A line dumper callable, an opened stream or an output path, defaults to static::$defaultOutput."},"$charset":{"type":"string","description":"The default character encoding to use for non-UTF8 strings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Dumper\\DataDumperInterface":{"class":{"descriptions":{"short":"DataDumperInterface for dumping Data objects.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\Dumper\\HtmlDumper":{"class":{"descriptions":{"short":"HtmlDumper dumps variables as HTML.","long":"@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$output","$charset"],"docParameters":{"$output":{"type":"callable|resource|string|null","description":"A line dumper callable, an opened stream or an output path, defaults to static::$defaultOutput."},"$charset":{"type":"string","description":"The default character encoding to use for non-UTF8 strings."}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Exception\\ThrowingCasterException":{"class":{"descriptions":{"short":"@author Nicolas Grekas <p@tchwork.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$prev"],"optionals":["$e"],"docParameters":{"$prev":{"type":"\\Exception","description":"The exception thrown from the caster"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\VarDumper\\Test\\VarDumperTestTrait":{"class":{"descriptions":{"short":"@author Nicolas Grekas <p@tchwork.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\VarDumper\\VarDumper":{"class":{"descriptions":{"short":"@author Nicolas Grekas <p@tchwork.com>","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Yaml\\Dumper":{"class":{"descriptions":{"short":"Dumper dumps PHP variables to YAML strings.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Yaml\\Escaper":{"class":{"descriptions":{"short":"Escaper encapsulates escaping rules for single and double-quoted\nYAML strings.","long":"@author Matthew Lewinski <matthew@lewinski.org>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Yaml\\Exception\\DumpException":{"class":{"descriptions":{"short":"Exception class thrown when an error occurs during dumping.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Yaml\\Exception\\ExceptionInterface":{"class":{"descriptions":{"short":"Exception interface for all exceptions thrown by the component.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Yaml\\Exception\\ParseException":{"class":{"descriptions":{"short":"Exception class thrown when an error occurs during parsing.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$message"],"optionals":["$parsedLine","$snippet","$parsedFile","$previous"],"docParameters":{"$message":{"type":"string","description":"The error message"},"$parsedLine":{"type":"int","description":"The line where the error occurred"},"$snippet":{"type":"int","description":"The snippet of code near the problem"},"$parsedFile":{"type":"string","description":"The file name where the error occurred"},"$previous":{"type":"\\Exception","description":"The previous exception"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Yaml\\Exception\\RuntimeException":{"class":{"descriptions":{"short":"Exception class thrown when an error occurs during parsing.","long":"@author Romain Neutron <imprec@gmail.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Symfony\\Component\\Yaml\\Inline":{"class":{"descriptions":{"short":"Inline implements a YAML parser\/dumper for the YAML inline syntax.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Yaml\\Parser":{"class":{"descriptions":{"short":"Parser parses YAML strings to convert them to PHP arrays.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$offset"],"docParameters":{"$offset":{"type":"int","description":"The offset of YAML document (used for line numbers in error messages)"}},"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"Constructor.","long":""},"deprecated":false}}}},"Symfony\\Component\\Yaml\\Unescaper":{"class":{"descriptions":{"short":"Unescaper encapsulates unescaping rules for single and double-quoted\nYAML strings.","long":"@author Matthew Lewinski <matthew@lewinski.org>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Component\\Yaml\\Yaml":{"class":{"descriptions":{"short":"Yaml offers convenience methods to load and dump YAML.","long":"@author Fabien Potencier <fabien@symfony.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Symfony\\Polyfill\\Mbstring\\Mbstring":{"class":{"descriptions":{"short":"Partial mbstring implementation in PHP, iconv based, UTF-8 centric.","long":"Implemented:\n- mb_convert_encoding     - Convert character encoding\n- mb_convert_variables    - Convert character code in variable(s)\n- mb_decode_mimeheader    - Decode string in MIME header field\n- mb_encode_mimeheader    - Encode string for MIME header XXX NATIVE IMPLEMENTATION IS REALLY BUGGED\n- mb_convert_case         - Perform case folding on a string\n- mb_get_info             - Get internal settings of mbstring\n- mb_http_input           - Detect HTTP input character encoding\n- mb_http_output          - Set\/Get HTTP output character encoding\n- mb_internal_encoding    - Set\/Get internal character encoding\n- mb_list_encodings       - Returns an array of all supported encodings\n- mb_output_handler       - Callback function converts character encoding in output buffer\n- mb_strlen               - Get string length\n- mb_strpos               - Find position of first occurrence of string in a string\n- mb_strrpos              - Find position of last occurrence of a string in a string\n- mb_strtolower           - Make a string lowercase\n- mb_strtoupper           - Make a string uppercase\n- mb_substitute_character - Set\/Get substitution character\n- mb_substr               - Get part of string\n- mb_stripos              - Finds position of first occurrence of a string within another, case insensitive\n- mb_stristr              - Finds first occurrence of a string within another, case insensitive\n- mb_strrchr              - Finds the last occurrence of a character in a string within another\n- mb_strrichr             - Finds the last occurrence of a character in a string within another, case insensitive\n- mb_strripos             - Finds position of last occurrence of a string within another, case insensitive\n- mb_strstr               - Finds first occurrence of a string within anothers\n- mb_strwidth             - Return width of string\n- mb_substr_count         - Count the number of substring occurrences\n\nNot implemented:\n- mb_convert_kana         - Convert \"kana\" one from another (\"zen-kaku\", \"han-kaku\" and more)\n- mb_decode_numericentity - Decode HTML numeric string reference to character\n- mb_encode_numericentity - Encode character to HTML numeric string reference\n- mb_ereg_*               - Regular expression with multibyte support\n- mb_parse_str            - Parse GET\/POST\/COOKIE data and set global variable\n- mb_preferred_mime_name  - Get MIME charset string\n- mb_regex_encoding       - Returns current encoding for multibyte regex as string\n- mb_regex_set_options    - Set\/Get the default options for mbregex functions\n- mb_send_mail            - Send encoded mail\n- mb_split                - Split multibyte string using regular expression\n- mb_strcut               - Get part of string\n- mb_strimwidth           - Get truncated string with specified width\n\n@author Nicolas Grekas <p@tchwork.com>"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"XdgBaseDir\\Xdg":{"class":{"descriptions":{"short":"Simple implementation of the XDG standard http:\/\/standards.freedesktop.org\/basedir-spec\/basedir-spec-latest.html","long":"Based on the python implementation https:\/\/github.com\/takluyver\/pyxdg\/blob\/master\/xdg\/BaseDirectory.py\n\nClass Xdg"},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"stdClass":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Exception":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ErrorException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$severity","$filename","$lineno","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Error":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ParseError":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"TypeError":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ArgumentCountError":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ArithmeticError":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DivisionByZeroError":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Closure":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Generator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ClosedGeneratorException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DateTime":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$time","$object"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DateTimeImmutable":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$time","$object"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DateTimeZone":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$timezone"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DateInterval":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$interval_spec"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DatePeriod":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$start","$interval","$end"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"LibXMLError":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SQLite3":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$filename"],"optionals":["$flags","$encryption_key"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SQLite3Stmt":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$sqlite3"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SQLite3Result":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"CURLFile":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$filename"],"optionals":["$mimetype","$postname"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMStringList":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMNameList":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMImplementationList":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMImplementationSource":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMImplementation":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMNode":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMNameSpaceNode":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMDocumentFragment":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMDocument":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$version","$encoding"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMNodeList":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMNamedNodeMap":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMCharacterData":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMAttr":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$value"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMElement":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$value","$uri"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMText":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$value"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMComment":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$value"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMTypeinfo":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMUserDataHandler":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMDomError":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMErrorHandler":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMLocator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMConfiguration":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMCdataSection":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$value"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMDocumentType":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMNotation":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMEntity":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMEntityReference":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMProcessingInstruction":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":["$value"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DOMStringExtend":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"DOMXPath":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$doc"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"finfo":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$options","$arg"],"docParameters":[],"throws":[],"return":{"type":"void","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"LogicException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"BadFunctionCallException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"BadMethodCallException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DomainException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"InvalidArgumentException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"LengthException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"OutOfRangeException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RuntimeException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"OutOfBoundsException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"OverflowException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RangeException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"UnderflowException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"UnexpectedValueException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RecursiveIteratorIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":["$mode","$flags"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IteratorIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"FilterIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RecursiveFilterIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"CallbackFilterIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator","$callback"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RecursiveCallbackFilterIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator","$callback"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ParentIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"LimitIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":["$offset","$count"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"CachingIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":["$flags"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RecursiveCachingIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":["$flags"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"NoRewindIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"AppendIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"InfiniteIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RegexIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator","$regex"],"optionals":["$mode","$flags","$preg_flags"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RecursiveRegexIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator","$regex"],"optionals":["$mode","$flags","$preg_flags"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"EmptyIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"RecursiveTreeIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$iterator"],"optionals":["$flags","$caching_it_flags","$mode"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ArrayObject":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$array","$ar_flags","$iterator_class"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ArrayIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$array","$ar_flags","$iterator_class"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RecursiveArrayIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$array","$ar_flags","$iterator_class"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SplFileInfo":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$file_name"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"DirectoryIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$path"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"FilesystemIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$path"],"optionals":["$flags"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"RecursiveDirectoryIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$path"],"optionals":["$flags"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"GlobIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$path"],"optionals":["$flags"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SplFileObject":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$file_name"],"optionals":["$open_mode","$use_include_path","$context"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SplTempFileObject":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$max_memory"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SplDoublyLinkedList":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SplQueue":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SplStack":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SplHeap":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SplMinHeap":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SplMaxHeap":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SplPriorityQueue":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"SplFixedArray":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$size"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SplObjectStorage":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"MultipleIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$flags"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SessionHandler":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"__PHP_Incomplete_Class":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"php_user_filter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Directory":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"AssertionError":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"PDOException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"PDO":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$dsn"],"optionals":["$username","$passwd","$options"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"PDOStatement":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PDORow":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"PharException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Phar":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$filename"],"optionals":["$flags","$alias","$fileformat"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"PharData":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$filename"],"optionals":["$flags","$alias","$fileformat"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"PharFileInfo":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$filename"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Reflection":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ReflectionFunctionAbstract":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ReflectionFunction":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionGenerator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$generator"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionParameter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$function","$parameter"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionType":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ReflectionNamedType":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ReflectionMethod":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$class_or_method"],"optionals":["$name"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionClass":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$argument"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionObject":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$argument"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionProperty":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$class","$name"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionClassConstant":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$class","$name"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionExtension":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ReflectionZendExtension":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$name"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"mysqli_sql_exception":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"mysqli_driver":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"mysqli":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$host","$user","$password","$database","$port","$socket"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"mysqli_warning":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"mysqli_result":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"mysqli_stmt":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SimpleXMLElement":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$data"],"optionals":["$options","$data_is_url","$ns","$is_prefix"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SimpleXMLIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$data"],"optionals":["$options","$data_is_url","$ns","$is_prefix"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SoapClient":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$wsdl"],"optionals":["$options"],"docParameters":[],"throws":[],"return":{"type":"void","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SoapVar":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$data","$encoding"],"optionals":["$type_name","$type_namespace","$node_name","$node_namespace"],"docParameters":[],"throws":[],"return":{"type":"void","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SoapServer":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$wsdl"],"optionals":["$options"],"docParameters":[],"throws":[],"return":{"type":"void","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SoapFault":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$faultcode","$faultstring"],"optionals":["$faultactor","$detail","$faultname","$headerfault"],"docParameters":[],"throws":[],"return":{"type":"void","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SoapParam":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$data","$name"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"void","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"SoapHeader":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$namespace","$name"],"optionals":["$data","$mustunderstand","$actor"],"docParameters":[],"throws":[],"return":{"type":"void","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"XMLReader":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"XMLWriter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"XSLTProcessor":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"ZipArchive":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Collator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$arg1"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"NumberFormatter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$locale","$style"],"optionals":["$pattern"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Normalizer":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"Locale":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"MessageFormatter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$locale","$pattern"],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlDateFormatter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$locale","$datetype","$timetype"],"optionals":["$timezone","$calendar","$pattern"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"ResourceBundle":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$locale","$bundlename"],"optionals":["$fallback"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Transliterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlTimeZone":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlCalendar":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlGregorianCalendar":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$timeZoneOrYear","$localeOrMonth","$dayOfMonth","$hour","$minute","$second"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"Spoofchecker":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlException":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$message","$code","$previous"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"IntlBreakIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlRuleBasedBreakIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":["$rules"],"optionals":["$areCompiled"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlCodePointBreakIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":[],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlPartsIterator":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}},"UConverter":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":true,"args":{"parameters":[],"optionals":["$destination_encoding","$source_encoding"],"docParameters":[],"throws":[],"return":{"type":"self","description":null},"descriptions":{"short":"","long":""},"deprecated":false}}}},"IntlChar":{"class":{"descriptions":{"short":"","long":""},"deprecated":false},"methods":{"constructor":{"has":false,"args":[]}}}},"autocomplete":["ApaiIO\\ApaiIO","ApaiIO\\Common\\OperationTrait","ApaiIO\\Configuration\\ConfigurationInterface","ApaiIO\\Configuration\\Country","ApaiIO\\Configuration\\GenericConfiguration","ApaiIO\\Operations\\AbstractOperation","ApaiIO\\Operations\\BrowseNodeLookup","ApaiIO\\Operations\\CartAdd","ApaiIO\\Operations\\CartClear","ApaiIO\\Operations\\CartCreate","ApaiIO\\Operations\\Lookup","ApaiIO\\Operations\\OperationInterface","ApaiIO\\Operations\\Search","ApaiIO\\Operations\\SimilarityLookup","ApaiIO\\Request\\RequestFactory","ApaiIO\\Request\\RequestInterface","ApaiIO\\Request\\Rest\\Request","ApaiIO\\Request\\Soap\\Request","ApaiIO\\Request\\Util","ApaiIO\\ResponseTransformer\\ObjectToArray","ApaiIO\\ResponseTransformer\\ResponseTransformerFactory","ApaiIO\\ResponseTransformer\\ResponseTransformerInterface","ApaiIO\\ResponseTransformer\\XmlToDomDocument","ApaiIO\\ResponseTransformer\\XmlToSimpleXmlObject","ApaiIO\\ResponseTransformer\\Xslt","App\\Console\\Installer","App\\Controller\\Component\\ProductComponent","App\\Model\\Entity\\User","App\\Model\\Table\\CategoriesTable","App\\Model\\Table\\CategoryEbayTable","App\\Model\\Table\\CategoryKeywordsTable","App\\Model\\Table\\ExportAmazonTable","App\\Model\\Table\\ImportErrorsTable","App\\Model\\Table\\ImportLogsTable","App\\Model\\Table\\ImportReadLogsTable","App\\Model\\Table\\ImportReportsTable","App\\Model\\Table\\ProductImagesTable","App\\Model\\Table\\ProductLogInsertsTable","App\\Model\\Table\\ProductLogUpdatesTable","App\\Model\\Table\\ProductsTable","App\\Model\\Table\\SettingsTable","App\\Model\\Table\\UsersTable","App\\Shell\\ConsoleShell","App\\Shell\\EbayShell","App\\Shell\\ManagerShell","App\\View\\AjaxView","App\\View\\AppView","Aura\\Intl\\BasicFormatter","Aura\\Intl\\Exception","Aura\\Intl\\Exception\\CannotFormat","Aura\\Intl\\Exception\\CannotInstantiateFormatter","Aura\\Intl\\Exception\\FormatterNotMapped","Aura\\Intl\\Exception\\IcuVersionTooLow","Aura\\Intl\\FormatterInterface","Aura\\Intl\\FormatterLocator","Aura\\Intl\\IntlFormatter","Aura\\Intl\\Package","Aura\\Intl\\PackageFactory","Aura\\Intl\\PackageLocator","Aura\\Intl\\PackageLocatorInterface","Aura\\Intl\\Translator","Aura\\Intl\\TranslatorFactory","Aura\\Intl\\TranslatorInterface","Aura\\Intl\\TranslatorLocator","Bake\\Shell\\BakeShell","Bake\\Shell\\Task\\BakeTask","Bake\\Shell\\Task\\BakeTemplateTask","Bake\\Shell\\Task\\BehaviorTask","Bake\\Shell\\Task\\CellTask","Bake\\Shell\\Task\\ComponentTask","Bake\\Shell\\Task\\ControllerTask","Bake\\Shell\\Task\\FixtureTask","Bake\\Shell\\Task\\FormTask","Bake\\Shell\\Task\\HelperTask","Bake\\Shell\\Task\\MailerTask","Bake\\Shell\\Task\\ModelTask","Bake\\Shell\\Task\\PluginTask","Bake\\Shell\\Task\\ShellHelperTask","Bake\\Shell\\Task\\ShellTask","Bake\\Shell\\Task\\SimpleBakeTask","Bake\\Shell\\Task\\TemplateTask","Bake\\Shell\\Task\\TestTask","Bake\\Utility\\Model\\AssociationFilter","Bake\\View\\BakeView","Bake\\View\\Helper\\BakeHelper","Bake\\View\\Helper\\DocBlockHelper","Cake\\Auth\\AbstractPasswordHasher","Cake\\Auth\\BaseAuthenticate","Cake\\Auth\\BaseAuthorize","Cake\\Auth\\BasicAuthenticate","Cake\\Auth\\ControllerAuthorize","Cake\\Auth\\DefaultPasswordHasher","Cake\\Auth\\DigestAuthenticate","Cake\\Auth\\FallbackPasswordHasher","Cake\\Auth\\FormAuthenticate","Cake\\Auth\\PasswordHasherFactory","Cake\\Auth\\Storage\\MemoryStorage","Cake\\Auth\\Storage\\SessionStorage","Cake\\Auth\\Storage\\StorageInterface","Cake\\Auth\\WeakPasswordHasher","Cake\\Cache\\Cache","Cake\\Cache\\CacheEngine","Cake\\Cache\\CacheRegistry","Cake\\Cache\\Engine\\ApcEngine","Cake\\Cache\\Engine\\FileEngine","Cake\\Cache\\Engine\\MemcachedEngine","Cake\\Cache\\Engine\\NullEngine","Cake\\Cache\\Engine\\RedisEngine","Cake\\Cache\\Engine\\WincacheEngine","Cake\\Cache\\Engine\\XcacheEngine","Cake\\Collection\\Collection","Cake\\Collection\\CollectionInterface","Cake\\Collection\\CollectionTrait","Cake\\Collection\\ExtractTrait","Cake\\Collection\\Iterator\\BufferedIterator","Cake\\Collection\\Iterator\\ExtractIterator","Cake\\Collection\\Iterator\\FilterIterator","Cake\\Collection\\Iterator\\InsertIterator","Cake\\Collection\\Iterator\\MapReduce","Cake\\Collection\\Iterator\\NestIterator","Cake\\Collection\\Iterator\\NoChildrenIterator","Cake\\Collection\\Iterator\\ReplaceIterator","Cake\\Collection\\Iterator\\SortIterator","Cake\\Collection\\Iterator\\StoppableIterator","Cake\\Collection\\Iterator\\TreeIterator","Cake\\Collection\\Iterator\\TreePrinter","Cake\\Collection\\Iterator\\UnfoldIterator","Cake\\Collection\\Iterator\\ZipIterator","Cake\\Console\\ConsoleErrorHandler","Cake\\Console\\ConsoleInput","Cake\\Console\\ConsoleInputArgument","Cake\\Console\\ConsoleInputOption","Cake\\Console\\ConsoleInputSubcommand","Cake\\Console\\ConsoleIo","Cake\\Console\\ConsoleOptionParser","Cake\\Console\\ConsoleOutput","Cake\\Console\\Exception\\ConsoleException","Cake\\Console\\Exception\\MissingHelperException","Cake\\Console\\Exception\\MissingShellException","Cake\\Console\\Exception\\MissingShellMethodException","Cake\\Console\\Exception\\MissingTaskException","Cake\\Console\\HelpFormatter","Cake\\Console\\Helper","Cake\\Console\\HelperRegistry","Cake\\Console\\Shell","Cake\\Console\\ShellDispatcher","Cake\\Console\\TaskRegistry","Cake\\Controller\\Component","Cake\\Controller\\ComponentRegistry","Cake\\Controller\\Component\\AuthComponent","Cake\\Controller\\Component\\CookieComponent","Cake\\Controller\\Component\\CsrfComponent","Cake\\Controller\\Component\\FlashComponent","Cake\\Controller\\Component\\PaginatorComponent","Cake\\Controller\\Component\\RequestHandlerComponent","Cake\\Controller\\Component\\SecurityComponent","Cake\\Controller\\Controller","Cake\\Controller\\ErrorController","Cake\\Controller\\Exception\\MissingActionException","Cake\\Controller\\Exception\\MissingComponentException","Cake\\Core\\App","Cake\\Core\\ClassLoader","Cake\\Core\\Configure","Cake\\Core\\Configure\\ConfigEngineInterface","Cake\\Core\\Configure\\Engine\\IniConfig","Cake\\Core\\Configure\\Engine\\JsonConfig","Cake\\Core\\Configure\\Engine\\PhpConfig","Cake\\Core\\Configure\\FileConfigTrait","Cake\\Core\\ConventionsTrait","Cake\\Core\\Exception\\Exception","Cake\\Core\\Exception\\MissingPluginException","Cake\\Core\\InstanceConfigTrait","Cake\\Core\\ObjectRegistry","Cake\\Core\\Plugin","Cake\\Core\\StaticConfigTrait","Cake\\Database\\Connection","Cake\\Database\\Dialect\\MysqlDialectTrait","Cake\\Database\\Dialect\\PostgresDialectTrait","Cake\\Database\\Dialect\\SqliteDialectTrait","Cake\\Database\\Dialect\\SqlserverDialectTrait","Cake\\Database\\Dialect\\TupleComparisonTranslatorTrait","Cake\\Database\\Driver","Cake\\Database\\Driver\\Mysql","Cake\\Database\\Driver\\PDODriverTrait","Cake\\Database\\Driver\\Postgres","Cake\\Database\\Driver\\Sqlite","Cake\\Database\\Driver\\Sqlserver","Cake\\Database\\Exception","Cake\\Database\\Exception\\MissingConnectionException","Cake\\Database\\Exception\\MissingDriverException","Cake\\Database\\Exception\\MissingExtensionException","Cake\\Database\\ExpressionInterface","Cake\\Database\\Expression\\BetweenExpression","Cake\\Database\\Expression\\CaseExpression","Cake\\Database\\Expression\\Comparison","Cake\\Database\\Expression\\FieldInterface","Cake\\Database\\Expression\\FieldTrait","Cake\\Database\\Expression\\FunctionExpression","Cake\\Database\\Expression\\IdentifierExpression","Cake\\Database\\Expression\\OrderByExpression","Cake\\Database\\Expression\\OrderClauseExpression","Cake\\Database\\Expression\\QueryExpression","Cake\\Database\\Expression\\TupleComparison","Cake\\Database\\Expression\\UnaryExpression","Cake\\Database\\Expression\\ValuesExpression","Cake\\Database\\FunctionsBuilder","Cake\\Database\\IdentifierQuoter","Cake\\Database\\Log\\LoggedQuery","Cake\\Database\\Log\\LoggingStatement","Cake\\Database\\Log\\QueryLogger","Cake\\Database\\Query","Cake\\Database\\QueryCompiler","Cake\\Database\\Schema\\BaseSchema","Cake\\Database\\Schema\\CachedCollection","Cake\\Database\\Schema\\Collection","Cake\\Database\\Schema\\MysqlSchema","Cake\\Database\\Schema\\PostgresSchema","Cake\\Database\\Schema\\SqliteSchema","Cake\\Database\\Schema\\SqlserverSchema","Cake\\Database\\Schema\\Table","Cake\\Database\\SqlDialectTrait","Cake\\Database\\SqliteCompiler","Cake\\Database\\SqlserverCompiler","Cake\\Database\\StatementInterface","Cake\\Database\\Statement\\BufferResultsTrait","Cake\\Database\\Statement\\BufferedStatement","Cake\\Database\\Statement\\CallbackStatement","Cake\\Database\\Statement\\MysqlStatement","Cake\\Database\\Statement\\PDOStatement","Cake\\Database\\Statement\\SqliteStatement","Cake\\Database\\Statement\\SqlserverStatement","Cake\\Database\\Statement\\StatementDecorator","Cake\\Database\\Type","Cake\\Database\\TypeConverterTrait","Cake\\Database\\TypeMap","Cake\\Database\\TypeMapTrait","Cake\\Database\\Type\\BinaryType","Cake\\Database\\Type\\BoolType","Cake\\Database\\Type\\DateTimeType","Cake\\Database\\Type\\DateType","Cake\\Database\\Type\\FloatType","Cake\\Database\\Type\\IntegerType","Cake\\Database\\Type\\StringType","Cake\\Database\\Type\\TimeType","Cake\\Database\\Type\\UuidType","Cake\\Database\\ValueBinder","Cake\\Datasource\\ConnectionInterface","Cake\\Datasource\\ConnectionManager","Cake\\Datasource\\ConnectionRegistry","Cake\\Datasource\\EntityInterface","Cake\\Datasource\\EntityTrait","Cake\\Datasource\\Exception\\InvalidPrimaryKeyException","Cake\\Datasource\\Exception\\MissingDatasourceConfigException","Cake\\Datasource\\Exception\\MissingDatasourceException","Cake\\Datasource\\Exception\\MissingModelException","Cake\\Datasource\\Exception\\RecordNotFoundException","Cake\\Datasource\\FixtureInterface","Cake\\Datasource\\ModelAwareTrait","Cake\\Datasource\\QueryCacher","Cake\\Datasource\\QueryInterface","Cake\\Datasource\\QueryTrait","Cake\\Datasource\\RepositoryInterface","Cake\\Datasource\\ResultSetDecorator","Cake\\Datasource\\ResultSetInterface","Cake\\Datasource\\RulesAwareTrait","Cake\\Datasource\\RulesChecker","Cake\\Error\\BaseErrorHandler","Cake\\Error\\Debugger","Cake\\Error\\ErrorHandler","Cake\\Error\\ExceptionRenderer","Cake\\Error\\FatalErrorException","Cake\\Error\\PHP7ErrorException","Cake\\Event\\Event","Cake\\Event\\EventDispatcherInterface","Cake\\Event\\EventDispatcherTrait","Cake\\Event\\EventListenerInterface","Cake\\Event\\EventManager","Cake\\Event\\EventManagerTrait","Cake\\Filesystem\\File","Cake\\Filesystem\\Folder","Cake\\Form\\Form","Cake\\Form\\Schema","Cake\\I18n\\ChainMessagesLoader","Cake\\I18n\\Formatter\\IcuFormatter","Cake\\I18n\\Formatter\\SprintfFormatter","Cake\\I18n\\I18n","Cake\\I18n\\MessagesFileLoader","Cake\\I18n\\Number","Cake\\I18n\\Parser\\MoFileParser","Cake\\I18n\\Parser\\PoFileParser","Cake\\I18n\\PluralRules","Cake\\I18n\\TranslatorRegistry","Cake\\Log\\Engine\\BaseLog","Cake\\Log\\Engine\\ConsoleLog","Cake\\Log\\Engine\\FileLog","Cake\\Log\\Engine\\SyslogLog","Cake\\Log\\Log","Cake\\Log\\LogEngineRegistry","Cake\\Log\\LogTrait","Cake\\Mailer\\AbstractTransport","Cake\\Mailer\\Email","Cake\\Mailer\\Exception\\MissingActionException","Cake\\Mailer\\Exception\\MissingMailerException","Cake\\Mailer\\Mailer","Cake\\Mailer\\MailerAwareTrait","Cake\\Mailer\\Transport\\DebugTransport","Cake\\Mailer\\Transport\\MailTransport","Cake\\Mailer\\Transport\\SmtpTransport","Cake\\Network\\Exception\\BadRequestException","Cake\\Network\\Exception\\ConflictException","Cake\\Network\\Exception\\ForbiddenException","Cake\\Network\\Exception\\GoneException","Cake\\Network\\Exception\\HttpException","Cake\\Network\\Exception\\InternalErrorException","Cake\\Network\\Exception\\InvalidCsrfTokenException","Cake\\Network\\Exception\\MethodNotAllowedException","Cake\\Network\\Exception\\NotAcceptableException","Cake\\Network\\Exception\\NotFoundException","Cake\\Network\\Exception\\NotImplementedException","Cake\\Network\\Exception\\ServiceUnavailableException","Cake\\Network\\Exception\\SocketException","Cake\\Network\\Exception\\UnauthorizedException","Cake\\Network\\Http\\Adapter\\Stream","Cake\\Network\\Http\\Auth\\Basic","Cake\\Network\\Http\\Auth\\Digest","Cake\\Network\\Http\\Auth\\Oauth","Cake\\Network\\Http\\Client","Cake\\Network\\Http\\CookieCollection","Cake\\Network\\Http\\FormData","Cake\\Network\\Http\\FormData\\Part","Cake\\Network\\Http\\Message","Cake\\Network\\Http\\Request","Cake\\Network\\Http\\Response","Cake\\Network\\Request","Cake\\Network\\Response","Cake\\Network\\Session","Cake\\Network\\Session\\CacheSession","Cake\\Network\\Session\\DatabaseSession","Cake\\Network\\Socket","Cake\\ORM\\Association","Cake\\ORM\\AssociationCollection","Cake\\ORM\\Association\\BelongsTo","Cake\\ORM\\Association\\BelongsToMany","Cake\\ORM\\Association\\DependentDeleteTrait","Cake\\ORM\\Association\\ExternalAssociationTrait","Cake\\ORM\\Association\\HasMany","Cake\\ORM\\Association\\HasOne","Cake\\ORM\\Association\\SelectableAssociationTrait","Cake\\ORM\\AssociationsNormalizerTrait","Cake\\ORM\\Behavior","Cake\\ORM\\BehaviorRegistry","Cake\\ORM\\Behavior\\CounterCacheBehavior","Cake\\ORM\\Behavior\\TimestampBehavior","Cake\\ORM\\Behavior\\TranslateBehavior","Cake\\ORM\\Behavior\\Translate\\TranslateTrait","Cake\\ORM\\Behavior\\TreeBehavior","Cake\\ORM\\EagerLoadable","Cake\\ORM\\EagerLoader","Cake\\ORM\\Entity","Cake\\ORM\\Exception\\MissingBehaviorException","Cake\\ORM\\Exception\\MissingEntityException","Cake\\ORM\\Exception\\MissingTableClassException","Cake\\ORM\\LazyEagerLoader","Cake\\ORM\\Locator\\LocatorAwareTrait","Cake\\ORM\\Locator\\LocatorInterface","Cake\\ORM\\Locator\\TableLocator","Cake\\ORM\\Marshaller","Cake\\ORM\\Query","Cake\\ORM\\ResultSet","Cake\\ORM\\Rule\\ExistsIn","Cake\\ORM\\Rule\\IsUnique","Cake\\ORM\\RulesChecker","Cake\\ORM\\Table","Cake\\ORM\\TableRegistry","Cake\\Routing\\Dispatcher","Cake\\Routing\\DispatcherFactory","Cake\\Routing\\DispatcherFilter","Cake\\Routing\\Exception\\MissingControllerException","Cake\\Routing\\Exception\\MissingDispatcherFilterException","Cake\\Routing\\Exception\\MissingRouteException","Cake\\Routing\\Filter\\AssetFilter","Cake\\Routing\\Filter\\ControllerFactoryFilter","Cake\\Routing\\Filter\\LocaleSelectorFilter","Cake\\Routing\\Filter\\RoutingFilter","Cake\\Routing\\RequestActionTrait","Cake\\Routing\\RouteBuilder","Cake\\Routing\\RouteCollection","Cake\\Routing\\Route\\DashedRoute","Cake\\Routing\\Route\\InflectedRoute","Cake\\Routing\\Route\\PluginShortRoute","Cake\\Routing\\Route\\RedirectRoute","Cake\\Routing\\Route\\Route","Cake\\Routing\\Router","Cake\\Shell\\CommandListShell","Cake\\Shell\\CompletionShell","Cake\\Shell\\Helper\\ProgressHelper","Cake\\Shell\\Helper\\TableHelper","Cake\\Shell\\I18nShell","Cake\\Shell\\OrmCacheShell","Cake\\Shell\\PluginShell","Cake\\Shell\\RoutesShell","Cake\\Shell\\ServerShell","Cake\\Shell\\Task\\AssetsTask","Cake\\Shell\\Task\\CommandTask","Cake\\Shell\\Task\\ExtractTask","Cake\\Shell\\Task\\LoadTask","Cake\\Shell\\Task\\UnloadTask","Cake\\TestSuite\\Fixture\\FixtureManager","Cake\\TestSuite\\Fixture\\TestFixture","Cake\\TestSuite\\StringCompareTrait","Cake\\TestSuite\\Stub\\ConsoleOutput","Cake\\TestSuite\\Stub\\Response","Cake\\Test\\Fixture\\ArticlesFixture","Cake\\Test\\Fixture\\ArticlesTagsFixture","Cake\\Test\\Fixture\\AttachmentsFixture","Cake\\Test\\Fixture\\AuthUsersFixture","Cake\\Test\\Fixture\\AuthorsFixture","Cake\\Test\\Fixture\\AuthorsTagsFixture","Cake\\Test\\Fixture\\CakeSessionsFixture","Cake\\Test\\Fixture\\CategoriesFixture","Cake\\Test\\Fixture\\CommentsFixture","Cake\\Test\\Fixture\\CompositeIncrementsFixture","Cake\\Test\\Fixture\\CounterCacheCategoriesFixture","Cake\\Test\\Fixture\\CounterCachePostsFixture","Cake\\Test\\Fixture\\CounterCacheUserCategoryPostsFixture","Cake\\Test\\Fixture\\CounterCacheUsersFixture","Cake\\Test\\Fixture\\FeaturedTagsFixture","Cake\\Test\\Fixture\\GroupsFixture","Cake\\Test\\Fixture\\GroupsMembersFixture","Cake\\Test\\Fixture\\MembersFixture","Cake\\Test\\Fixture\\MenuLinkTreesFixture","Cake\\Test\\Fixture\\NumberTreesFixture","Cake\\Test\\Fixture\\OrdersFixture","Cake\\Test\\Fixture\\PolymorphicTaggedFixture","Cake\\Test\\Fixture\\PostsFixture","Cake\\Test\\Fixture\\ProductsFixture","Cake\\Test\\Fixture\\SessionsFixture","Cake\\Test\\Fixture\\SiteArticlesFixture","Cake\\Test\\Fixture\\SiteArticlesTagsFixture","Cake\\Test\\Fixture\\SiteAuthorsFixture","Cake\\Test\\Fixture\\SiteTagsFixture","Cake\\Test\\Fixture\\SpecialTagsFixture","Cake\\Test\\Fixture\\TagsFixture","Cake\\Test\\Fixture\\TagsTranslationsFixture","Cake\\Test\\Fixture\\TestPluginCommentsFixture","Cake\\Test\\Fixture\\ThingsFixture","Cake\\Test\\Fixture\\TranslatesFixture","Cake\\Test\\Fixture\\UsersFixture","Cake\\Test\\Fixture\\UuiditemsFixture","Cake\\Test\\Fixture\\UuidportfoliosFixture","Cake\\Utility\\CookieCryptTrait","Cake\\Utility\\Crypto\\Mcrypt","Cake\\Utility\\Crypto\\OpenSsl","Cake\\Utility\\Exception\\XmlException","Cake\\Utility\\Hash","Cake\\Utility\\Inflector","Cake\\Utility\\MergeVariablesTrait","Cake\\Utility\\Security","Cake\\Utility\\Text","Cake\\Utility\\Xml","Cake\\Validation\\RulesProvider","Cake\\Validation\\ValidatableInterface","Cake\\Validation\\Validation","Cake\\Validation\\ValidationRule","Cake\\Validation\\ValidationSet","Cake\\Validation\\Validator","Cake\\Validation\\ValidatorAwareTrait","Cake\\View\\AjaxView","Cake\\View\\Cell","Cake\\View\\CellTrait","Cake\\View\\Exception\\MissingCellException","Cake\\View\\Exception\\MissingCellViewException","Cake\\View\\Exception\\MissingElementException","Cake\\View\\Exception\\MissingHelperException","Cake\\View\\Exception\\MissingLayoutException","Cake\\View\\Exception\\MissingTemplateException","Cake\\View\\Exception\\MissingViewException","Cake\\View\\Form\\ArrayContext","Cake\\View\\Form\\ContextInterface","Cake\\View\\Form\\EntityContext","Cake\\View\\Form\\FormContext","Cake\\View\\Form\\NullContext","Cake\\View\\Helper","Cake\\View\\HelperRegistry","Cake\\View\\Helper\\FlashHelper","Cake\\View\\Helper\\FormHelper","Cake\\View\\Helper\\HtmlHelper","Cake\\View\\Helper\\IdGeneratorTrait","Cake\\View\\Helper\\NumberHelper","Cake\\View\\Helper\\PaginatorHelper","Cake\\View\\Helper\\RssHelper","Cake\\View\\Helper\\SecureFieldTokenTrait","Cake\\View\\Helper\\SessionHelper","Cake\\View\\Helper\\TextHelper","Cake\\View\\Helper\\TimeHelper","Cake\\View\\Helper\\UrlHelper","Cake\\View\\JsonView","Cake\\View\\SerializedView","Cake\\View\\StringTemplate","Cake\\View\\StringTemplateTrait","Cake\\View\\View","Cake\\View\\ViewBlock","Cake\\View\\ViewBuilder","Cake\\View\\ViewVarsTrait","Cake\\View\\Widget\\BasicWidget","Cake\\View\\Widget\\ButtonWidget","Cake\\View\\Widget\\CheckboxWidget","Cake\\View\\Widget\\DateTimeWidget","Cake\\View\\Widget\\FileWidget","Cake\\View\\Widget\\LabelWidget","Cake\\View\\Widget\\MultiCheckboxWidget","Cake\\View\\Widget\\NestingLabelWidget","Cake\\View\\Widget\\RadioWidget","Cake\\View\\Widget\\SelectBoxWidget","Cake\\View\\Widget\\TextareaWidget","Cake\\View\\Widget\\WidgetInterface","Cake\\View\\Widget\\WidgetRegistry","Cake\\View\\XmlView","DebugKit\\Cache\\Engine\\DebugEngine","DebugKit\\Controller\\Component\\ToolbarComponent","DebugKit\\Controller\\PanelsController","DebugKit\\Controller\\RequestsController","DebugKit\\Controller\\ToolbarController","DebugKit\\Database\\Log\\DebugLog","DebugKit\\DebugMemory","DebugKit\\DebugPanel","DebugKit\\DebugTimer","DebugKit\\Log\\Engine\\DebugKitLog","DebugKit\\Model\\Behavior\\TimedBehavior","DebugKit\\Model\\Entity\\Panel","DebugKit\\Model\\Table\\LazyTableTrait","DebugKit\\Model\\Table\\PanelsTable","DebugKit\\Model\\Table\\RequestsTable","DebugKit\\Panel\\CachePanel","DebugKit\\Panel\\EnvironmentPanel","DebugKit\\Panel\\HistoryPanel","DebugKit\\Panel\\IncludePanel","DebugKit\\Panel\\LogPanel","DebugKit\\Panel\\PanelRegistry","DebugKit\\Panel\\RequestPanel","DebugKit\\Panel\\SessionPanel","DebugKit\\Panel\\SqlLogPanel","DebugKit\\Panel\\TimerPanel","DebugKit\\Panel\\VariablesPanel","DebugKit\\Routing\\Filter\\DebugBarFilter","DebugKit\\Shell\\BenchmarkShell","DebugKit\\Shell\\WhitespaceShell","DebugKit\\View\\Helper\\SimpleGraphHelper","DebugKit\\View\\Helper\\TidyHelper","DebugKit\\View\\Helper\\ToolbarHelper","Detection\\MobileDetect","JakubOnderka\\PhpConsoleColor\\ConsoleColor","JakubOnderka\\PhpConsoleColor\\InvalidStyleException","JakubOnderka\\PhpConsoleHighlighter\\Highlighter","Migrations\\AbstractMigration","Migrations\\CakeAdapter","Migrations\\CakeManager","Migrations\\Command\\Create","Migrations\\Command\\MarkMigrated","Migrations\\Command\\Migrate","Migrations\\Command\\Rollback","Migrations\\Command\\Seed","Migrations\\Command\\Status","Migrations\\ConfigurationTrait","Migrations\\Migrations","Migrations\\MigrationsDispatcher","Migrations\\Shell\\MigrationsShell","Migrations\\Shell\\Task\\CommandTask","Migrations\\Shell\\Task\\CreateTask","Migrations\\Shell\\Task\\MarkMigratedTask","Migrations\\Shell\\Task\\MigrateTask","Migrations\\Shell\\Task\\MigrationSnapshotTask","Migrations\\Shell\\Task\\MigrationTask","Migrations\\Shell\\Task\\RollbackTask","Migrations\\Shell\\Task\\SeedTask","Migrations\\Shell\\Task\\SimpleMigrationTask","Migrations\\Shell\\Task\\StatusTask","Migrations\\Table","Migrations\\Util\\ColumnParser","Migrations\\View\\Helper\\MigrationHelper","Mobile_Detect","Phinx\\Config\\Config","Phinx\\Config\\ConfigInterface","Phinx\\Console\\Command\\AbstractCommand","Phinx\\Console\\Command\\Create","Phinx\\Console\\Command\\Init","Phinx\\Console\\Command\\Migrate","Phinx\\Console\\Command\\Rollback","Phinx\\Console\\Command\\SeedCreate","Phinx\\Console\\Command\\SeedRun","Phinx\\Console\\Command\\Status","Phinx\\Console\\Command\\Test","Phinx\\Console\\PhinxApplication","Phinx\\Db\\Adapter\\AdapterFactory","Phinx\\Db\\Adapter\\AdapterInterface","Phinx\\Db\\Adapter\\AdapterWrapper","Phinx\\Db\\Adapter\\MysqlAdapter","Phinx\\Db\\Adapter\\PdoAdapter","Phinx\\Db\\Adapter\\PostgresAdapter","Phinx\\Db\\Adapter\\ProxyAdapter","Phinx\\Db\\Adapter\\SQLiteAdapter","Phinx\\Db\\Adapter\\SqlServerAdapter","Phinx\\Db\\Adapter\\TablePrefixAdapter","Phinx\\Db\\Adapter\\WrapperInterface","Phinx\\Db\\Table","Phinx\\Db\\Table\\Column","Phinx\\Db\\Table\\ForeignKey","Phinx\\Db\\Table\\Index","Phinx\\Migration\\AbstractMigration","Phinx\\Migration\\CreationInterface","Phinx\\Migration\\IrreversibleMigrationException","Phinx\\Migration\\Manager","Phinx\\Migration\\Manager\\Environment","Phinx\\Migration\\MigrationInterface","Phinx\\Seed\\AbstractSeed","Phinx\\Seed\\SeedInterface","Phinx\\Util\\Util","Phinx\\Wrapper\\TextWrapper","PhpParser\\Autoloader","PhpParser\\Builder","PhpParser\\BuilderAbstract","PhpParser\\BuilderFactory","PhpParser\\Builder\\Class_","PhpParser\\Builder\\Declaration","PhpParser\\Builder\\FunctionLike","PhpParser\\Builder\\Function_","PhpParser\\Builder\\Interface_","PhpParser\\Builder\\Method","PhpParser\\Builder\\Namespace_","PhpParser\\Builder\\Param","PhpParser\\Builder\\Property","PhpParser\\Builder\\Trait_","PhpParser\\Builder\\Use_","PhpParser\\Comment","PhpParser\\Comment\\Doc","PhpParser\\Error","PhpParser\\Lexer","PhpParser\\Lexer\\Emulative","PhpParser\\Node","PhpParser\\NodeAbstract","PhpParser\\NodeDumper","PhpParser\\NodeTraverser","PhpParser\\NodeTraverserInterface","PhpParser\\NodeVisitor","PhpParser\\NodeVisitorAbstract","PhpParser\\NodeVisitor\\NameResolver","PhpParser\\Node\\Arg","PhpParser\\Node\\Const_","PhpParser\\Node\\Expr","PhpParser\\Node\\Expr\\ArrayDimFetch","PhpParser\\Node\\Expr\\ArrayItem","PhpParser\\Node\\Expr\\Array_","PhpParser\\Node\\Expr\\Assign","PhpParser\\Node\\Expr\\AssignOp","PhpParser\\Node\\Expr\\AssignOp\\BitwiseAnd","PhpParser\\Node\\Expr\\AssignOp\\BitwiseOr","PhpParser\\Node\\Expr\\AssignOp\\BitwiseXor","PhpParser\\Node\\Expr\\AssignOp\\Concat","PhpParser\\Node\\Expr\\AssignOp\\Div","PhpParser\\Node\\Expr\\AssignOp\\Minus","PhpParser\\Node\\Expr\\AssignOp\\Mod","PhpParser\\Node\\Expr\\AssignOp\\Mul","PhpParser\\Node\\Expr\\AssignOp\\Plus","PhpParser\\Node\\Expr\\AssignOp\\Pow","PhpParser\\Node\\Expr\\AssignOp\\ShiftLeft","PhpParser\\Node\\Expr\\AssignOp\\ShiftRight","PhpParser\\Node\\Expr\\AssignRef","PhpParser\\Node\\Expr\\BinaryOp","PhpParser\\Node\\Expr\\BinaryOp\\BitwiseAnd","PhpParser\\Node\\Expr\\BinaryOp\\BitwiseOr","PhpParser\\Node\\Expr\\BinaryOp\\BitwiseXor","PhpParser\\Node\\Expr\\BinaryOp\\BooleanAnd","PhpParser\\Node\\Expr\\BinaryOp\\BooleanOr","PhpParser\\Node\\Expr\\BinaryOp\\Coalesce","PhpParser\\Node\\Expr\\BinaryOp\\Concat","PhpParser\\Node\\Expr\\BinaryOp\\Div","PhpParser\\Node\\Expr\\BinaryOp\\Equal","PhpParser\\Node\\Expr\\BinaryOp\\Greater","PhpParser\\Node\\Expr\\BinaryOp\\GreaterOrEqual","PhpParser\\Node\\Expr\\BinaryOp\\Identical","PhpParser\\Node\\Expr\\BinaryOp\\LogicalAnd","PhpParser\\Node\\Expr\\BinaryOp\\LogicalOr","PhpParser\\Node\\Expr\\BinaryOp\\LogicalXor","PhpParser\\Node\\Expr\\BinaryOp\\Minus","PhpParser\\Node\\Expr\\BinaryOp\\Mod","PhpParser\\Node\\Expr\\BinaryOp\\Mul","PhpParser\\Node\\Expr\\BinaryOp\\NotEqual","PhpParser\\Node\\Expr\\BinaryOp\\NotIdentical","PhpParser\\Node\\Expr\\BinaryOp\\Plus","PhpParser\\Node\\Expr\\BinaryOp\\Pow","PhpParser\\Node\\Expr\\BinaryOp\\ShiftLeft","PhpParser\\Node\\Expr\\BinaryOp\\ShiftRight","PhpParser\\Node\\Expr\\BinaryOp\\Smaller","PhpParser\\Node\\Expr\\BinaryOp\\SmallerOrEqual","PhpParser\\Node\\Expr\\BinaryOp\\Spaceship","PhpParser\\Node\\Expr\\BitwiseNot","PhpParser\\Node\\Expr\\BooleanNot","PhpParser\\Node\\Expr\\Cast","PhpParser\\Node\\Expr\\Cast\\Array_","PhpParser\\Node\\Expr\\Cast\\Bool_","PhpParser\\Node\\Expr\\Cast\\Double","PhpParser\\Node\\Expr\\Cast\\Int_","PhpParser\\Node\\Expr\\Cast\\Object_","PhpParser\\Node\\Expr\\Cast\\String_","PhpParser\\Node\\Expr\\Cast\\Unset_","PhpParser\\Node\\Expr\\ClassConstFetch","PhpParser\\Node\\Expr\\Clone_","PhpParser\\Node\\Expr\\Closure","PhpParser\\Node\\Expr\\ClosureUse","PhpParser\\Node\\Expr\\ConstFetch","PhpParser\\Node\\Expr\\Empty_","PhpParser\\Node\\Expr\\ErrorSuppress","PhpParser\\Node\\Expr\\Eval_","PhpParser\\Node\\Expr\\Exit_","PhpParser\\Node\\Expr\\FuncCall","PhpParser\\Node\\Expr\\Include_","PhpParser\\Node\\Expr\\Instanceof_","PhpParser\\Node\\Expr\\Isset_","PhpParser\\Node\\Expr\\List_","PhpParser\\Node\\Expr\\MethodCall","PhpParser\\Node\\Expr\\New_","PhpParser\\Node\\Expr\\PostDec","PhpParser\\Node\\Expr\\PostInc","PhpParser\\Node\\Expr\\PreDec","PhpParser\\Node\\Expr\\PreInc","PhpParser\\Node\\Expr\\Print_","PhpParser\\Node\\Expr\\PropertyFetch","PhpParser\\Node\\Expr\\ShellExec","PhpParser\\Node\\Expr\\StaticCall","PhpParser\\Node\\Expr\\StaticPropertyFetch","PhpParser\\Node\\Expr\\Ternary","PhpParser\\Node\\Expr\\UnaryMinus","PhpParser\\Node\\Expr\\UnaryPlus","PhpParser\\Node\\Expr\\Variable","PhpParser\\Node\\Expr\\YieldFrom","PhpParser\\Node\\Expr\\Yield_","PhpParser\\Node\\FunctionLike","PhpParser\\Node\\Name","PhpParser\\Node\\Name\\FullyQualified","PhpParser\\Node\\Name\\Relative","PhpParser\\Node\\Param","PhpParser\\Node\\Scalar","PhpParser\\Node\\Scalar\\DNumber","PhpParser\\Node\\Scalar\\Encapsed","PhpParser\\Node\\Scalar\\EncapsedStringPart","PhpParser\\Node\\Scalar\\LNumber","PhpParser\\Node\\Scalar\\MagicConst","PhpParser\\Node\\Scalar\\MagicConst\\Class_","PhpParser\\Node\\Scalar\\MagicConst\\Dir","PhpParser\\Node\\Scalar\\MagicConst\\File","PhpParser\\Node\\Scalar\\MagicConst\\Function_","PhpParser\\Node\\Scalar\\MagicConst\\Line","PhpParser\\Node\\Scalar\\MagicConst\\Method","PhpParser\\Node\\Scalar\\MagicConst\\Namespace_","PhpParser\\Node\\Scalar\\MagicConst\\Trait_","PhpParser\\Node\\Scalar\\String_","PhpParser\\Node\\Stmt","PhpParser\\Node\\Stmt\\Break_","PhpParser\\Node\\Stmt\\Case_","PhpParser\\Node\\Stmt\\Catch_","PhpParser\\Node\\Stmt\\ClassConst","PhpParser\\Node\\Stmt\\ClassLike","PhpParser\\Node\\Stmt\\ClassMethod","PhpParser\\Node\\Stmt\\Class_","PhpParser\\Node\\Stmt\\Const_","PhpParser\\Node\\Stmt\\Continue_","PhpParser\\Node\\Stmt\\DeclareDeclare","PhpParser\\Node\\Stmt\\Declare_","PhpParser\\Node\\Stmt\\Do_","PhpParser\\Node\\Stmt\\Echo_","PhpParser\\Node\\Stmt\\ElseIf_","PhpParser\\Node\\Stmt\\Else_","PhpParser\\Node\\Stmt\\For_","PhpParser\\Node\\Stmt\\Foreach_","PhpParser\\Node\\Stmt\\Function_","PhpParser\\Node\\Stmt\\Global_","PhpParser\\Node\\Stmt\\Goto_","PhpParser\\Node\\Stmt\\GroupUse","PhpParser\\Node\\Stmt\\HaltCompiler","PhpParser\\Node\\Stmt\\If_","PhpParser\\Node\\Stmt\\InlineHTML","PhpParser\\Node\\Stmt\\Interface_","PhpParser\\Node\\Stmt\\Label","PhpParser\\Node\\Stmt\\Namespace_","PhpParser\\Node\\Stmt\\Property","PhpParser\\Node\\Stmt\\PropertyProperty","PhpParser\\Node\\Stmt\\Return_","PhpParser\\Node\\Stmt\\StaticVar","PhpParser\\Node\\Stmt\\Static_","PhpParser\\Node\\Stmt\\Switch_","PhpParser\\Node\\Stmt\\Throw_","PhpParser\\Node\\Stmt\\TraitUse","PhpParser\\Node\\Stmt\\TraitUseAdaptation","PhpParser\\Node\\Stmt\\TraitUseAdaptation\\Alias","PhpParser\\Node\\Stmt\\TraitUseAdaptation\\Precedence","PhpParser\\Node\\Stmt\\Trait_","PhpParser\\Node\\Stmt\\TryCatch","PhpParser\\Node\\Stmt\\Unset_","PhpParser\\Node\\Stmt\\UseUse","PhpParser\\Node\\Stmt\\Use_","PhpParser\\Node\\Stmt\\While_","PhpParser\\Parser","PhpParser\\ParserAbstract","PhpParser\\ParserFactory","PhpParser\\Parser\\Multiple","PhpParser\\Parser\\Php5","PhpParser\\Parser\\Php7","PhpParser\\Parser\\Tokens","PhpParser\\PrettyPrinterAbstract","PhpParser\\PrettyPrinter\\Standard","PhpParser\\Serializer","PhpParser\\Serializer\\XML","PhpParser\\Unserializer","PhpParser\\Unserializer\\XML","Psr\\Log\\AbstractLogger","Psr\\Log\\InvalidArgumentException","Psr\\Log\\LogLevel","Psr\\Log\\LoggerAwareInterface","Psr\\Log\\LoggerAwareTrait","Psr\\Log\\LoggerInterface","Psr\\Log\\LoggerTrait","Psr\\Log\\NullLogger","Psy\\Autoloader","Psy\\CodeCleaner","Psy\\CodeCleaner\\AbstractClassPass","Psy\\CodeCleaner\\AssignThisVariablePass","Psy\\CodeCleaner\\CallTimePassByReferencePass","Psy\\CodeCleaner\\CalledClassPass","Psy\\CodeCleaner\\CodeCleanerPass","Psy\\CodeCleaner\\FunctionReturnInWriteContextPass","Psy\\CodeCleaner\\ImplicitReturnPass","Psy\\CodeCleaner\\InstanceOfPass","Psy\\CodeCleaner\\LeavePsyshAlonePass","Psy\\CodeCleaner\\LegacyEmptyPass","Psy\\CodeCleaner\\MagicConstantsPass","Psy\\CodeCleaner\\NamespaceAwarePass","Psy\\CodeCleaner\\NamespacePass","Psy\\CodeCleaner\\StaticConstructorPass","Psy\\CodeCleaner\\UseStatementPass","Psy\\CodeCleaner\\ValidClassNamePass","Psy\\CodeCleaner\\ValidConstantPass","Psy\\CodeCleaner\\ValidFunctionNamePass","Psy\\Command\\BufferCommand","Psy\\Command\\ClearCommand","Psy\\Command\\Command","Psy\\Command\\DocCommand","Psy\\Command\\DumpCommand","Psy\\Command\\ExitCommand","Psy\\Command\\HelpCommand","Psy\\Command\\HistoryCommand","Psy\\Command\\ListCommand","Psy\\Command\\ListCommand\\ClassConstantEnumerator","Psy\\Command\\ListCommand\\ClassEnumerator","Psy\\Command\\ListCommand\\ConstantEnumerator","Psy\\Command\\ListCommand\\Enumerator","Psy\\Command\\ListCommand\\FunctionEnumerator","Psy\\Command\\ListCommand\\GlobalVariableEnumerator","Psy\\Command\\ListCommand\\InterfaceEnumerator","Psy\\Command\\ListCommand\\MethodEnumerator","Psy\\Command\\ListCommand\\PropertyEnumerator","Psy\\Command\\ListCommand\\TraitEnumerator","Psy\\Command\\ListCommand\\VariableEnumerator","Psy\\Command\\ParseCommand","Psy\\Command\\PsyVersionCommand","Psy\\Command\\ReflectingCommand","Psy\\Command\\ShowCommand","Psy\\Command\\ThrowUpCommand","Psy\\Command\\TraceCommand","Psy\\Command\\WhereamiCommand","Psy\\Command\\WtfCommand","Psy\\Compiler","Psy\\ConfigPaths","Psy\\Configuration","Psy\\Context","Psy\\ContextAware","Psy\\Exception\\BreakException","Psy\\Exception\\DeprecatedException","Psy\\Exception\\ErrorException","Psy\\Exception\\Exception","Psy\\Exception\\FatalErrorException","Psy\\Exception\\ParseErrorException","Psy\\Exception\\RuntimeException","Psy\\Exception\\ThrowUpException","Psy\\ExecutionLoop\\ForkingLoop","Psy\\ExecutionLoop\\Loop","Psy\\Formatter\\CodeFormatter","Psy\\Formatter\\DocblockFormatter","Psy\\Formatter\\Formatter","Psy\\Formatter\\SignatureFormatter","Psy\\Output\\OutputPager","Psy\\Output\\PassthruPager","Psy\\Output\\ProcOutputPager","Psy\\Output\\ShellOutput","Psy\\ParserFactory","Psy\\Readline\\GNUReadline","Psy\\Readline\\Libedit","Psy\\Readline\\Readline","Psy\\Readline\\Transient","Psy\\Reflection\\ReflectionConstant","Psy\\Shell","Psy\\TabCompletion\\AutoCompleter","Psy\\TabCompletion\\Matcher\\AbstractContextAwareMatcher","Psy\\TabCompletion\\Matcher\\AbstractMatcher","Psy\\TabCompletion\\Matcher\\ClassAttributesMatcher","Psy\\TabCompletion\\Matcher\\ClassMethodsMatcher","Psy\\TabCompletion\\Matcher\\ClassNamesMatcher","Psy\\TabCompletion\\Matcher\\CommandsMatcher","Psy\\TabCompletion\\Matcher\\ConstantsMatcher","Psy\\TabCompletion\\Matcher\\FunctionsMatcher","Psy\\TabCompletion\\Matcher\\KeywordsMatcher","Psy\\TabCompletion\\Matcher\\MongoClientMatcher","Psy\\TabCompletion\\Matcher\\MongoDatabaseMatcher","Psy\\TabCompletion\\Matcher\\ObjectAttributesMatcher","Psy\\TabCompletion\\Matcher\\ObjectMethodsMatcher","Psy\\TabCompletion\\Matcher\\VariablesMatcher","Psy\\Util\\Docblock","Psy\\Util\\Json","Psy\\Util\\Mirror","Psy\\Util\\Str","Psy\\VarDumper\\Cloner","Psy\\VarDumper\\Dumper","Psy\\VarDumper\\Presenter","Psy\\VarDumper\\PresenterAware","SqlFormatter","Symfony\\Component\\Config\\ConfigCache","Symfony\\Component\\Config\\ConfigCacheFactory","Symfony\\Component\\Config\\ConfigCacheFactoryInterface","Symfony\\Component\\Config\\ConfigCacheInterface","Symfony\\Component\\Config\\Definition\\ArrayNode","Symfony\\Component\\Config\\Definition\\BaseNode","Symfony\\Component\\Config\\Definition\\BooleanNode","Symfony\\Component\\Config\\Definition\\Builder\\ArrayNodeDefinition","Symfony\\Component\\Config\\Definition\\Builder\\BooleanNodeDefinition","Symfony\\Component\\Config\\Definition\\Builder\\EnumNodeDefinition","Symfony\\Component\\Config\\Definition\\Builder\\ExprBuilder","Symfony\\Component\\Config\\Definition\\Builder\\FloatNodeDefinition","Symfony\\Component\\Config\\Definition\\Builder\\IntegerNodeDefinition","Symfony\\Component\\Config\\Definition\\Builder\\MergeBuilder","Symfony\\Component\\Config\\Definition\\Builder\\NodeBuilder","Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition","Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface","Symfony\\Component\\Config\\Definition\\Builder\\NormalizationBuilder","Symfony\\Component\\Config\\Definition\\Builder\\NumericNodeDefinition","Symfony\\Component\\Config\\Definition\\Builder\\ParentNodeDefinitionInterface","Symfony\\Component\\Config\\Definition\\Builder\\ScalarNodeDefinition","Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder","Symfony\\Component\\Config\\Definition\\Builder\\ValidationBuilder","Symfony\\Component\\Config\\Definition\\Builder\\VariableNodeDefinition","Symfony\\Component\\Config\\Definition\\ConfigurationInterface","Symfony\\Component\\Config\\Definition\\Dumper\\XmlReferenceDumper","Symfony\\Component\\Config\\Definition\\Dumper\\YamlReferenceDumper","Symfony\\Component\\Config\\Definition\\EnumNode","Symfony\\Component\\Config\\Definition\\Exception\\DuplicateKeyException","Symfony\\Component\\Config\\Definition\\Exception\\Exception","Symfony\\Component\\Config\\Definition\\Exception\\ForbiddenOverwriteException","Symfony\\Component\\Config\\Definition\\Exception\\InvalidConfigurationException","Symfony\\Component\\Config\\Definition\\Exception\\InvalidDefinitionException","Symfony\\Component\\Config\\Definition\\Exception\\InvalidTypeException","Symfony\\Component\\Config\\Definition\\Exception\\UnsetKeyException","Symfony\\Component\\Config\\Definition\\FloatNode","Symfony\\Component\\Config\\Definition\\IntegerNode","Symfony\\Component\\Config\\Definition\\NodeInterface","Symfony\\Component\\Config\\Definition\\NumericNode","Symfony\\Component\\Config\\Definition\\Processor","Symfony\\Component\\Config\\Definition\\PrototypeNodeInterface","Symfony\\Component\\Config\\Definition\\PrototypedArrayNode","Symfony\\Component\\Config\\Definition\\ScalarNode","Symfony\\Component\\Config\\Definition\\VariableNode","Symfony\\Component\\Config\\Exception\\FileLoaderImportCircularReferenceException","Symfony\\Component\\Config\\Exception\\FileLoaderLoadException","Symfony\\Component\\Config\\FileLocator","Symfony\\Component\\Config\\FileLocatorInterface","Symfony\\Component\\Config\\Loader\\DelegatingLoader","Symfony\\Component\\Config\\Loader\\FileLoader","Symfony\\Component\\Config\\Loader\\Loader","Symfony\\Component\\Config\\Loader\\LoaderInterface","Symfony\\Component\\Config\\Loader\\LoaderResolver","Symfony\\Component\\Config\\Loader\\LoaderResolverInterface","Symfony\\Component\\Config\\ResourceCheckerConfigCache","Symfony\\Component\\Config\\ResourceCheckerConfigCacheFactory","Symfony\\Component\\Config\\ResourceCheckerInterface","Symfony\\Component\\Config\\Resource\\BCResourceInterfaceChecker","Symfony\\Component\\Config\\Resource\\DirectoryResource","Symfony\\Component\\Config\\Resource\\FileExistenceResource","Symfony\\Component\\Config\\Resource\\FileResource","Symfony\\Component\\Config\\Resource\\ResourceInterface","Symfony\\Component\\Config\\Resource\\SelfCheckingResourceChecker","Symfony\\Component\\Config\\Resource\\SelfCheckingResourceInterface","Symfony\\Component\\Config\\Util\\XmlUtils","Symfony\\Component\\Console\\Application","Symfony\\Component\\Console\\Command\\Command","Symfony\\Component\\Console\\Command\\HelpCommand","Symfony\\Component\\Console\\Command\\ListCommand","Symfony\\Component\\Console\\ConsoleEvents","Symfony\\Component\\Console\\Descriptor\\ApplicationDescription","Symfony\\Component\\Console\\Descriptor\\Descriptor","Symfony\\Component\\Console\\Descriptor\\DescriptorInterface","Symfony\\Component\\Console\\Descriptor\\JsonDescriptor","Symfony\\Component\\Console\\Descriptor\\MarkdownDescriptor","Symfony\\Component\\Console\\Descriptor\\TextDescriptor","Symfony\\Component\\Console\\Descriptor\\XmlDescriptor","Symfony\\Component\\Console\\Exception\\CommandNotFoundException","Symfony\\Component\\Console\\Exception\\ExceptionInterface","Symfony\\Component\\Console\\Exception\\InvalidArgumentException","Symfony\\Component\\Console\\Exception\\InvalidOptionException","Symfony\\Component\\Console\\Exception\\LogicException","Symfony\\Component\\Console\\Exception\\RuntimeException","Symfony\\Component\\Console\\Formatter\\OutputFormatter","Symfony\\Component\\Console\\Formatter\\OutputFormatterInterface","Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle","Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleInterface","Symfony\\Component\\Console\\Formatter\\OutputFormatterStyleStack","Symfony\\Component\\Console\\Helper\\DebugFormatterHelper","Symfony\\Component\\Console\\Helper\\DescriptorHelper","Symfony\\Component\\Console\\Helper\\DialogHelper","Symfony\\Component\\Console\\Helper\\FormatterHelper","Symfony\\Component\\Console\\Helper\\Helper","Symfony\\Component\\Console\\Helper\\HelperInterface","Symfony\\Component\\Console\\Helper\\HelperSet","Symfony\\Component\\Console\\Helper\\InputAwareHelper","Symfony\\Component\\Console\\Helper\\ProcessHelper","Symfony\\Component\\Console\\Helper\\ProgressBar","Symfony\\Component\\Console\\Helper\\ProgressHelper","Symfony\\Component\\Console\\Helper\\ProgressIndicator","Symfony\\Component\\Console\\Helper\\QuestionHelper","Symfony\\Component\\Console\\Helper\\SymfonyQuestionHelper","Symfony\\Component\\Console\\Helper\\Table","Symfony\\Component\\Console\\Helper\\TableCell","Symfony\\Component\\Console\\Helper\\TableHelper","Symfony\\Component\\Console\\Helper\\TableSeparator","Symfony\\Component\\Console\\Helper\\TableStyle","Symfony\\Component\\Console\\Input\\ArgvInput","Symfony\\Component\\Console\\Input\\ArrayInput","Symfony\\Component\\Console\\Input\\Input","Symfony\\Component\\Console\\Input\\InputArgument","Symfony\\Component\\Console\\Input\\InputAwareInterface","Symfony\\Component\\Console\\Input\\InputDefinition","Symfony\\Component\\Console\\Input\\InputInterface","Symfony\\Component\\Console\\Input\\InputOption","Symfony\\Component\\Console\\Input\\StringInput","Symfony\\Component\\Console\\Logger\\ConsoleLogger","Symfony\\Component\\Console\\Output\\BufferedOutput","Symfony\\Component\\Console\\Output\\ConsoleOutput","Symfony\\Component\\Console\\Output\\ConsoleOutputInterface","Symfony\\Component\\Console\\Output\\NullOutput","Symfony\\Component\\Console\\Output\\Output","Symfony\\Component\\Console\\Output\\OutputInterface","Symfony\\Component\\Console\\Output\\StreamOutput","Symfony\\Component\\Console\\Question\\ChoiceQuestion","Symfony\\Component\\Console\\Question\\ConfirmationQuestion","Symfony\\Component\\Console\\Question\\Question","Symfony\\Component\\Console\\Shell","Symfony\\Component\\Console\\Style\\OutputStyle","Symfony\\Component\\Console\\Style\\StyleInterface","Symfony\\Component\\Console\\Style\\SymfonyStyle","Symfony\\Component\\Console\\Tester\\ApplicationTester","Symfony\\Component\\Console\\Tester\\CommandTester","Symfony\\Component\\Filesystem\\Exception\\ExceptionInterface","Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException","Symfony\\Component\\Filesystem\\Exception\\IOException","Symfony\\Component\\Filesystem\\Exception\\IOExceptionInterface","Symfony\\Component\\Filesystem\\Filesystem","Symfony\\Component\\Filesystem\\LockHandler","Symfony\\Component\\VarDumper\\Caster\\AmqpCaster","Symfony\\Component\\VarDumper\\Caster\\Caster","Symfony\\Component\\VarDumper\\Caster\\ConstStub","Symfony\\Component\\VarDumper\\Caster\\CutArrayStub","Symfony\\Component\\VarDumper\\Caster\\CutStub","Symfony\\Component\\VarDumper\\Caster\\DOMCaster","Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster","Symfony\\Component\\VarDumper\\Caster\\EnumStub","Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster","Symfony\\Component\\VarDumper\\Caster\\FrameStub","Symfony\\Component\\VarDumper\\Caster\\MongoCaster","Symfony\\Component\\VarDumper\\Caster\\PdoCaster","Symfony\\Component\\VarDumper\\Caster\\PgSqlCaster","Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster","Symfony\\Component\\VarDumper\\Caster\\ResourceCaster","Symfony\\Component\\VarDumper\\Caster\\SplCaster","Symfony\\Component\\VarDumper\\Caster\\StubCaster","Symfony\\Component\\VarDumper\\Caster\\TraceStub","Symfony\\Component\\VarDumper\\Caster\\XmlResourceCaster","Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner","Symfony\\Component\\VarDumper\\Cloner\\ClonerInterface","Symfony\\Component\\VarDumper\\Cloner\\Cursor","Symfony\\Component\\VarDumper\\Cloner\\Data","Symfony\\Component\\VarDumper\\Cloner\\DumperInterface","Symfony\\Component\\VarDumper\\Cloner\\Stub","Symfony\\Component\\VarDumper\\Cloner\\VarCloner","Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper","Symfony\\Component\\VarDumper\\Dumper\\CliDumper","Symfony\\Component\\VarDumper\\Dumper\\DataDumperInterface","Symfony\\Component\\VarDumper\\Dumper\\HtmlDumper","Symfony\\Component\\VarDumper\\Exception\\ThrowingCasterException","Symfony\\Component\\VarDumper\\Test\\VarDumperTestTrait","Symfony\\Component\\VarDumper\\VarDumper","Symfony\\Component\\Yaml\\Dumper","Symfony\\Component\\Yaml\\Escaper","Symfony\\Component\\Yaml\\Exception\\DumpException","Symfony\\Component\\Yaml\\Exception\\ExceptionInterface","Symfony\\Component\\Yaml\\Exception\\ParseException","Symfony\\Component\\Yaml\\Exception\\RuntimeException","Symfony\\Component\\Yaml\\Inline","Symfony\\Component\\Yaml\\Parser","Symfony\\Component\\Yaml\\Unescaper","Symfony\\Component\\Yaml\\Yaml","Symfony\\Polyfill\\Mbstring\\Mbstring","XdgBaseDir\\Xdg","stdClass","Exception","ErrorException","Error","ParseError","TypeError","ArgumentCountError","ArithmeticError","DivisionByZeroError","Closure","Generator","ClosedGeneratorException","DateTime","DateTimeImmutable","DateTimeZone","DateInterval","DatePeriod","LibXMLError","SQLite3","SQLite3Stmt","SQLite3Result","CURLFile","DOMException","DOMStringList","DOMNameList","DOMImplementationList","DOMImplementationSource","DOMImplementation","DOMNode","DOMNameSpaceNode","DOMDocumentFragment","DOMDocument","DOMNodeList","DOMNamedNodeMap","DOMCharacterData","DOMAttr","DOMElement","DOMText","DOMComment","DOMTypeinfo","DOMUserDataHandler","DOMDomError","DOMErrorHandler","DOMLocator","DOMConfiguration","DOMCdataSection","DOMDocumentType","DOMNotation","DOMEntity","DOMEntityReference","DOMProcessingInstruction","DOMStringExtend","DOMXPath","finfo","LogicException","BadFunctionCallException","BadMethodCallException","DomainException","InvalidArgumentException","LengthException","OutOfRangeException","RuntimeException","OutOfBoundsException","OverflowException","RangeException","UnderflowException","UnexpectedValueException","RecursiveIteratorIterator","IteratorIterator","FilterIterator","RecursiveFilterIterator","CallbackFilterIterator","RecursiveCallbackFilterIterator","ParentIterator","LimitIterator","CachingIterator","RecursiveCachingIterator","NoRewindIterator","AppendIterator","InfiniteIterator","RegexIterator","RecursiveRegexIterator","EmptyIterator","RecursiveTreeIterator","ArrayObject","ArrayIterator","RecursiveArrayIterator","SplFileInfo","DirectoryIterator","FilesystemIterator","RecursiveDirectoryIterator","GlobIterator","SplFileObject","SplTempFileObject","SplDoublyLinkedList","SplQueue","SplStack","SplHeap","SplMinHeap","SplMaxHeap","SplPriorityQueue","SplFixedArray","SplObjectStorage","MultipleIterator","SessionHandler","__PHP_Incomplete_Class","php_user_filter","Directory","AssertionError","PDOException","PDO","PDOStatement","PDORow","PharException","Phar","PharData","PharFileInfo","ReflectionException","Reflection","ReflectionFunctionAbstract","ReflectionFunction","ReflectionGenerator","ReflectionParameter","ReflectionType","ReflectionNamedType","ReflectionMethod","ReflectionClass","ReflectionObject","ReflectionProperty","ReflectionClassConstant","ReflectionExtension","ReflectionZendExtension","mysqli_sql_exception","mysqli_driver","mysqli","mysqli_warning","mysqli_result","mysqli_stmt","SimpleXMLElement","SimpleXMLIterator","SoapClient","SoapVar","SoapServer","SoapFault","SoapParam","SoapHeader","XMLReader","XMLWriter","XSLTProcessor","ZipArchive","Collator","NumberFormatter","Normalizer","Locale","MessageFormatter","IntlDateFormatter","ResourceBundle","Transliterator","IntlTimeZone","IntlCalendar","IntlGregorianCalendar","Spoofchecker","IntlException","IntlIterator","IntlBreakIterator","IntlRuleBasedBreakIterator","IntlCodePointBreakIterator","IntlPartsIterator","UConverter","IntlChar"]}